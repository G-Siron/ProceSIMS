from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QMessageBox, QDialog, QWidget, QVBoxLayout, QLabel, QTableWidgetItem, QTableView, QAbstractItemView
from PyQt5.QtCore import Qt, QRect
from PyQt5.QtGui import QDoubleValidator
import matplotlib
matplotlib.use('Qt5Agg')   
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from matplotlib.figure import Figure
from matplotlib.gridspec import GridSpec
from matplotlib.patches import Circle
from scipy import stats
import sys
import os
import re
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from statsmodels.regression.linear_model import WLS as WLS
from statsmodels.regression.linear_model import OLS as OLS
from statsmodels.sandbox.regression.predstd import wls_prediction_std
import datetime as dt
import time as tm
from itertools import islice


import ProceSIMS_Layout
import PopUp_Deadtime_Layout
import PopUp_n_cycles_Layout
import PopUp_Ref_iso_Layout
import PopUp_Ref_conc_1ratio_Layout
import PopUp_Ref_conc_2ratios_Layout
import PopUp_Ref_conc_3ratios_Layout
import PopUp_Ref_conc_4ratios_Layout
import Figure_data_Layout
import Figure_data_2ratios_Layout
import Figure_data_3ratios_Layout
import Figure_data_4ratios_Layout
import Figure_Add_Info_Layout
import Figure_Statistics
import Table_Input_Matrix
import Figure_cycles_Layout_Al_Mg
import Figure_cycles_Layout_dD
import Figure_cycles_Layout_d7Li
import Figure_cycles_Layout_d11B
import Figure_cycles_Layout_d13C
import Figure_cycles_Layout_d18O
import Figure_cycles_Layout_D17O
import Figure_cycles_Layout_d37Cl
import About_Layout
import Stats_Window


# ProceSIMS version 1.1.2
# Created and maintained by Guillaume Siron 

class PopUp_n_cycles_Window(QDialog, PopUp_n_cycles_Layout.Ui_Dialog_new_n_cycles):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)

        self.lineEdit_n_cycles.editingFinished.connect(self.Press_new_n_cycles)

    def Press_new_n_cycles(self):
        global n_cycles_set
        global number_of_cycles
        number_of_cycles = []
        n_cycles_set_str = self.lineEdit_n_cycles.text()
        n_cycles_set = int(n_cycles_set_str)
        number_of_cycles = 1

class New_Deadtime_Window(QDialog, PopUp_Deadtime_Layout.Ui_Dialog_New_Deadtime):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)

        self.lineEdit_New_Deadtime_value.editingFinished.connect(self.Press_new_Deadtime)

    def Press_new_Deadtime(self):
        global New_Deadtime_value
        New_Deadtime_value_str = self.lineEdit_New_Deadtime_value.text()
        New_Deadtime_value = float(New_Deadtime_value_str)
        self.Deadtime_new()

    def Deadtime_new(self):
        global Cycles_tot
        global Deadtime_new
        global new_Cycles_tot
        if Isotopic_system_value == 8:
            if Section_value == 0:
                if Input_Mat_mod == 0:
                    new_X_25 = 1 - np.asarray(Cycles_tot['25Mg'].values) * 0.98
                    Cycles_25Mg_uncorr = (1 - new_X_25) / (1 - (60 / 1000000000) * new_X_25)
                    Cycles_25Mg_mod = (1 / 0.98) * ((np.asarray(Cycles_25Mg_uncorr) / (1 - np.asarray(Cycles_25Mg_uncorr) * (New_Deadtime_value / 1000000000))))
                    new_X_26 = 1 - np.asarray(Cycles_tot['26Mg'].values) * 0.98
                    Cycles_26Mg_uncorr = (1 - new_X_26) / (1 - (60 / 1000000000) * new_X_26)
                    Cycles_26Mg_mod = (1 / 0.98) * (np.asarray(Cycles_26Mg_uncorr) / (1 - np.asarray(Cycles_26Mg_uncorr) * (New_Deadtime_value / 1000000000)))
                    Cycles_tot = Cycles_tot.assign(cycles_25Mg_mod=Cycles_25Mg_mod)
                    Cycles_tot = Cycles_tot.assign(cycles_26Mg_mod=Cycles_26Mg_mod)
                elif Input_Mat_mod == 1:
                    new_X_25 = 1 - np.asarray(new_Cycles_tot['25Mg'].values) * 0.98
                    Cycles_25Mg_uncorr = (1 - new_X_25) / (1 - (60 / 1000000000) * new_X_25)
                    Cycles_25Mg_mod = (1 / 0.98) * ((np.asarray(Cycles_25Mg_uncorr) / (1 - np.asarray(Cycles_25Mg_uncorr) * (New_Deadtime_value / 1000000000))))
                    new_X_26 = 1 - np.asarray(new_Cycles_tot['26Mg'].values) * 0.98
                    Cycles_26Mg_uncorr = (1 - new_X_26) / (1 - (60 / 1000000000) * new_X_26)
                    Cycles_26Mg_mod = (1 / 0.98) * (np.asarray(Cycles_26Mg_uncorr) / (1 - np.asarray(Cycles_26Mg_uncorr) * (New_Deadtime_value / 1000000000)))
                    new_Cycles_tot = new_Cycles_tot.assign(cycles_25Mg_mod=Cycles_25Mg_mod)
                    new_Cycles_tot = new_Cycles_tot.assign(cycles_26Mg_mod=Cycles_26Mg_mod)
            elif Section_value == 1:
                new_X_25 = 1 - np.asarray(Cycles_section['25Mg'].values) * 0.98
                Cycles_25Mg_uncorr = (1 - new_X_25) / (1 - (60 / 1000000000) * new_X_25)
                Cycles_25Mg_mod = (1 / 0.98) * ((np.asarray(Cycles_25Mg_uncorr) / (1 - np.asarray(Cycles_25Mg_uncorr) * (New_Deadtime_value / 1000000000))))
                new_X_26 = 1 - np.asarray(Cycles_section['26Mg'].values) * 0.98
                Cycles_26Mg_uncorr = (1 - new_X_26) / (1 - (60 / 1000000000) * new_X_26)
                Cycles_26Mg_mod = (1 / 0.98) * (np.asarray(Cycles_26Mg_uncorr) / (1 - np.asarray(Cycles_26Mg_uncorr) * (New_Deadtime_value / 1000000000)))
                Cycles_section = Cycles_section.assign(cycles_25Mg_mod=Cycles_25Mg_mod)
                Cycles_section = Cycles_section.assign(cycles_26Mg_mod=Cycles_26Mg_mod)
        elif Isotopic_system_value == 9:
            if Section_value == 0:
                if Input_Mat_mod == 0:
                    new_X_24 = 1 - np.asarray(Cycles_tot['24Mg'].values) * 0.98
                    Cycles_24Mg_uncorr = (1 - new_X_24) / (1 - (60 / 1000000000) * new_X_24)
                    Cycles_24Mg_mod = (1 / 0.98) * ((np.asarray(Cycles_24Mg_uncorr) / (1 - np.asarray(Cycles_24Mg_uncorr) * (New_Deadtime_value / 1000000000))))
                    new_X_25 = 1 - np.asarray(Cycles_tot['25Mg'].values) * 0.98
                    Cycles_25Mg_uncorr = (1 - new_X_25) / (1 - (60 / 1000000000) * new_X_25)
                    Cycles_25Mg_mod = (1 / 0.98) * ((np.asarray(Cycles_25Mg_uncorr) / (1 - np.asarray(Cycles_25Mg_uncorr) * (New_Deadtime_value / 1000000000))))
                    new_X_26 = 1 - np.asarray(Cycles_tot['26Mg'].values) * 0.98
                    Cycles_26Mg_uncorr = (1 - new_X_26) / (1 - (60 / 1000000000) * new_X_26)
                    Cycles_26Mg_mod = (1 / 0.98) * (np.asarray(Cycles_26Mg_uncorr) / (1 - np.asarray(Cycles_26Mg_uncorr) * (New_Deadtime_value / 1000000000)))
                    Cycles_tot = Cycles_tot.assign(cycles_24Mg_mod=Cycles_24Mg_mod)
                    Cycles_tot = Cycles_tot.assign(cycles_25Mg_mod=Cycles_25Mg_mod)
                    Cycles_tot = Cycles_tot.assign(cycles_26Mg_mod=Cycles_26Mg_mod)
                elif Input_Mat_mod == 1:
                    new_X_24 = 1 - np.asarray(new_Cycles_tot['24Mg'].values) * 0.98
                    Cycles_24Mg_uncorr = (1 - new_X_24) / (1 - (60 / 1000000000) * new_X_24)
                    Cycles_24Mg_mod = (1 / 0.98) * ((np.asarray(Cycles_24Mg_uncorr) / (1 - np.asarray(Cycles_24Mg_uncorr) * (New_Deadtime_value / 1000000000))))
                    new_X_25 = 1 - np.asarray(new_Cycles_tot['25Mg'].values) * 0.98
                    Cycles_25Mg_uncorr = (1 - new_X_25) / (1 - (60 / 1000000000) * new_X_25)
                    Cycles_25Mg_mod = (1 / 0.98) * ((np.asarray(Cycles_25Mg_uncorr) / (1 - np.asarray(Cycles_25Mg_uncorr) * (New_Deadtime_value / 1000000000))))
                    new_X_26 = 1 - np.asarray(new_Cycles_tot['26Mg'].values) * 0.98
                    Cycles_26Mg_uncorr = (1 - new_X_26) / (1 - (60 / 1000000000) * new_X_26)
                    Cycles_26Mg_mod = (1 / 0.98) * (np.asarray(Cycles_26Mg_uncorr) / (1 - np.asarray(Cycles_26Mg_uncorr) * (New_Deadtime_value / 1000000000)))
                    new_Cycles_tot = new_Cycles_tot.assign(cycles_24Mg_mod=Cycles_24Mg_mod)
                    new_Cycles_tot = new_Cycles_tot.assign(cycles_25Mg_mod=Cycles_25Mg_mod)
                    new_Cycles_tot = new_Cycles_tot.assign(cycles_26Mg_mod=Cycles_26Mg_mod)
            elif Section_value == 1:
                new_X_24 = 1 - np.asarray(Cycles_section['24Mg'].values) * 0.98
                Cycles_24Mg_uncorr = (1 - new_X_24) / (1 - (60 / 1000000000) * new_X_24)
                Cycles_24Mg_mod = (1 / 0.98) * ((np.asarray(Cycles_24Mg_uncorr) / (1 - np.asarray(Cycles_24Mg_uncorr) * (New_Deadtime_value / 1000000000))))
                new_X_25 = 1 - np.asarray(Cycles_section['25Mg'].values) * 0.98
                Cycles_25Mg_uncorr = (1 - new_X_25) / (1 - (60 / 1000000000) * new_X_25)
                Cycles_25Mg_mod = (1 / 0.98) * ((np.asarray(Cycles_25Mg_uncorr) / (1 - np.asarray(Cycles_25Mg_uncorr) * (New_Deadtime_value / 1000000000))))
                new_X_26 = 1 - np.asarray(Cycles_section['26Mg'].values) * 0.98
                Cycles_26Mg_uncorr = (1 - new_X_26) / (1 - (60 / 1000000000) * new_X_26)
                Cycles_26Mg_mod = (1 / 0.98) * (np.asarray(Cycles_26Mg_uncorr) / (1 - np.asarray(Cycles_26Mg_uncorr) * (New_Deadtime_value / 1000000000)))
                Cycles_section = Cycles_section.assign(cycles_24Mg_mod=Cycles_24Mg_mod)
                Cycles_section = Cycles_section.assign(cycles_25Mg_mod=Cycles_25Mg_mod)
                Cycles_section = Cycles_section.assign(cycles_26Mg_mod=Cycles_26Mg_mod)
        Deadtime_new = 1


class About_Layout(QWidget, About_Layout.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)

class Stats_Window_show(QWidget, Stats_Window.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)

        self.pushButton_saveStats.clicked.connect(self.save_Stats_file)

        global set_text_Stats
        if Analyses_type_value == 1 and nb_std_iso_value == 1 and drift_order_iso_value == 0:
            set_text_Stats = 'Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD
            self.textEdit_Stats.setText(set_text_Stats)
        elif Analyses_type_value == 1 and nb_std_iso_value == 1 and drift_order_iso_value >= 1:
            if drift_order_iso_value == 1:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                set_text_Stats = 'Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a1 + ' x + ' + str_a0 + '\n\n' + str_Summary
                self.textEdit_Stats.setText(set_text_Stats)
            elif drift_order_iso_value == 2:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                set_text_Stats = 'Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a2 + ' x^2 + ' + str_a1 + ' x + ' + str_a0 + '\n\n' + str_Summary
                self.textEdit_Stats.setText(set_text_Stats)
            elif drift_order_iso_value == 3:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                set_text_Stats = 'Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a3 + ' x^3 + ' + str_a2 + ' x^2 + ' + str_a1 + ' x + ' + str_a0 + '\n\n' + str_Summary
                self.textEdit_Stats.setText(set_text_Stats)
            elif drift_order_iso_value == 4:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                set_text_Stats = 'Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a4 + ' x^4 + ' + str_a3 + ' x^3 + ' + str_a2 + 'x^2\n + ' + str_a1 + ' x + ' + str_a0 + '\n\n' + str_Summary
                self.textEdit_Stats.setText(set_text_Stats)
            elif drift_order_iso_value == 5:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                str_a5 = "%.5f" %(a5)
                set_text_Stats = 'Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a5 + ' x^5 + ' + str_a4 + ' x^4 + ' + str_a3 + ' x^3\n + ' + str_a2 + 'x^2 + ' + str_a1 + ' x + ' + str_a0 + '\n\n' + str_Summary
                self.textEdit_Stats.setText(set_text_Stats)
            elif drift_order_iso_value == 6:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                str_a5 = "%.5f" %(a5)
                str_a6 = "%.5f" %(a6)
                sset_text_Stats = 'Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a6 + ' x^6 + ' + str_a5 + ' x^5 + ' + str_a4 + ' x^4\n + ' + str_a3 + ' x^3 + ' + str_a2 + 'x^2 + ' + str_a1 + ' x + ' + str_a0 + '\n\n' + str_Summary
                self.textEdit_Stats.setText(set_text_Stats)
            elif drift_order_iso_value == 7:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                str_a5 = "%.5f" %(a5)
                str_a6 = "%.5f" %(a6)
                str_a7 = "%.5f" %(a7)
                set_text_Stats = 'Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a7 + ' x^7 + ' + str_a6 + ' x^6 + ' + str_a5 + ' x^5\n + ' + str_a4 + ' x^4 + ' + str_a3 + ' x^3 + ' + str_a2 + 'x^2 + ' + str_a1 + ' x + ' + str_a0 + '\n\n' + str_Summary
                self.textEdit_Stats.setText(set_text_Stats)
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and drift_order_iso_value == 0:
            set_text_Stats = 'Statistics:\n\nStd1:\n2SD = ' + str_sd_std1_SIMS + ' permil\n2SE = ' + str_se_std1_SIMS + '\n\nStd2:\n2SD = ' + str_sd_std2_SIMS + ' permil\n2SE = ' + str_se_std2_SIMS+ ' permil\n\nMSWD = ' + str_MSWD_tot
            self.textEdit_Stats.setText(set_text_Stats)
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and drift_order_iso_value >= 1:
            if drift_order_iso_value == 1:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.2f" %(a2)
                set_text_Stats = 'Statistics:\n\nStd1:\n2SD = ' + str_sd_std1_SIMS + ' permil\n2SE = ' + str_se_std1_SIMS + '\n\nStd2:\n2SD = ' + str_sd_std2_SIMS + ' permil\n2SE = ' + str_se_std2_SIMS+ ' permil\n\nMSWD = ' + str_MSWD_tot + '\n\nEquation:\ny (std1) = ' + str_a2 + ' x + ' + str_a0 + '\n\ny (std2) = ' + str_a2 + ' x + ' + str_a1 + '\n\n'+ str_Summary
                self.textEdit_Stats.setText(set_text_Stats)
            elif drift_order_iso_value == 2:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.3f" %(a3)
                set_text_Stats = 'Statistics:\n\nStd1:\n2SD = ' + str_sd_std1_SIMS + ' permil\n2SE = ' + str_se_std1_SIMS + '\n\nStd2:\n2SD = ' + str_sd_std2_SIMS + ' permil\n2SE = ' + str_se_std2_SIMS+ ' permil\n\nMSWD = ' + str_MSWD_tot + '\n\nEquation:\ny = ' + str_a2 + ' x^2 + ' + str_a1 + ' x + ' + str_a0 + '\n\n' + str_Summary
                self.textEdit_Stats.setText(set_text_Stats)
            elif drift_order_iso_value == 3:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                set_text_Stats = 'Statistics:\n\nStd1:\n2SD = ' + str_sd_std1_SIMS + ' permil\n2SE = ' + str_se_std1_SIMS + '\n\nStd2:\n2SD = ' + str_sd_std2_SIMS + ' permil\n2SE = ' + str_se_std2_SIMS+ ' permil\n\nMSWD = ' + str_MSWD_tot + '\n\nEquation:\ny = ' + str_a3 + ' x^3 + ' + str_a2 + ' x^2 + ' + str_a1 + ' x + ' + str_a0 + '\n\n' + str_Summary
                self.textEdit_Stats.setText(set_text_Stats)
            elif drift_order_iso_value == 4:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                set_text_Stats = 'Statistics:\n\nStd1:\n2SD = ' + str_sd_std1_SIMS + ' permil\n2SE = ' + str_se_std1_SIMS + '\n\nStd2:\n2SD = ' + str_sd_std2_SIMS + ' permil\n2SE = ' + str_se_std2_SIMS+ ' permil\n\nMSWD = ' + str_MSWD_tot + '\n\nEquation:\ny = ' + str_a4 + ' x^4 + ' + str_a3 + ' x^3 + ' + str_a2 + 'x^2\n + ' + str_a1 + ' x + ' + str_a0 + '\n\n' + str_Summary
                self.textEdit_Stats.setText(set_text_Stats)
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and drift_order_iso_value == 0:
            set_text_Stats = 'Statistics:\n\nStd1:\n2SD = ' + str_sd_std1_SIMS + ' permil\n2SE = ' + str_se_std1_SIMS + '\n\nStd2:\n2SD = ' + str_sd_std2_SIMS + ' permil\n2SE = ' + str_se_std2_SIMS+ ' permil\n\nMSWD = ' + str_MSWD_tot
            self.textEdit_Stats.setText(set_text_Stats)
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and drift_order_iso_value >= 1:
            if drift_order_iso_value == 1:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.2f" %(a2)
                str_a3 = "%.2f" %(a3)
                set_text_Stats = 'Statistics:\n\nStd1:\n2SD = ' + str_sd_std1_SIMS + ' permil\n2SE = ' + str_se_std1_SIMS + '\n\nStd2:\n2SD = ' + str_sd_std2_SIMS + ' permil\n2SE = ' + str_se_std2_SIMS+ ' permil\n\nMSWD = ' + str_MSWD_tot + '\n\nEquation:\ny (std1) = ' + str_a2 + ' x + ' + str_a0 + '\n\ny (std2) = ' + str_a2 + ' x + ' + str_a1 + '\n\n'+ str_Summary
                self.textEdit_Stats.setText(set_text_Stats)
            elif drift_order_iso_value == 2:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.3f" %(a3)
                set_text_Stats = 'Statistics:\n\nStd1:\n2SD = ' + str_sd_std1_SIMS + ' permil\n2SE = ' + str_se_std1_SIMS + '\n\nStd2:\n2SD = ' + str_sd_std2_SIMS + ' permil\n2SE = ' + str_se_std2_SIMS+ ' permil\n\nMSWD = ' + str_MSWD_tot + '\n\nEquation:\ny = ' + str_a2 + ' x^2 + ' + str_a1 + ' x + ' + str_a0 + '\n\n' + str_Summary
                self.textEdit_Stats.setText(set_text_Stats)
            elif drift_order_iso_value == 3:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                set_text_Stats = 'Statistics:\n\nStd1:\n2SD = ' + str_sd_std1_SIMS + ' permil\n2SE = ' + str_se_std1_SIMS + '\n\nStd2:\n2SD = ' + str_sd_std2_SIMS + ' permil\n2SE = ' + str_se_std2_SIMS+ ' permil\n\nMSWD = ' + str_MSWD_tot + '\n\nEquation:\ny = ' + str_a3 + ' x^3 + ' + str_a2 + ' x^2 + ' + str_a1 + ' x + ' + str_a0 + '\n\n' + str_Summary
                self.textEdit_Stats.setText(set_text_Stats)
            elif drift_order_iso_value == 4:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                set_text_Stats = 'Statistics:\n\nStd1:\n2SD = ' + str_sd_std1_SIMS + ' permil\n2SE = ' + str_se_std1_SIMS + '\n\nStd2:\n2SD = ' + str_sd_std2_SIMS + ' permil\n2SE = ' + str_se_std2_SIMS+ ' permil\n\nMSWD = ' + str_MSWD_tot + '\n\nEquation:\ny = ' + str_a4 + ' x^4 + ' + str_a3 + ' x^3 + ' + str_a2 + 'x^2\n + ' + str_a1 + ' x + ' + str_a0 + '\n\n' + str_Summary
                self.textEdit_Stats.setText(set_text_Stats)


    def save_Stats_file(self):
        name_Stats_file = QFileDialog.getSaveFileName(self, 'Save Figure')
        name_save_Stats_file = name_Stats_file[0] + '.txt'
        stats_file = open(name_save_Stats_file,'w')
        stats_file.write(set_text_Stats)

class Data_selection_Window(QWidget, Table_Input_Matrix.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)

        self.tableWidget_InputMat.setSelectionBehavior(QTableView.SelectRows)
        self.tableWidget_InputMat.setSelectionMode(QAbstractItemView.MultiSelection)
        if Input_Mat_mod == 0:
            self.tableWidget_InputMat.setRowCount(len(Filename))
            self.tableWidget_InputMat.setColumnCount(len(B.columns))
            header = list(B.columns)
            self.tableWidget_InputMat.setHorizontalHeaderLabels(header)
            for i in range(len(Filename)):
                for j in range(len(B.columns)):
                    self.tableWidget_InputMat.setItem(i,j,QTableWidgetItem(str(B.iloc[i, j])))

        if Input_Mat_mod == 1:
            self.tableWidget_InputMat.setRowCount(len(B_mod['Name']))
            self.tableWidget_InputMat.setColumnCount(len(B_mod.columns))
            header = list(B_mod.columns)
            self.tableWidget_InputMat.setHorizontalHeaderLabels(header)
            for i in range(len(B_mod['Name'])):
                for j in range(len(B_mod.columns)):
                    self.tableWidget_InputMat.setItem(i,j,QTableWidgetItem(str(B_mod.iloc[i, j])))

        self.pushButton_Start.clicked.connect(self.Start_Analysis)
        self.pushButton_End.clicked.connect(self.End_Analysis)
        self.pushButton_Delete.clicked.connect(self.Delete_Analysis)
        self.pushButton_Section.clicked.connect(self.Section_of_Analysis)
        self.pushButton_Cycles.clicked.connect(self.Show_cycles)
        
    def Delete_Analysis(self):
        global Input_Mat_mod
        global B_mod
        global new_Cycles_tot
        indexes = self.tableWidget_InputMat.selectionModel().selectedRows()
        for index in sorted(indexes):
            if Name_cell == 0:
                Filename_to_delete = str(self.tableWidget_InputMat.item(index.row(),1).text())
            elif Name_cell == 1:
                Filename_to_delete = str(self.tableWidget_InputMat.item(index.row(),2).text())
            Filename_to_delete = float(Filename_to_delete)
            if Input_Mat_mod == 0:
                B_mod = B[B['Time (h)'] != Filename_to_delete]
                new_Cycles_tot = Cycles_tot[Cycles_tot['Time (h)'] != Filename_to_delete]
                new_Cycles_tot['Time (h)'] = new_Cycles_tot['Time (h)'] - min(new_Cycles_tot['Time (h)'])
                new_Cycles_tot.to_csv('Cycles_tot.csv', index=False)
            elif Input_Mat_mod == 1:
                B_mod = B_mod[B_mod['Time (h)'] != Filename_to_delete]
                new_Cycles_tot = new_Cycles_tot[new_Cycles_tot['Time (h)'] != Filename_to_delete]
                new_Cycles_tot['Time (h)'] = new_Cycles_tot['Time (h)'] - min(new_Cycles_tot['Time (h)'])
                new_Cycles_tot.to_csv('Cycles_tot.csv', index=False)
        Input_Mat_mod = 1

    def Start_Analysis(self):
        global Input_Mat_mod
        global B_mod
        global new_Cycles_tot
        row_start = self.tableWidget_InputMat.currentRow()
        if Name_cell == 0:
            Time_to_start = str(self.tableWidget_InputMat.item(row_start,1).text())
        elif Name_cell == 1:
            Time_to_start = str(self.tableWidget_InputMat.item(row_start,2).text())
        Time_to_start = float(Time_to_start)
        if Input_Mat_mod == 0:
            B_mod = B.loc[(B['Time (h)'] >= Time_to_start)]
            B_mod['Time (h)'] = B_mod['Time (h)'] - min(B_mod['Time (h)'])
            new_Cycles_tot = Cycles_tot.loc[(Cycles_tot['Time (h)'] >= Time_to_start)]
            new_Cycles_tot['Time (h)'] = new_Cycles_tot['Time (h)'] - min(new_Cycles_tot['Time (h)'])
        elif Input_Mat_mod == 1:
            B_mod = B_mod.loc[(B_mod['Time (h)'] >= Time_to_start)]
            B_mod['Time (h)'] = B_mod['Time (h)'] - min(B_mod['Time (h)'])
            new_Cycles_tot = new_Cycles_tot.loc[(new_Cycles_tot['Time (h)'] >= Time_to_start)]
            new_Cycles_tot['Time (h)'] = new_Cycles_tot['Time (h)'] - min(new_Cycles_tot['Time (h)'])
        Input_Mat_mod = 1

    def End_Analysis(self):
        global Input_Mat_mod
        global B_mod
        global new_Cycles_tot
        row_end = self.tableWidget_InputMat.currentRow()
        if Name_cell == 0:
            Time_to_end = str(self.tableWidget_InputMat.item(row_end,1).text())
        elif Name_cell == 1:
            Time_to_end = str(self.tableWidget_InputMat.item(row_end,2).text())
        Time_to_end = float(Time_to_end)
        if Input_Mat_mod == 0:
            B_mod = B.loc[(B['Time (h)'] < Time_to_end)]
        elif Input_Mat_mod == 1:
            B_mod = B_mod.loc[(B_mod['Time (h)'] < Time_to_end)]
        new_Cycles_tot = Cycles_tot.loc[(Cycles_tot['Time (h)'] < Time_to_end)]
        new_Cycles_tot['Time (h)'] = new_Cycles_tot['Time (h)'] - min(new_Cycles_tot['Time (h)'])
        Input_Mat_mod = 1

    def Section_of_Analysis(self):
        global Input_Mat_mod
        global Section_value
        global Cycles_section
        Cycles_section = []
        Cycles_sections = []
        global Analyses_section
        Analyses_section = []
        global Selection_section
        Selection_section = []
        global B_section
        B_section = []
        B_sections = []
        Section_value = 1
        indexes = self.tableWidget_InputMat.selectionModel().selectedRows()
        for index in sorted(indexes):
            Analysis_section = str(self.tableWidget_InputMat.item(index.row(),0).text())
            Analyses_section.append(Analysis_section)
            if Name_cell == 0:
                Selection_section_i = str(self.tableWidget_InputMat.item(index.row(),1).text())
                Selection_section.append(Selection_section_i)
            elif Name_cell == 1:
                Selection_section_i = str(self.tableWidget_InputMat.item(index.row(),2).text())
                Selection_section.append(Selection_section_i)
        if Input_Mat_mod == 0:
            for i in range(len(Selection_section)):
                Str_to_match = Selection_section[i]
                Cycles_sections.append(Cycles_tot[Cycles_tot['Time (h)'].astype(str).str.contains(Str_to_match, regex=False)])
                B_sections.append(B[B['Time (h)'].astype(str).str.contains(Str_to_match, regex=False)])
        elif Input_Mat_mod == 1:
            for i in range(len(Selection_section)):
                Str_to_match = Selection_section[i]
                Cycles_sections.append(new_Cycles_tot[new_Cycles_tot['Time (h)'].astype(str).str.contains(Str_to_match, regex=False)])
                B_sections.append(B_mod[B_mod['Time (h)'].astype(str).str.contains(Str_to_match, regex=False)])
        Section_value = 1
        Cycles_section = pd.concat(Cycles_sections)
        # Cycles_section['Time (h)'] = Cycles_tot['Time (h)'] - min(Cycles_section['Time (h)'])
        B_section = pd.concat(B_sections)
        B_section['Time (h)'] = B_section['Time (h)'] - min(B_section['Time (h)'])

    def Show_cycles(self):
        global Analyses_to_show
        Analyses_to_show = []
        global Selection_to_show
        Selection_to_show = []
        global Cycles_show
        Cycles_show = []
        indexes = self.tableWidget_InputMat.selectionModel().selectedRows()
        for index in sorted(indexes):
            Analysis_to_show = str(self.tableWidget_InputMat.item(index.row(),0).text())
            Analyses_to_show.append(Analysis_to_show)
            if Name_cell == 0:
                Selection_show = str(self.tableWidget_InputMat.item(index.row(),1).text())
                Selection_to_show.append(Selection_show)
            elif Name_cell == 1:
                Selection_show = str(self.tableWidget_InputMat.item(index.row(),2).text())
                Selection_to_show.append(Selection_show)
        if Input_Mat_mod == 0:
            for i in range(len(Selection_to_show)):
                Str_to_match = Selection_to_show[i]
                Cycles_show.append(Cycles_tot[Cycles_tot['Time (h)'].astype(str).str.contains(Str_to_match, regex=False)])
        elif Input_Mat_mod == 1:
            for i in range(len(Selection_to_show)):
                Str_to_match = Selection_to_show[i]
                Cycles_show.append(new_Cycles_tot[new_Cycles_tot['Time (h)'].astype(str).str.contains(Str_to_match, regex=False)])
        if Isotopic_system_value == 8 or Isotopic_system_value == 9:
            self.Figure_cycles = Figure_cycles_Window_Al_Mg()
            self.Figure_cycles.show()
        elif Isotopic_system_value == 1:
            self.Figure_cycles = Figure_cycles_Window_dD()
            self.Figure_cycles.show()
        elif Isotopic_system_value == 2:
            self.Figure_cycles = Figure_cycles_Window_d7Li()
            self.Figure_cycles.show()
        elif Isotopic_system_value == 3:
            self.Figure_cycles = Figure_cycles_Window_d11B()
            self.Figure_cycles.show()
        elif Isotopic_system_value == 4:
            self.Figure_cycles = Figure_cycles_Window_d13C()
            self.Figure_cycles.show()
        elif Isotopic_system_value == 5 or Isotopic_system_value ==6:
            self.Figure_cycles = Figure_cycles_Window_d18O()
            self.Figure_cycles.show()
        elif Isotopic_system_value == 7:
            self.Figure_cycles = Figure_cycles_Window_d37Cl()
            self.Figure_cycles.show()
        elif Isotopic_system_value == 11:
            self.Figure_cycles = Figure_cycles_Window_D17O()
            self.Figure_cycles.show()


class Figure_cycles_Window_Al_Mg(QWidget, Figure_cycles_Layout_Al_Mg.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_cycles_Fig)
        self.comboBox_selection.activated.connect(self.Cycles_selection)

        self.dpi = 100
        self.figCycles = plt.Figure((10.7, 6.8), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figCycles)
        self.FigCanvas.setParent(self.Frame_FigCycles)

        global axes
        axes = self.figCycles.add_subplot(111)
        axes.clear()
        for i in range (len(Analyses_to_show)):
            axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_27Al_24Mg'], label=Cycles_show[i]['Comment'][0])
            axes.set_xlabel('Cycles')
            axes.legend(loc='upper center')

    def Cycles_selection(self, selection_cycles):
        if self.comboBox_selection.itemText(selection_cycles) == '27Al / 24Mg':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_27Al_24Mg'], label=Cycles_show[i]['Comment'][0])
                axes.set_xlabel('Cycles')
                axes.legend(loc='upper center')
            self.FigCanvas.draw() 
        elif self.comboBox_selection.itemText(selection_cycles) == 'D26Mg':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['D26Mg'], label=Cycles_show[i]['Comment'][0])
                axes.set_xlabel('Cycles')
                axes.legend(loc='upper center')
            self.FigCanvas.draw()
        elif self.comboBox_selection.itemText(selection_cycles) == '24Mg (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['24Mg'], label=Cycles_show[i]['Comment'][0])
                axes.set_xlabel('Cycles')
                axes.legend(loc='upper center')
            self.FigCanvas.draw()
        elif self.comboBox_selection.itemText(selection_cycles) == '25Mg (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['25Mg'], label=Cycles_show[i]['Comment'][0])
                axes.set_xlabel('Cycles')
                axes.legend(loc='upper center')
            self.FigCanvas.draw()
        elif self.comboBox_selection.itemText(selection_cycles) == '26Mg (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['26Mg'], label=Cycles_show[i]['Comment'][0])
                axes.set_xlabel('Cycles')
                axes.legend(loc='upper center')
            self.FigCanvas.draw()
        elif self.comboBox_selection.itemText(selection_cycles) == '27Al (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['27Al'], label=Cycles_show[i]['Comment'][0])
                axes.set_xlabel('Cycles')
                axes.legend(loc='upper center')
            self.FigCanvas.draw()

    def save_cycles_Fig(self):
        name_Fig_cycles = QFileDialog.getSaveFileName(self, 'Save Figure')
        name_save_Fig_cycles = name_Fig_cycles[0] + '.eps'
        self.figCycles.savefig(name_save_Fig_cycles, dpi=300, format=None)


class Figure_cycles_Window_dD(QWidget, Figure_cycles_Layout_dD.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_cycles_Fig)
        self.comboBox_selection.activated.connect(self.Cycles_selection)

        self.dpi = 100
        self.figCycles = plt.Figure((10.7, 6.8), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figCycles)
        self.FigCanvas.setParent(self.Frame_FigCycles)

        global axes
        axes = self.figCycles.add_subplot(111)
        axes.clear()
        if Name_cell == 0:
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_2H_1H'], label=Cycles_show[i]['Filename'][0])
                axes.set_xlabel('Cycles')
                axes.set_ylabel('D/H')
                axes.legend(loc='upper center')
        elif Name_cell == 1:
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_2H_1H'], label=Cycles_show[i]['Comment'][0])
                axes.set_xlabel('Cycles')
                axes.set_ylabel('D/H')
                axes.legend(loc='upper center')

    def Cycles_selection(self, selection_cycles):
        if self.comboBox_selection.itemText(selection_cycles) == 'D/H':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_2H_1H'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel('D/H')
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_2H_1H'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel('D/H')
                    axes.legend(loc='upper center')
            self.FigCanvas.draw() 
        elif self.comboBox_selection.itemText(selection_cycles) == 'H (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['1H'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel('H (cps)')
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['1H'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel('H (cps)')
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()
        elif self.comboBox_selection.itemText(selection_cycles) == 'D (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['2H'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel('D (cps)')
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['2H'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel('D (cps)')
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()


class Figure_cycles_Window_d7Li(QWidget, Figure_cycles_Layout_d7Li.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_cycles_Fig)
        self.comboBox_selection.activated.connect(self.Cycles_selection)

        self.dpi = 100
        self.figCycles = plt.Figure((10.7, 6.8), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figCycles)
        self.FigCanvas.setParent(self.Frame_FigCycles)

        global axes
        axes = self.figCycles.add_subplot(111)
        axes.clear()
        if Name_cell == 0:
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_7Li_6Li'], label=Cycles_show[i]['Filename'][0])
                axes.set_xlabel('Cycles')
                axes.set_ylabel(r"$^{7}Li/^{6}Li$")
                axes.legend(loc='upper center')
        elif Name_cell == 1:
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_7Li_6Li'], label=Cycles_show[i]['Comment'][0])
                axes.set_xlabel('Cycles')
                axes.set_ylabel(r"$^{7}Li/^{6}Li$")
                axes.legend(loc='upper center')

    def Cycles_selection(self, selection_cycles):
        if self.comboBox_selection.itemText(selection_cycles) == '7Li/6Li':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_7Li_6Li'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{7}Li/^{6}Li$")
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_7Li_6Li'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{7}Li/^{6}Li$")
                    axes.legend(loc='upper center')
            self.FigCanvas.draw() 
        elif self.comboBox_selection.itemText(selection_cycles) == '6Li (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['6Li'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{6}Li$"' (cps)')
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['6Li'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{6}Li$"' (cps)')
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()
        elif self.comboBox_selection.itemText(selection_cycles) == '7Li (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['7Li'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{7}Li$"' (cps)')
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['7Li'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{7}Li$"' (cps)')
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()

    def save_cycles_Fig(self):
        name_Fig_cycles = QFileDialog.getSaveFileName(self, 'Save Figure')
        name_save_Fig_cycles = name_Fig_cycles[0] + '.eps'
        self.figCycles.savefig(name_save_Fig_cycles, dpi=300, format=None)


class Figure_cycles_Window_d11B(QWidget, Figure_cycles_Layout_d11B.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_cycles_Fig)
        self.comboBox_selection.activated.connect(self.Cycles_selection)

        self.dpi = 100
        self.figCycles = plt.Figure((10.7, 6.8), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figCycles)
        self.FigCanvas.setParent(self.Frame_FigCycles)

        global axes
        axes = self.figCycles.add_subplot(111)
        axes.clear()
        if Name_cell == 0:
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_11B_10B'], label=Cycles_show[i]['Filename'][0])
                axes.set_xlabel('Cycles')
                axes.set_ylabel(r"$^{11}B/^{10}B$")
                axes.legend(loc='upper center')
        elif Name_cell == 1:
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_11B_10B'], label=Cycles_show[i]['Comment'][0])
                axes.set_xlabel('Cycles')
                axes.set_ylabel(r"$^{11}B/^{10}B$")
                axes.legend(loc='upper center')

    def Cycles_selection(self, selection_cycles):
        if self.comboBox_selection.itemText(selection_cycles) == '11B/10B':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_7Li_6Li'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{11}B/^{10}B$")
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_7Li_6Li'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{11}B/^{10}B$")
                    axes.legend(loc='upper center')
            self.FigCanvas.draw() 
        elif self.comboBox_selection.itemText(selection_cycles) == '10B (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['10B'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{10}B$"' (cps)')
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['10B'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{10}B$"' (cps)')
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()
        elif self.comboBox_selection.itemText(selection_cycles) == '11B (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['11B'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{11}B$"' (cps)')
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['11B'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{11}B$"' (cps)')
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()

    def save_cycles_Fig(self):
        name_Fig_cycles = QFileDialog.getSaveFileName(self, 'Save Figure')
        name_save_Fig_cycles = name_Fig_cycles[0] + '.eps'
        self.figCycles.savefig(name_save_Fig_cycles, dpi=300, format=None)


class Figure_cycles_Window_d13C(QWidget, Figure_cycles_Layout_d13C.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_cycles_Fig)
        self.comboBox_selection.activated.connect(self.Cycles_selection)

        self.dpi = 100
        self.figCycles = plt.Figure((10.7, 6.8), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figCycles)
        self.FigCanvas.setParent(self.Frame_FigCycles)

        global axes
        axes = self.figCycles.add_subplot(111)
        axes.clear()
        if Name_cell == 0:
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_13C_12C'], label=Cycles_show[i]['Filename'][0])
                axes.set_xlabel('Cycles')
                axes.set_ylabel(r"$^{13}C/^{12}C$")
                axes.legend(loc='upper center')
        elif Name_cell == 1:
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_13C_12C'], label=Cycles_show[i]['Comment'][0])
                axes.set_xlabel('Cycles')
                axes.set_ylabel(r"$^{13}C/^{12}C$")
                axes.legend(loc='upper center')

    def Cycles_selection(self, selection_cycles):
        if self.comboBox_selection.itemText(selection_cycles) == '13C/12C':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_13C_12C'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{13}C/^{12}C$")
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_13C_12C'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{13}C/^{12}C$")
                    axes.legend(loc='upper center')
            self.FigCanvas.draw() 
        elif self.comboBox_selection.itemText(selection_cycles) == '12C (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['12C'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{12}C$"' (cps)')
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['12C'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{12}C$"' (cps)')
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()
        elif self.comboBox_selection.itemText(selection_cycles) == '13C (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['13C'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{13}C$"' (cps)')
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['13C'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{13}C$"' (cps)')
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()

    def save_cycles_Fig(self):
        name_Fig_cycles = QFileDialog.getSaveFileName(self, 'Save Figure')
        name_save_Fig_cycles = name_Fig_cycles[0] + '.eps'
        self.figCycles.savefig(name_save_Fig_cycles, dpi=300, format=None)


class Figure_cycles_Window_d18O(QWidget, Figure_cycles_Layout_d18O.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_cycles_Fig)
        self.comboBox_selection.activated.connect(self.Cycles_selection)

        self.dpi = 100
        self.figCycles = plt.Figure((10.7, 6.8), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figCycles)
        self.FigCanvas.setParent(self.Frame_FigCycles)

        global axes
        axes = self.figCycles.add_subplot(111)
        axes.clear()
        if Name_cell == 0:
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_18O_16O'], label=Cycles_show[i]['Filename'][0])
                axes.set_xlabel('Cycles')
                axes.set_ylabel(r"$^{18}O/^{16}O$")
                axes.legend(loc='upper center')
        elif Name_cell == 1:
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_18O_16O'], label=Cycles_show[i]['Comment'][0])
                axes.set_xlabel('Cycles')
                axes.set_ylabel(r"$^{18}O/^{16}O$")
                axes.legend(loc='upper center')

    def Cycles_selection(self, selection_cycles):
        if self.comboBox_selection.itemText(selection_cycles) == '18O/16O':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_18O_16O'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{18}O/^{16}O$")
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_18O_16O'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{18}O/^{16}O$")
                    axes.legend(loc='upper center')
            self.FigCanvas.draw() 
        elif self.comboBox_selection.itemText(selection_cycles) == '16O (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['16O'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{16}O$"' (cps)')
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['16O'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{16}O$"' (cps)')
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()
        elif self.comboBox_selection.itemText(selection_cycles) == '18O (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['18O'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{18}O$"' (cps)')
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['18O'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{18}O$"' (cps)')
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()

    def save_cycles_Fig(self):
        name_Fig_cycles = QFileDialog.getSaveFileName(self, 'Save Figure')
        name_save_Fig_cycles = name_Fig_cycles[0] + '.eps'
        self.figCycles.savefig(name_save_Fig_cycles, dpi=300, format=None)


class Figure_cycles_Window_d37Cl(QWidget, Figure_cycles_Layout_d37Cl.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_cycles_Fig)
        self.comboBox_selection.activated.connect(self.Cycles_selection)

        self.dpi = 100
        self.figCycles = plt.Figure((10.7, 6.8), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figCycles)
        self.FigCanvas.setParent(self.Frame_FigCycles)

        global axes
        axes = self.figCycles.add_subplot(111)
        axes.clear()
        if Name_cell == 0:
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_37Cl_35Cl'], label=Cycles_show[i]['Filename'][0])
                axes.set_xlabel('Cycles')
                axes.set_ylabel(r"$^{37}Cl/^{35}Cl$")
                axes.legend(loc='upper center')
        elif Name_cell == 1:
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_37Cl_35Cl'], label=Cycles_show[i]['Comment'][0])
                axes.set_xlabel('Cycles')
                axes.set_ylabel(r"$^{37}Cl/^{35}Cl$")
                axes.legend(loc='upper center')

    def Cycles_selection(self, selection_cycles):
        if self.comboBox_selection.itemText(selection_cycles) == '37Cl/35Cl':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_37Cl_35Cl'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{37}Cl/^{35}Cl$")
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_37Cl_35Cl'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{37}Cl/^{35}Cl$")
                    axes.legend(loc='upper center')
            self.FigCanvas.draw() 
        elif self.comboBox_selection.itemText(selection_cycles) == '35Cl (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['35Cl'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{35}Cl$"' (cps)')
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['35Cl'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{35}Cl$"' (cps)')
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()
        elif self.comboBox_selection.itemText(selection_cycles) == '37Cl (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['37Cl'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{37}Cl$"' (cps)')
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['37Cl'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{37}Cl$"' (cps)')
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()

    def save_cycles_Fig(self):
        name_Fig_cycles = QFileDialog.getSaveFileName(self, 'Save Figure')
        name_save_Fig_cycles = name_Fig_cycles[0] + '.eps'
        self.figCycles.savefig(name_save_Fig_cycles, dpi=300, format=None)


class Figure_cycles_Window_D17O(QWidget, Figure_cycles_Layout_D17O.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_cycles_Fig)
        self.comboBox_selection.activated.connect(self.Cycles_selection)

        self.dpi = 100
        self.figCycles = plt.Figure((10.7, 6.8), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figCycles)
        self.FigCanvas.setParent(self.Frame_FigCycles)

        global axes
        axes = self.figCycles.add_subplot(111)
        axes.clear()
        if Name_cell == 0:
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_18O_16O'], label=Cycles_show[i]['Filename'][0])
                axes.set_xlabel('Cycles')
                axes.set_ylabel(r"$^{18}O/^{16}O$")
                axes.legend(loc='upper center')
        elif Name_cell == 1:
            for i in range (len(Analyses_to_show)):
                axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_18O_16O'], label=Cycles_show[i]['Comment'][0])
                axes.set_xlabel('Cycles')
                axes.set_ylabel(r"$^{18}O/^{16}O$")
                axes.legend(loc='upper center')

    def Cycles_selection(self, selection_cycles):
        if self.comboBox_selection.itemText(selection_cycles) == '18O/16O':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_18O_16O'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{18}O/^{16}O$")
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_18O_16O'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{18}O/^{16}O$")
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()
        elif self.comboBox_selection.itemText(selection_cycles) == '17O/16O':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_17O_16O'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{17}O/^{16}O$")
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['Ratio_17O_16O'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{17}O/^{16}O$")
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()  
        elif self.comboBox_selection.itemText(selection_cycles) == '16O (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['16O'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{16}O$"' (cps)')
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['16O'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{16}O$"' (cps)')
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()
        elif self.comboBox_selection.itemText(selection_cycles) == '17O (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['17O'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{17}O$"' (cps)')
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['17O'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{17}O$"' (cps)')
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()
        elif self.comboBox_selection.itemText(selection_cycles) == '18O (cps)':
            axes = self.figCycles.add_subplot(111)
            axes.clear()
            if Name_cell == 0:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['18O'], label=Cycles_show[i]['Filename'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{18}O$"' (cps)')
                    axes.legend(loc='upper center')
            elif Name_cell == 1:
                for i in range (len(Analyses_to_show)):
                    axes.scatter(Cycles_show[i]['cycles'],Cycles_show[i]['18O'], label=Cycles_show[i]['Comment'][0])
                    axes.set_xlabel('Cycles')
                    axes.set_ylabel(r"$^{18}O$"' (cps)')
                    axes.legend(loc='upper center')
            self.FigCanvas.draw()

    def save_cycles_Fig(self):
        name_Fig_cycles = QFileDialog.getSaveFileName(self, 'Save Figure')
        name_save_Fig_cycles = name_Fig_cycles[0] + '.eps'
        self.figCycles.savefig(name_save_Fig_cycles, dpi=300, format=None)


class PopUp_Ref_iso_Layout(QDialog, PopUp_Ref_iso_Layout.Ui_Dialog_Ref_iso):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)

        self.lineEdit_Ref_iso.editingFinished.connect(self.Press_ref_iso)
        self.lineEdit_sigma_iso.editingFinished.connect(self.Press_sigma_iso)
        
    def Press_ref_iso(self):
        global Ref_std_iso_value
        try:
            Ref_std_iso_value_str = self.lineEdit_Ref_iso.text()
            Ref_std_iso_value = float(Ref_std_iso_value_str)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Some information is missing")
            msg.setWindowTitle("Input reference data error")
        else:
            Ref_std_iso_value_str = self.lineEdit_Ref_iso.text()
            Ref_std_iso_value = float(Ref_std_iso_value_str)
    def Press_sigma_iso(self):
        global Ref_sigma_iso_value
        try:
            Ref_sigma_iso_value_str =self.lineEdit_sigma_iso.text()
            Ref_sigma_iso_value = float(Ref_sigma_iso_value_str)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Some information is missing")
            msg.setWindowTitle("Input reference data error")
        else:
            Ref_std_iso_value_str = self.lineEdit_Ref_iso.text()
            Ref_std_iso_value = float(Ref_std_iso_value_str)

class PopUp_Ref_conc_1ratio_Layout(QDialog, PopUp_Ref_conc_1ratio_Layout.Ui_Dialog_Ref_1ratio_conc):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)

        global Ref_std_conc1_value
        global Ref_sigma_conc1_value
        self.lineEdit_Ref_conc1.editingFinished.connect(self.Press_ref_conc1)
        self.lineEdit_sigma_conc1.editingFinished.connect(self.Press_sigma_conc1)
        
    def Press_ref_conc1(self):
        try:
            Ref_std_conc1_value_str = self.lineEdit_Ref_conc1.text()
            Ref_std_conc1_value = float(Ref_std_conc1_value_str)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Some information is missing")
            msg.setWindowTitle("Input reference data error")
        else:
            Ref_std_conc1_value_str = self.lineEdit_Ref_conc1.text()
            Ref_std_conc1_value = float(Ref_std_conc1_value_str)

    def Press_sigma_conc1(self):
        try:
            Ref_sigma_conc1_value_str =self.lineEdit_sigma_conc1.text()
            Ref_sigma_conc1_value = float(Ref_sigma_conc1_value_str)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Some information is missing")
            msg.setWindowTitle("Input reference data error")
        else:
            Ref_sigma_conc1_value_str =self.lineEdit_sigma_conc1.text()
            Ref_sigma_conc1_value = float(Ref_sigma_conc1_value_str)
        
class PopUp_Ref_conc_2ratios_Layout(QDialog, PopUp_Ref_conc_2ratios_Layout.Ui_Dialog_Ref_conc_2ratios):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)

        global Ref_std_conc2_value
        global Ref_sigma_conc2_value
        self.lineEdit_ref_conc1.editingFinished.connect(self.Press_ref_conc1)
        self.lineEdit_sigma_conc1.editingFinished.connect(self.Press_sigma_conc1)
        self.lineEdit_ref_conc2.editingFinished.connect(self.Press_ref_conc2)
        self.lineEdit_sigma_conc2.editingFinished.connect(self.Press_sigma_conc2)
        
    def Press_ref_conc1(self):
        try:
            Ref_std_conc1_value_str = self.lineEdit_ref_conc1.text()
            Ref_std_conc1_value = float(Ref_std_conc1_value_str)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Some information is missing")
            msg.setWindowTitle("Input reference data error")
        else:
            Ref_std_conc1_value_str = self.lineEdit_ref_conc1.text()
            Ref_std_conc1_value = float(Ref_std_conc1_value_str)

    def Press_sigma_conc1(self):
        try:
            Ref_sigma_conc1_value_str =self.lineEdit_sigma_conc1.text()
            Ref_sigma_conc1_value = float(Ref_sigma_conc1_value_str)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Some information is missing")
            msg.setWindowTitle("Input reference data error")
        else:
            Ref_sigma_conc1_value_str =self.lineEdit_sigma_conc1.text()
            Ref_sigma_conc1_value = float(Ref_sigma_conc1_value_str)
            
    def Press_ref_conc2(self):
        try:
            Ref_std_conc2_value_str = self.lineEdit_ref_conc2.text()
            Ref_std_conc2_value = float(Ref_std_conc2_value_str)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Some information is missing")
            msg.setWindowTitle("Input reference data error")
        else:
            Ref_std_conc2_value_str = self.lineEdit_ref_conc2.text()
            Ref_std_conc2_value = float(Ref_std_conc2_value_str)

    def Press_sigma_conc2(self):
        try:
            Ref_sigma_conc2_value_str =self.lineEdit_sigma_conc2.text()
            Ref_sigma_conc2_value = float(Ref_sigma_conc2_value_str)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Some information is missing")
            msg.setWindowTitle("Input reference data error")
        else:
            Ref_sigma_conc2_value_str =self.lineEdit_sigma_conc2.text()
            Ref_sigma_conc2_value = float(Ref_sigma_conc2_value_str)

class PopUp_Ref_conc_3ratios_Layout(QDialog, PopUp_Ref_conc_3ratios_Layout.Ui_Dialog_Ref_conc_3ratios):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)

        global Ref_std_conc3_value
        global Ref_sigma_conc3_value
        self.lineEdit_ref_conc1.editingFinished.connect(self.Press_ref_conc1)
        self.lineEdit_sigma_conc1.editingFinished.connect(self.Press_sigma_conc1)
        self.lineEdit_ref_conc2.editingFinished.connect(self.Press_ref_conc2)
        self.lineEdit_sigma_conc2.editingFinished.connect(self.Press_sigma_conc2)
        self.lineEdit_ref_conc3.editingFinished.connect(self.Press_ref_conc3)
        self.lineEdit_sigma_conc3.editingFinished.connect(self.Press_sigma_conc3)
        
    def Press_ref_conc1(self):
        try:
            Ref_std_conc1_value_str = self.lineEdit_ref_conc1.text()
            Ref_std_conc1_value = float(Ref_std_conc1_value_str)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Some information is missing")
            msg.setWindowTitle("Input reference data error")
        else:
            Ref_std_conc1_value_str = self.lineEdit_ref_conc1.text()
            Ref_std_conc1_value = float(Ref_std_conc1_value_str)

    def Press_sigma_conc1(self):
        try:
            Ref_sigma_conc1_value_str =self.lineEdit_sigma_conc1.text()
            Ref_sigma_conc1_value = float(Ref_sigma_conc1_value_str)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Some information is missing")
            msg.setWindowTitle("Input reference data error")
        else:
            Ref_sigma_conc1_value_str =self.lineEdit_sigma_conc1.text()
            Ref_sigma_conc1_value = float(Ref_sigma_conc1_value_str)
            
    def Press_ref_conc2(self):
        try:
            Ref_std_conc2_value_str = self.lineEdit_ref_conc2.text()
            Ref_std_conc2_value = float(Ref_std_conc2_value_str)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Some information is missing")
            msg.setWindowTitle("Input reference data error")
        else:
            Ref_std_conc2_value_str = self.lineEdit_ref_conc2.text()
            Ref_std_conc2_value = float(Ref_std_conc2_value_str)

    def Press_sigma_conc2(self):
        try:
            Ref_sigma_conc2_value_str =self.lineEdit_sigma_conc2.text()
            Ref_sigma_conc2_value = float(Ref_sigma_conc2_value_str)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Some information is missing")
            msg.setWindowTitle("Input reference data error")
        else:
            Ref_sigma_conc2_value_str =self.lineEdit_sigma_conc2.text()
            Ref_sigma_conc2_value = float(Ref_sigma_conc2_value_str)
            
    def Press_ref_conc3(self):
        try:
            Ref_std_conc3_value_str = self.lineEdit_ref_conc3.text()
            Ref_std_conc3_value = float(Ref_std_conc3_value_str)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Some information is missing")
            msg.setWindowTitle("Input reference data error")
        else:
            Ref_std_conc3_value_str = self.lineEdit_ref_conc3.text()
            Ref_std_conc3_value = float(Ref_std_conc3_value_str)

    def Press_sigma_conc3(self):
        try:
            Ref_sigma_conc3_value_str =self.lineEdit_sigma_conc3.text()
            Ref_sigma_conc3_value = float(Ref_sigma_conc3_value_str)
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("Some information is missing")
            msg.setWindowTitle("Input reference data error")
        else:
            Ref_sigma_conc3_value_str =self.lineEdit_sigma_conc3.text()
            Ref_sigma_conc3_value = float(Ref_sigma_conc3_value_str)
        
class PopUp_Ref_conc_4ratios_Layout(QDialog, PopUp_Ref_conc_4ratios_Layout.Ui_Dialog_Ref_conc_4ratios):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)

        global Ref_std_conc4_value
        global Ref_sigma_conc4_value
        self.lineEdit_ref_conc1.editingFinished.connect(self.Press_ref_conc1)
        self.lineEdit_sigma_conc1.editingFinished.connect(self.Press_sigma_conc1)
        self.lineEdit_ref_conc2.editingFinished.connect(self.Press_ref_conc2)
        self.lineEdit_sigma_conc2.editingFinished.connect(self.Press_sigma_conc2)
        self.lineEdit_ref_conc3.editingFinished.connect(self.Press_ref_conc3)
        self.lineEdit_sigma_conc3.editingFinished.connect(self.Press_sigma_conc3)
        self.lineEdit_ref_conc4.editingFinished.connect(self.Press_ref_conc4)
        self.lineEdit_sigma_conc4.editingFinished.connect(self.Press_sigma_conc4)
        
    def Press_ref_conc1(self):
        Ref_std_conc1_value_str = self.lineEdit_ref_conc1.text()
        Ref_std_conc1_value = float(Ref_std_conc1_value_str)

    def Press_sigma_conc1(self):
        Ref_sigma_conc1_value_str =self.lineEdit_sigma_conc1.text()
        Ref_sigma_conc1_value = float(Ref_sigma_conc1_value_str)
            
    def Press_ref_conc2(self):
        Ref_std_conc2_value_str = self.lineEdit_ref_conc2.text()
        Ref_std_conc2_value = float(Ref_std_conc2_value_str)

    def Press_sigma_conc2(self):
        Ref_sigma_conc2_value_str =self.lineEdit_sigma_conc2.text()
        Ref_sigma_conc2_value = float(Ref_sigma_conc2_value_str)
            
    def Press_ref_conc3(self):
        Ref_std_conc3_value_str = self.lineEdit_ref_conc3.text()
        Ref_std_conc3_value = float(Ref_std_conc3_value_str)

    def Press_sigma_conc3(self):
        Ref_sigma_conc3_value_str =self.lineEdit_sigma_conc3.text()
        Ref_sigma_conc3_value = float(Ref_sigma_conc3_value_str)

    def Press_ref_conc4(self):
        Ref_std_conc4_value_str = self.lineEdit_ref_conc4.text()
        Ref_std_conc4_value = float(Ref_std_conc4_value_str)

    def Press_sigma_conc4(self):
        Ref_sigma_conc4_value_str =self.lineEdit_sigma_conc4.text()
        Ref_sigma_conc4_value = float(Ref_sigma_conc4_value_str)

class Figure_standards_Window_iso(QWidget, Figure_data_Layout.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_standards_Fig)

        self.dpi = 100
        self.figStd = plt.Figure((10.7, 6.8), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figStd)
        self.FigCanvas.setParent(self.Frame_FigData)
        axes = self.figStd.add_subplot(111)
        if Analyses_type_value == 1 and nb_std_iso_value == 1 and drift_order_iso_value == 0:
            axes.errorbar(Time_std,delta_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            mean_delta_std = x * 0 + m_delta_std
            axes.plot(x, mean_delta_std, 'k--', linewidth=1)
            axes.set_xlabel('Time(h)')
            if Isotopic_system_value == 1:
                axes.set_ylabel(r"$\delta D_{RAW}  (permil)$")
            elif Isotopic_system_value == 2:
                axes.set_ylabel(r"$\delta^{7}Li_{RAW}  (permil)$")
            elif Isotopic_system_value == 3:
                axes.set_ylabel(r"$\delta^{11}B_{RAW}  (permil)$")
            elif Isotopic_system_value == 4:
                axes.set_ylabel(r"$\delta^{13}C_{RAW}  (permil)$")
            elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                axes.set_ylabel(r"$\delta^{18}O_{RAW}  (permil)$")
            elif Isotopic_system_value == 7:
                axes.set_ylabel(r"$\delta^{37}Cl_{RAW}  (permil)$")
            elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                axes.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
        elif Analyses_type_value == 1 and nb_std_iso_value == 1 and drift_order_iso_value >= 1:
            axes.errorbar(Time_std,delta_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            axes.plot(x, fit_std, 'k--', linewidth=1)
            axes.plot(Time_std, interval_u, 'k-.', linewidth=1)
            axes.plot(Time_std, interval_l, 'k-.', linewidth=1)
            axes.set_xlabel('Time(h)')
            if Isotopic_system_value == 1:
                axes.set_ylabel(r"$\delta D_{RAW}  (permil)$")
            elif Isotopic_system_value == 2:
                axes.set_ylabel(r"$\delta^{7}Li_{RAW}  (permil)$")
            elif Isotopic_system_value == 3:
                axes.set_ylabel(r"$\delta^{11}B_{RAW}  (permil)$")
            elif Isotopic_system_value == 4:
                axes.set_ylabel(r"$\delta^{13}C_{RAW}  (permil)$")
            elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                axes.set_ylabel(r"$\delta^{18}O_{RAW}  (permil)$")
            elif Isotopic_system_value == 7:
                axes.set_ylabel(r"$\delta^{37}Cl_{RAW}  (permil)$")
            elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                axes.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and drift_order_iso_value == 0:
            axes.errorbar(Time_std1,delta_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,delta_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            mean_delta_std1 = x * 0 + m_delta_std1
            mean_delta_std2 = x * 0 + m_delta_std2
            axes.plot(x, mean_delta_std1, 'k--', linewidth=1)
            axes.plot(x, mean_delta_std2, 'k:', linewidth=1)
            axes.set_xlabel('Time(h)')
            if Isotopic_system_value == 1:
                axes.set_ylabel(r"$\delta D_{RAW}  (permil)$")
            elif Isotopic_system_value == 2:
                axes.set_ylabel(r"$\delta^{7}Li_{RAW}  (permil)$")
            elif Isotopic_system_value == 3:
                axes.set_ylabel(r"$\delta^{11}B_{RAW}  (permil)$")
            elif Isotopic_system_value == 4:
                axes.set_ylabel(r"$\delta^{13}C_{RAW}  (permil)$")
            elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                axes.set_ylabel(r"$\delta^{18}O_{RAW}  (permil)$")
            elif Isotopic_system_value == 7:
                axes.set_ylabel(r"$\delta^{37}Cl_{RAW}  (permil)$")
            elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                axes.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and drift_order_iso_value >= 1:
            axes.errorbar(Time_std1,delta__std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,delta_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            axes.plot(x, fit_std1, 'k--', linewidth=1)
            axes.plot(x, fit_std2, 'k:', linewidth=1)
            axes.set_xlabel('Time(h)')
            if Isotopic_system_value == 1:
                axes.set_ylabel(r"$\delta D_{RAW}  (permil)$")
            elif Isotopic_system_value == 2:
                axes.set_ylabel(r"$\delta^{7}Li_{RAW}  (permil)$")
            elif Isotopic_system_value == 3:
                axes.set_ylabel(r"$\delta^{11}B_{RAW}  (permil)$")
            elif Isotopic_system_value == 4:
                axes.set_ylabel(r"$\delta^{13}C_{RAW}  (permil)$")
            elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                axes.set_ylabel(r"$\delta^{18}O_{RAW}  (permil)$")
            elif Isotopic_system_value == 7:
                axes.set_ylabel(r"$\delta^{37}Cl_{RAW}  (permil)$")
            elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                axes.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and drift_order_iso_value == 0:
            axes.errorbar(Time_std1,delta_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,delta_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std3,delta_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            mean_delta_std1 = x * 0 + m_delta_std1
            mean_delta_std2 = x * 0 + m_delta_std2
            mean_delta_std3 = x * 0 + m_delta_std3
            axes.plot(x, mean_delta_std1, 'k--', linewidth=1)
            axes.plot(x, mean_delta_std2, 'k:', linewidth=1)
            axes.plot(x, mean_delta_std3, 'k.-', linewidth=1)
            axes.set_xlabel('Time(h)')
            if Isotopic_system_value == 1:
                axes.set_ylabel(r"$\delta D_{RAW}  (permil)$")
            elif Isotopic_system_value == 2:
                axes.set_ylabel(r"$\delta^{7}Li_{RAW}  (permil)$")
            elif Isotopic_system_value == 3:
                axes.set_ylabel(r"$\delta^{11}B_{RAW}  (permil)$")
            elif Isotopic_system_value == 4:
                axes.set_ylabel(r"$\delta^{13}C_{RAW}  (permil)$")
            elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                axes.set_ylabel(r"$\delta^{18}O_{RAW}  (permil)$")
            elif Isotopic_system_value == 7:
                axes.set_ylabel(r"$\delta^{37}Cl_{RAW}  (permil)$")
            elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                axes.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and drift_order_iso_value >= 1:
            axes.errorbar(Time_std1,delta_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,delta_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std3,delta_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            axes.plot(x, fit_std1, 'k--', linewidth=1)
            axes.plot(x, fit_std2, 'k:', linewidth=1)
            axes.plot(x, fit_std3, 'k.-', linewidth=1)
            axes.set_xlabel('Time(h)')
            if Isotopic_system_value == 1:
                axes.set_ylabel(r"$\delta D_{RAW}  (permil)$")
            elif Isotopic_system_value == 2:
                axes.set_ylabel(r"$\delta^{7}Li_{RAW}  (permil)$")
            elif Isotopic_system_value == 3:
                axes.set_ylabel(r"$\delta^{11}B_{RAW}  (permil)$")
            elif Isotopic_system_value == 4:
                axes.set_ylabel(r"$\delta^{13}C_{RAW}  (permil)$")
            elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                axes.set_ylabel(r"$\delta^{18}O_{RAW}  (permil)$")
            elif Isotopic_system_value == 7:
                axes.set_ylabel(r"$\delta^{37}Cl_{RAW}  (permil)$")
            elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                axes.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and drift_order_conc_value == 0:
            axes.errorbar(Time_std,R0_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            mean_R0_std1 = x * 0 + m_R0_std1
            axes.plot(x, mean_R0_std, 'k--', linewidth=1)
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('R0')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1  and nb_std_conc_value == 1 and drift_order_conc_value >= 1:
            axes.errorbar(Time_std,R0_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            axes.plot(x, fit_R0_std, 'k--', linewidth=1)
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('R0')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1  and nb_std_conc_value == 2 and drift_order_conc_value == 0:
            axes.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            mean_R0_std1 = x * 0 + m_R0_std1
            mean_R0_std2 = x * 0 + m_R0_std2
            axes.plot(x, mean_R0_std1, 'k--', linewidth=1)
            axes.plot(x, mean_R0_std2, 'k:', linewidth=1)
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('R0')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1  and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
            axes.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            axes.plot(x, fit_R0_std1, 'k--', linewidth=1)
            axes.plot(x, fit_R0_std2, 'k:', linewidth=1)
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('R0')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1  and nb_std_conc_value == 3 and drift_order_conc_value == 0:
            axes.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std3,R0_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            mean_R0_std1 = x * 0 + m_R0_std1
            mean_R0_std2 = x * 0 + m_R0_std2
            mean_R0_std3 = x * 0 + m_R0_std3
            axes.plot(x, mean_R0_std1, 'k--', linewidth=1)
            axes.plot(x, mean_R0_std2, 'k:', linewidth=1)
            axes.plot(x, mean_R0_std3, 'k.-', linewidth=1)
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('R0')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1  and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
            axes.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std3,R0_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            axes.plot(x, fit_R0_std1, 'k--', linewidth=1)
            axes.plot(x, fit_R0_std2, 'k:', linewidth=1)
            axes.plot(x, fit_R0_std3, 'k.-', linewidth=1)
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('R0')
        # axes.set_xlim(top=float(self.xlim_min.text()),bottom=float(self.xlim_max.text()))
        # axes.set_ylim(top=float(self.ylim_min.text()),bottom=float(self.ylim_max.text()))
        self.FigCanvas.show()


    def save_standards_Fig(self):
        name_Fig_Std = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_Fig_Std = name_Fig_Std[0] + '.eps'
        self.figStd.savefig(name_save_Fig_Std, dpi=300, format=None)

class Figure_standards_Window_2ratios_conc(QWidget, Figure_data_2ratios_Layout.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_standards_Fig)

        self.dpi = 100
        self.figStd = plt.Figure((10.0, 7.7), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figStd)
        self.FigCanvas.setParent(self.Frame_FigData)
        axes1 = self.figStd.add_subplot(211)
        axes2 = self.figStd.add_subplot(212, sharex=axes1)
        if Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 1 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std,R0_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            mean_R0_std1 = x * 0 + m_R0_std1
            axes1.plot(x, mean_R0_std1, 'k--', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std,R1_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R1_std1 = x * 0 + m_R1_std1
            axes2.plot(x, mean_R1_std1, 'k--', linewidth=1)
            axes2.set_xlabel('Time(h)')
            axes2.set_ylabel('R1')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2  and nb_std_conc_value == 1 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std,R0_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            axes1.plot(x, fit_R0_std, 'k--', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std,R1_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, fit_R1_std, 'k--', linewidth=1)
            axes2.set_xlabel('Time(h)')
            axes2.set_ylabel('R1')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2  and nb_std_conc_value == 2 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            mean_R0_std1 = x * 0 + m_R0_std1
            mean_R0_std2 = x * 0 + m_R0_std2
            axes1.plot(x, mean_R0_std1, 'k--', linewidth=1)
            axes1.plot(x, mean_R0_std2, 'k:', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R1_std1 = x * 0 + m_R1_std1
            mean_R1_std2 = x * 0 + m_R1_std2
            axes2.plot(x, mean_R1_std1, 'k--', linewidth=1)
            axes2.plot(x, mean_R1_std2, 'k:', linewidth=1)
            axes2.set_xlabel('Time(h)')
            axes2.set_ylabel('R1')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2  and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            axes1.plot(x, fit_R0_std1, 'k--', linewidth=1)
            axes1.plot(x, fit_R0_std2, 'k:', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, fit_R1_std1, 'k--', linewidth=1)
            axes2.plot(x, fit_R1_std2, 'k:', linewidth=1)
            axes2.set_xlabel('Time(h)')
            axes2.set_ylabel('R1')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2  and nb_std_conc_value == 3 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std3,R0_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            mean_R0_std1 = x * 0 + m_R0_std1
            mean_R0_std2 = x * 0 + m_R0_std2
            mean_R0_std3 = x * 0 + m_R0_std3
            axes1.plot(x, mean_R0_std1, 'k--', linewidth=1)
            axes1.plot(x, mean_R0_std2, 'k:', linewidth=1)
            axes1.plot(x, mean_R0_std3, 'k.-', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std3,R1_std3, yerr=error1_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R1_std1 = x * 0 + m_R1_std1
            mean_R1_std2 = x * 0 + m_R1_std2
            mean_R1_std3 = x * 0 + m_R1_std3
            axes2.plot(x, mean_R1_std1, 'k--', linewidth=1)
            axes2.plot(x, mean_R1_std2, 'k:', linewidth=1)
            axes2.plot(x, mean_R1_std3, 'k.-', linewidth=1)
            axes2.set_xlabel('Time(h)')
            axes2.set_ylabel('R1')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2  and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std3,R0_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            axes1.plot(x, fit_R0_std1, 'k--', linewidth=1)
            axes1.plot(x, fit_R0_std2, 'k:', linewidth=1)
            axes1.plot(x, fit_R0_std3, 'k.-', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std3,R1_std3, yerr=error1_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, fit_R1_std1, 'k--', linewidth=1)
            axes2.plot(x, fit_R1_std2, 'k:', linewidth=1)
            axes2.plot(x, fit_R1_std3, 'k.-', linewidth=1)
            axes2.set_xlabel('Time(h)')
            axes2.set_ylabel('R1')
        self.FigCanvas.show()

    def save_standards_Fig(self):
        name_Fig_Std = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_Fig_Std = name_Fig_Std[0] + '.eps'
        self.figStd.savefig(name_save_Fig_Std, dpi=300, format=None)

class Figure_standards_Window_3ratios_conc(QWidget, Figure_data_3ratios_Layout.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_standards_Fig)

        self.dpi = 100
        self.figStd = plt.Figure((10.0, 8.9), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figStd)
        self.FigCanvas.setParent(self.Frame_FigData)
        axes1 = self.figStd.add_subplot(311)
        axes2 = self.figStd.add_subplot(312, sharex=axes1)
        axes3 = self.figStd.add_subplot(313, sharex=axes1)
        if Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 1 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std,R0_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            mean_R0_std1 = x * 0 + m_R0_std1
            axes1.plot(x, mean_R0_std1, 'k--', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std,R1_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R1_std1 = x * 0 + m_R1_std1
            axes2.plot(x, mean_R1_std1, 'k--', linewidth=1)
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std,R2_std, yerr=error2_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R2_std1 = x * 0 + m_R2_std1
            axes3.plot(x, mean_R2_std1, 'k--', linewidth=1)
            axes3.set_xlabel('Time(h)')
            axes3.set_ylabel('R2')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3  and nb_std_conc_value == 1 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std,R0_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            axes1.plot(x, fit_R0_std, 'k--', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std,R1_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, fit_R1_std, 'k--', linewidth=1)
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std,R2_std, yerr=error2_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.plot(x, fit_R2_std, 'k--', linewidth=1)
            axes3.set_xlabel('Time(h)')
            axes3.set_ylabel('R2')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3  and nb_std_conc_value == 2 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            mean_R0_std1 = x * 0 + m_R0_std1
            mean_R0_std2 = x * 0 + m_R0_std2
            axes1.plot(x, mean_R0_std1, 'k--', linewidth=1)
            axes1.plot(x, mean_R0_std2, 'k:', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R1_std1 = x * 0 + m_R1_std1
            mean_R1_std2 = x * 0 + m_R1_std2
            axes2.plot(x, mean_R1_std1, 'k--', linewidth=1)
            axes2.plot(x, mean_R1_std2, 'k:', linewidth=1)
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std1,R2_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,R2_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R2_std1 = x * 0 + m_R2_std1
            mean_R2_std2 = x * 0 + m_R2_std2
            axes3.plot(x, mean_R2_std1, 'k--', linewidth=1)
            axes3.plot(x, mean_R2_std2, 'k:', linewidth=1)
            axes3.set_xlabel('Time(h)')
            axes3.set_ylabel('R2')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3  and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            axes1.plot(x, fit_R0_std1, 'k--', linewidth=1)
            axes1.plot(x, fit_R0_std2, 'k:', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, fit_R1_std1, 'k--', linewidth=1)
            axes2.plot(x, fit_R1_std2, 'k:', linewidth=1)
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std1,R2_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,R2_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.plot(x, fit_R2_std1, 'k--', linewidth=1)
            axes3.plot(x, fit_R2_std2, 'k:', linewidth=1)
            axes3.set_xlabel('Time(h)')
            axes3.set_ylabel('R2')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3  and nb_std_conc_value == 3 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std3,R0_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            mean_R0_std1 = x * 0 + m_R0_std1
            mean_R0_std2 = x * 0 + m_R0_std2
            mean_R0_std3 = x * 0 + m_R0_std3
            axes1.plot(x, mean_R0_std1, 'k--', linewidth=1)
            axes1.plot(x, mean_R0_std2, 'k:', linewidth=1)
            axes1.plot(x, mean_R0_std3, 'k.-', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std3,R1_std3, yerr=error1_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R1_std1 = x * 0 + m_R1_std1
            mean_R1_std2 = x * 0 + m_R1_std2
            mean_R1_std3 = x * 0 + m_R1_std3
            axes2.plot(x, mean_R1_std1, 'k--', linewidth=1)
            axes2.plot(x, mean_R1_std2, 'k:', linewidth=1)
            axes2.plot(x, mean_R1_std3, 'k.-', linewidth=1)
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std1,R2_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,R2_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std3,R2_std3, yerr=error2_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R2_std1 = x * 0 + m_R2_std1
            mean_R2_std2 = x * 0 + m_R2_std2
            mean_R2_std3 = x * 0 + m_R2_std3
            axes3.plot(x, mean_R2_std1, 'k--', linewidth=1)
            axes3.plot(x, mean_R2_std2, 'k:', linewidth=1)
            axes3.plot(x, mean_R2_std3, 'k.-', linewidth=1)
            axes3.set_xlabel('Time(h)')
            axes3.set_ylabel('R2')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3  and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std3,R0_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            axes1.plot(x, fit_R0_std1, 'k--', linewidth=1)
            axes1.plot(x, fit_R0_std2, 'k:', linewidth=1)
            axes1.plot(x, fit_R0_std3, 'k.-', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std3,R1_std3, yerr=error1_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, fit_R1_std1, 'k--', linewidth=1)
            axes2.plot(x, fit_R1_std2, 'k:', linewidth=1)
            axes2.plot(x, fit_R1_std3, 'k.-', linewidth=1)
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std1,R2_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,R2_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std3,R2_std3, yerr=error2_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.plot(x, fit_R2_std1, 'k--', linewidth=1)
            axes3.plot(x, fit_R2_std2, 'k:', linewidth=1)
            axes3.plot(x, fit_R2_std3, 'k.-', linewidth=1)
            axes3.set_xlabel('Time(h)')
            axes3.set_ylabel('R2')
        self.FigCanvas.show()

    def save_standards_Fig(self):
        name_Fig_Std = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_Fig_Std = name_Fig_Std[0] + '.eps'
        self.figStd.savefig(name_save_Fig_Std, dpi=300, format=None)

class Figure_standards_Window_4ratios_conc(QWidget, Figure_data_4ratios_Layout.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_standards_Fig)

        self.dpi = 100
        self.figStd = plt.Figure((10.0, 10.1), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figStd)
        self.FigCanvas.setParent(self.Frame_FigData)
        axes1 = self.figStd.add_subplot(411)
        axes2 = self.figStd.add_subplot(412, sharex=axes1)
        axes3 = self.figStd.add_subplot(413, sharex=axes1)
        axes4 = self.figStd.add_subplot(414, sharex=axes1)
        if Analyses_type_value == 2 and nb_ratios_conc_value == 4  and nb_std_conc_value == 1 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std,R0_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            mean_R0_std = x * 0 + m_R0_std
            axes1.plot(x, mean_R0_std, 'k--', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std,R1_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R1_std = x * 0 + m_R1_std
            axes2.plot(x, mean_R1_std, 'k--', linewidth=1)
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std,R2_std, yerr=error2_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R2_std = x * 0 + m_R2_std
            axes3.plot(x, mean_R2_std, 'k--', linewidth=1)
            axes3.set_ylabel('R2')
            axes4.errorbar(Time_std,R3_std, yerr=error3_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R3_std = x * 0 + m_R3_std
            axes4.plot(x, mean_R3_std, 'k--', linewidth=1)
            axes4.set_xlabel('Time(h)')
            axes4.set_ylabel('R3')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4  and nb_std_conc_value == 1 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std,R0_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            axes1.plot(x, fit_R0_std, 'k--', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std,R1_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, fit_R1_std, 'k--', linewidth=1)
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std,R2_std, yerr=error2_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.plot(x, fit_R2_std, 'k--', linewidth=1)
            axes3.set_ylabel('R2')
            axes4.errorbar(Time_std,R3_std, yerr=error3_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.plot(x, fit_R3_std, 'k--', linewidth=1)
            axes4.set_xlabel('Time(h)')
            axes4.set_ylabel('R3')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4  and nb_std_conc_value == 2 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            mean_R0_std1 = x * 0 + m_R0_std1
            mean_R0_std2 = x * 0 + m_R0_std2
            axes1.plot(x, mean_R0_std1, 'k--', linewidth=1)
            axes1.plot(x, mean_R0_std2, 'k:', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R1_std1 = x * 0 + m_R1_std1
            mean_R1_std2 = x * 0 + m_R1_std2
            axes2.plot(x, mean_R1_std1, 'k--', linewidth=1)
            axes2.plot(x, mean_R1_std2, 'k:', linewidth=1)
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std1,R2_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,R2_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R2_std1 = x * 0 + m_R2_std1
            mean_R2_std2 = x * 0 + m_R2_std2
            axes3.plot(x, mean_R2_std1, 'k--', linewidth=1)
            axes3.plot(x, mean_R2_std2, 'k:', linewidth=1)
            axes3.set_ylabel('R2')
            axes4.errorbar(Time_std1,R3_std1, yerr=error3_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_std2,R3_std2, yerr=error3_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R3_std1 = x * 0 + m_R3_std1
            mean_R3_std2 = x * 0 + m_R3_std2
            axes4.plot(x, mean_R3_std1, 'k--', linewidth=1)
            axes4.plot(x, mean_R3_std2, 'k:', linewidth=1)
            axes4.set_xlabel('Time(h)')
            axes4.set_ylabel('R3')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4  and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            axes1.plot(x, fit_R0_std1, 'k--', linewidth=1)
            axes1.plot(x, fit_R0_std2, 'k:', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, fit_R1_std1, 'k--', linewidth=1)
            axes2.plot(x, fit_R1_std2, 'k:', linewidth=1)
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std1,R2_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,R2_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.plot(x, fit_R2_std1, 'k--', linewidth=1)
            axes3.plot(x, fit_R2_std2, 'k:', linewidth=1)
            axes3.set_ylabel('R2')
            axes4.errorbar(Time_std1,R3_std1, yerr=error3_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_std2,R3_std2, yerr=error3_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.plot(x, fit_R3_std1, 'k--', linewidth=1)
            axes4.plot(x, fit_R3_std2, 'k:', linewidth=1)
            axes4.set_xlabel('Time(h)')
            axes4.set_ylabel('R3')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4  and nb_std_conc_value == 3 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std3,R0_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            mean_R0_std1 = x * 0 + m_R0_std1
            mean_R0_std2 = x * 0 + m_R0_std2
            mean_R0_std3 = x * 0 + m_R0_std3
            axes1.plot(x, mean_R0_std1, 'k--', linewidth=1)
            axes1.plot(x, mean_R0_std2, 'k:', linewidth=1)
            axes1.plot(x, mean_R0_std3, 'k.-', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std3,R1_std3, yerr=error1_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R1_std1 = x * 0 + m_R1_std1
            mean_R1_std2 = x * 0 + m_R1_std2
            mean_R1_std3 = x * 0 + m_R1_std3
            axes2.plot(x, mean_R1_std1, 'k--', linewidth=1)
            axes2.plot(x, mean_R1_std2, 'k:', linewidth=1)
            axes2.plot(x, mean_R1_std3, 'k.-', linewidth=1)
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std1,R2_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,R2_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std3,R2_std3, yerr=error2_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R2_std1 = x * 0 + m_R2_std1
            mean_R2_std2 = x * 0 + m_R2_std2
            mean_R2_std3 = x * 0 + m_R2_std3
            axes3.plot(x, mean_R2_std1, 'k--', linewidth=1)
            axes3.plot(x, mean_R2_std2, 'k:', linewidth=1)
            axes3.plot(x, mean_R2_std3, 'k.-', linewidth=1)
            axes3.set_ylabel('R2')
            axes4.errorbar(Time_std1,R3_std1, yerr=error3_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_std2,R3_std2, yerr=error3_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_std3,R3_std3, yerr=error3_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            mean_R3_std1 = x * 0 + m_R3_std1
            mean_R3_std2 = x * 0 + m_R3_std2
            mean_R3_std3 = x * 0 + m_R3_std3
            axes4.plot(x, mean_R3_std1, 'k--', linewidth=1)
            axes4.plot(x, mean_R3_std2, 'k:', linewidth=1)
            axes4.plot(x, mean_R3_std3, 'k.-', linewidth=1)
            axes4.set_xlabel('Time(h)')
            axes4.set_ylabel('R3')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4  and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std3,R0_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            axes1.plot(x, fit_R0_std1, 'k--', linewidth=1)
            axes1.plot(x, fit_R0_std2, 'k:', linewidth=1)
            axes1.plot(x, fit_R0_std3, 'k.-', linewidth=1)
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std3,R1_std3, yerr=error1_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, fit_R1_std1, 'k--', linewidth=1)
            axes2.plot(x, fit_R1_std2, 'k:', linewidth=1)
            axes2.plot(x, fit_R1_std3, 'k.-', linewidth=1)
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std1,R2_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,R2_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std3,R2_std3, yerr=error2_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.plot(x, fit_R2_std1, 'k--', linewidth=1)
            axes3.plot(x, fit_R2_std2, 'k:', linewidth=1)
            axes3.plot(x, fit_R2_std3, 'k.-', linewidth=1)
            axes3.set_ylabel('R2')
            axes4.errorbar(Time_std1,R3_std1, yerr=error3_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_std2,R3_std2, yerr=error3_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_std3,R3_std3, yerr=error3_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.plot(x, fit_R3_std1, 'k--', linewidth=1)
            axes4.plot(x, fit_R3_std2, 'k:', linewidth=1)
            axes4.plot(x, fit_R3_std3, 'k.-', linewidth=1)
            axes4.set_xlabel('Time(h)')
            axes4.set_ylabel('R3')
        self.FigCanvas.show()

    def save_standards_Fig(self):
        name_Fig_Std = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_Fig_Std = name_Fig_Std[0] + '.eps'
        self.figStd.savefig(name_save_Fig_Std, dpi=300, format=None)

class Figure_residuals_Window_iso(QWidget, Figure_data_Layout.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_residuals_Fig)

        self.dpi = 100
        self.figResiduals = plt.Figure((10.7, 6.8), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figResiduals)
        self.FigCanvas.setParent(self.Frame_FigData)
        axes = self.figResiduals.add_subplot(111)
        if Analyses_type_value == 1 and nb_std_iso_value == 1 and drift_order_iso_value >= 1:
            axes.errorbar(Time_std,r_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes.plot(Time_std, interval_u_fit, 'k:', linewidth=0.3)
            axes.plot(Time_std, interval_l_fit, 'k:', linewidth=0.3)
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('Residuals (permil)')
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and drift_order_iso_value >= 1:
            axes.errorbar(Time_std1,r_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,r_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('Residuals (permil)')
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and drift_order_iso_value >= 1:
            axes.errorbar(Time_std1,r_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,r_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std3,r_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('Residuals (permil)')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1  and nb_std_conc_value == 1 and drift_order_conc_value >= 1:
            axes.errorbar(Time_std,r_R0_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('R0 residuals')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1  and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
            axes.errorbar(Time_std1,r_R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,r_R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('R0 residuals')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1  and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
            axes.errorbar(Time_std1,r_R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,r_R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std3,r_R0_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes.set_ylabel('R0 residuals')
            axes.set_xlabel('Time(h)')
        self.FigCanvas.show()

    def save_residuals_Fig(self):
        name_Fig_Residuals = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_Fig_residuals = name_Fig_Residuals[0] + '.eps'
        self.figResiduals.savefig(name_save_Fig_residuals, dpi=300, format=None)

class Figure_residuals_Window_2ratios_conc(QWidget, Figure_data_2ratios_Layout.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_residuals_Fig)

        self.dpi = 100
        self.figResiduals = plt.Figure((10.0, 7.7), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figResiduals)
        self.FigCanvas.setParent(self.Frame_FigData)
        axes1 = self.figResiduals.add_subplot(211)
        axes2 = self.figResiduals.add_subplot(212, sharex=axes1)
        if Analyses_type_value == 2 and nb_ratios_conc_value == 2  and nb_std_conc_value == 1 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std,R0_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes1.set_ylabel('R0 residuals')
            axes2.errorbar(Time_std,R1_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes2.set_ylabel('R1 residuals')
            axes2.set_xlabel('Time(h)')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2  and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,r_R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,r_R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes1.set_ylabel('R0 residuals')
            axes2.errorbar(Time_std1,r_R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,r_R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes2.set_ylabel('R1 residuals')
            axes2.set_xlabel('Time(h)')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2  and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,r_R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,r_R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std3,r_R0_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes1.set_ylabel('R0 residuals')
            axes2.errorbar(Time_std1,r_R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,r_R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std3,r_R1_std3, yerr=error1_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes2.set_ylabel('R1 residuals')
            axes2.set_xlabel('Time(h)')
        self.FigCanvas.show()

    def save_residuals_Fig(self):
        name_Fig_Residuals = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_Fig_residuals = name_Fig_Residuals[0] + '.eps'
        self.figResiduals.savefig(name_save_Fig_residuals, dpi=300, format=None)

class Figure_residuals_Window_3ratios_conc(QWidget, Figure_data_3ratios_Layout.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_residuals_Fig)

        self.dpi = 100
        self.figResiduals = plt.Figure((10.0, 8.9), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figResiduals)
        self.FigCanvas.setParent(self.Frame_FigData)
        axes1 = self.figResiduals.add_subplot(311)
        axes2 = self.figResiduals.add_subplot(312, sharex=axes1)
        axes3 = self.figResiduals.add_subplot(313, sharex=axes1)
        if Analyses_type_value == 2 and nb_ratios_conc_value == 3  and nb_std_conc_value == 1 and drift_order_conc_value >= 0:
            axes1.errorbar(Time_std,r_R0_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes1.set_ylabel('R0 residuals')
            axes2.errorbar(Time_std,r_R1_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes2.set_ylabel('R1 residuals')
            axes3.errorbar(Time_std,r_R2_std, yerr=error2_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes3.set_ylabel('R2 residuals')
            axes3.set_xlabel('Time(h)')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3  and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,r_R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,r_R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes1.set_ylabel('R0 residuals')
            axes2.errorbar(Time_std1,r_R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,r_R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes2.set_ylabel('R1 residuals')
            axes3.errorbar(Time_std1,r_R2_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,r_R2_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes3.set_ylabel('R2 residuals')
            axes3.set_xlabel('Time(h)')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3  and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,r_R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,r_R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std3,r_R0_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes1.set_ylabel('R0 residuals')
            axes2.errorbar(Time_std1,r_R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,r_R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std3,r_R1_std3, yerr=error1_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes2.set_ylabel('R1 residuals')
            axes3.errorbar(Time_std1,r_R2_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,r_R2_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std3,r_R2_std3, yerr=error2_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes3.set_ylabel('R2 residuals')
            axes3.set_xlabel('Time(h)')
        self.FigCanvas.show()

    def save_residuals_Fig(self):
        name_Fig_Residuals = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_Fig_residuals = name_Fig_Residuals[0] + '.eps'
        self.figResiduals.savefig(name_save_Fig_residuals, dpi=300, format=None)

class Figure_residuals_Window_4ratios_conc(QWidget, Figure_data_4ratios_Layout.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_residuals_Fig)

        self.dpi = 100
        self.figResiduals = plt.Figure((10.0, 10.1), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figResiduals)
        self.FigCanvas.setParent(self.Frame_FigData)
        axes1 = self.figResiduals.add_subplot(411)
        axes2 = self.figResiduals.add_subplot(412, sharex=axes1)
        axes3 = self.figResiduals.add_subplot(413, sharex=axes1)
        axes4 = self.figResiduals.add_subplot(414, sharex=axes1)
        if Analyses_type_value == 2 and nb_ratios_conc_value == 4  and nb_std_conc_value == 1 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std,r_R0_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes1.set_ylabel('R0 residuals')
            axes2.errorbar(Time_std,r_R1_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes2.set_ylabel('R1 residuals')
            axes3.errorbar(Time_std,r_R2_std, yerr=error2_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes3.set_ylabel('R2 residuals')
            axes4.errorbar(Time_std,r_R3_std, yerr=error3_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes4.set_xlabel('Time(h)')
            axes4.set_ylabel('R3 residuals')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4  and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,r_R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,r_R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes1.set_ylabel('R0 residuals')
            axes2.errorbar(Time_std1,r_R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,r_R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes2.set_ylabel('R1 residuals residuals')
            axes3.errorbar(Time_std1,r_R2_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,r_R2_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes3.set_ylabel('R2 residuals')
            axes4.errorbar(Time_std1,r_R3_std1, yerr=error3_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_std2,r_R3_std2, yerr=error3_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes4.set_xlabel('Time(h)')
            axes4.set_ylabel('R3 residuals')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4  and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,r_R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,r_R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std3,r_R0_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes1.set_ylabel('R0 residuals')
            axes2.errorbar(Time_std1,r_R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,r_R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std3,r_R1_std3, yerr=error1_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes2.set_ylabel('R1 residuals')
            axes3.errorbar(Time_std1,r_R2_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,r_R2_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std3,r_R2_std3, yerr=error2_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes3.set_ylabel('R2 residuals')
            axes4.errorbar(Time_std1,r_R3_std1, yerr=error3_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_std2,r_R3_std2, yerr=error3_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_std3,r_R3_std3, yerr=error3_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
            axes4.set_xlabel('Time(h)')
            axes4.set_ylabel('R3 residuals')
        self.FigCanvas.show()

    def save_residuals_Fig(self):
        name_Fig_Residuals = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_Fig_residuals = name_Fig_Residuals[0] + '.eps'
        self.figResiduals.savefig(name_save_Fig_residuals, dpi=300, format=None)


class Figure_data_Window_iso(QWidget, Figure_data_Layout.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_data_Fig)

        self.dpi = 100
        self.figData = plt.Figure((10.7, 6.8), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figData)
        self.FigCanvas.setParent(self.Frame_FigData)
        axes = self.figData.add_subplot(111)
        if Analyses_type_value == 1 and nb_std_iso_value == 1 and Auto_bias_iso_value == 0 and drift_order_iso_value == 0:
            axes.errorbar(Time_std,delta_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_unk,delta_unk, yerr=error_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.set_xlabel('Time(h)')
            if Isotopic_system_value == 1:
                axes.set_ylabel(r"$\delta D_{RAW}  (permil)$")
            elif Isotopic_system_value == 2:
                axes.set_ylabel(r"$\delta^{7}Li_{RAW}  (permil)$")
            elif Isotopic_system_value == 3:
                axes.set_ylabel(r"$\delta^{11}B_{RAW}  (permil)$")
            elif Isotopic_system_value == 4:
                axes.set_ylabel(r"$\delta^{13}C_{RAW}  (permil)$")
            elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                axes.set_ylabel(r"$\delta^{18}O_{RAW}  (permil)$")
            elif Isotopic_system_value == 7:
                axes.set_ylabel(r"$\delta^{37}Cl_{RAW}  (permil)$")
            elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                axes.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
        elif Analyses_type_value == 1 and nb_std_iso_value == 1 and Auto_bias_iso_value == 0 and drift_order_iso_value >= 1:
            axes.errorbar(Time_std,delta_corr_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_unk,delta_corr_unk, yerr=error_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.set_xlabel('Time(h)')
            if Isotopic_system_value == 1:
                axes.set_ylabel(r"$\delta D_{RAW}  (permil)$")
            elif Isotopic_system_value == 2:
                axes.set_ylabel(r"$\delta^{7}Li_{RAW}  (permil)$")
            elif Isotopic_system_value == 3:
                axes.set_ylabel(r"$\delta^{11}B_{RAW}  (permil)$")
            elif Isotopic_system_value == 4:
                axes.set_ylabel(r"$\delta^{13}C_{RAW}  (permil)$")
            elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                axes.set_ylabel(r"$\delta^{18}O_{RAW}  (permil)$")
            elif Isotopic_system_value == 7:
                axes.set_ylabel(r"$\delta^{37}Cl_{RAW}  (permil)$")
            elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                axes.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
        elif Analyses_type_value == 1 and nb_std_iso_value == 1 and Auto_bias_iso_value == 1:
            axes.errorbar(Time_std,delta_ref_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_unk,delta_ref_unk, yerr=se_ref_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.set_xlabel('Time(h)')
            if Isotopic_system_value == 1:
                axes.set_ylabel(r"$\delta D_{VSMOW}  (permil)$")
            elif Isotopic_system_value == 2:
                axes.set_ylabel(r"$\delta^{7}Li  (permil)$")
            elif Isotopic_system_value == 3:
                axes.set_ylabel(r"$\delta^{11}B  (permil)$")
            elif Isotopic_system_value == 4:
                axes.set_ylabel(r"$\delta^{13}C_{VPDB}  (permil)$")
            elif Isotopic_system_value == 5:
                axes.set_ylabel(r"$\delta^{18}O_{VPDB}  (permil)$")
            elif Isotopic_system_value == 6:
                axes.set_ylabel(r"$\delta^{18}O_{VSMOW}  (permil)$")
            elif Isotopic_system_value == 7:
                axes.set_ylabel(r"$\delta^{37}Cl_{VSMOC}  (permil)$")
            elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                axes.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and Auto_bias_iso_value == 0 and drift_order_iso_value == 0:
            axes.errorbar(Time_std1,delta_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,delta_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_unk,delta_unk, yerr=error_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.set_xlabel('Time(h)')
            if Isotopic_system_value == 1:
                axes.set_ylabel(r"$\delta D_{RAW}  (permil)$")
            elif Isotopic_system_value == 2:
                axes.set_ylabel(r"$\delta^{7}Li_{RAW}  (permil)$")
            elif Isotopic_system_value == 3:
                axes.set_ylabel(r"$\delta^{11}B_{RAW}  (permil)$")
            elif Isotopic_system_value == 4:
                axes.set_ylabel(r"$\delta^{13}C_{RAW}  (permil)$")
            elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                axes.set_ylabel(r"$\delta^{18}O_{RAW}  (permil)$")
            elif Isotopic_system_value == 7:
                axes.set_ylabel(r"$\delta^{37}Cl_{RAW}  (permil)$")
            elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                axes.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and Auto_bias_iso_value == 0 and drift_order_iso_value >= 1:
            axes.errorbar(Time_std1,delta_corr_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,delta_corr_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_unk,delta_corr_unk, yerr=error_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.set_xlabel('Time(h)')
            if Isotopic_system_value == 1:
                axes.set_ylabel(r"$\delta D_{RAW}  (permil)$")
            elif Isotopic_system_value == 2:
                axes.set_ylabel(r"$\delta^{7}Li_{RAW}  (permil)$")
            elif Isotopic_system_value == 3:
                axes.set_ylabel(r"$\delta^{11}B_{RAW}  (permil)$")
            elif Isotopic_system_value == 4:
                axes.set_ylabel(r"$\delta^{13}C_{RAW}  (permil)$")
            elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                axes.set_ylabel(r"$\delta^{18}O_{RAW}  (permil)$")
            elif Isotopic_system_value == 7:
                axes.set_ylabel(r"$\delta^{37}Cl_{RAW}  (permil)$")
            elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                axes.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and Auto_bias_iso_value == 0 and drift_order_iso_value == 0:
            axes.errorbar(Time_std1,delta_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,delta_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std3,delta_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_unk,delta_unk, yerr=error_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.set_xlabel('Time(h)')
            if Isotopic_system_value == 1:
                axes.set_ylabel(r"$\delta D_{RAW}  (permil)$")
            elif Isotopic_system_value == 2:
                axes.set_ylabel(r"$\delta^{7}Li_{RAW}  (permil)$")
            elif Isotopic_system_value == 3:
                axes.set_ylabel(r"$\delta^{11}B_{RAW}  (permil)$")
            elif Isotopic_system_value == 4:
                axes.set_ylabel(r"$\delta^{13}C_{RAW}  (permil)$")
            elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                axes.set_ylabel(r"$\delta^{18}O_{RAW}  (permil)$")
            elif Isotopic_system_value == 7:
                axes.set_ylabel(r"$\delta^{37}Cl_{RAW}  (permil)$")
            elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                axes.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and Auto_bias_iso_value == 0 and drift_order_iso_value >= 1:
            axes.errorbar(Time_std1,delta_corr_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,delta_corr_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std3,delta_corr_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_unk,delta_corr_unk, yerr=error_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.set_xlabel('Time(h)')
            if Isotopic_system_value == 1:
                axes.set_ylabel(r"$\delta D_{RAW}  (permil)$")
            elif Isotopic_system_value == 2:
                axes.set_ylabel(r"$\delta^{7}Li_{RAW}  (permil)$")
            elif Isotopic_system_value == 3:
                axes.set_ylabel(r"$\delta^{11}B_{RAW}  (permil)$")
            elif Isotopic_system_value == 4:
                axes.set_ylabel(r"$\delta^{13}C_{RAW}  (permil)$")
            elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                axes.set_ylabel(r"$\delta^{18}O_{RAW}  (permil)$")
            elif Isotopic_system_value == 7:
                axes.set_ylabel(r"$\delta^{37}Cl_{RAW}  (permil)$")
            elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                axes.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            axes.errorbar(Time_std,R0_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_unk,R0_unk, yerr=error_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('R0')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1  and nb_std_conc_value == 1 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            axes.errorbar(Time_std,R0_corr_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_unk,R0_corr_unk, yerr=error_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('R0')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1  and nb_std_conc_value == 1 and Auto_bias_conc_value == 1:
            axes.errorbar(Time_std,R0_ref_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_unk,R0_ref_unk, yerr=se_ref_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('R0 (wt%)')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1  and nb_std_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            axes.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_unk,R0_unk, yerr=error_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('R0')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1  and nb_std_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            axes.errorbar(Time_std1,R0_corr_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,R0_corr_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_unk,R0_corr_unk, yerr=error_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('R0')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1  and nb_std_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            axes.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std3,R0_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_unk,R0_unk, yerr=error_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('R0')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1  and nb_std_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            axes.errorbar(Time_std1,R0_corr_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std2,R0_corr_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_std3,R0_corr_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.errorbar(Time_unk,R0_corr_unk, yerr=error_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes.set_xlabel('Time(h)')
            axes.set_ylabel('R0')
        self.FigCanvas.show()

    def save_data_Fig(self):
        name_Fig_Data = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_Fig_Data = name_Fig_Data[0] + '.eps'
        self.figData.savefig(name_save_Fig_Data, dpi=300, format=None)

class Figure_data_Window_2ratios_conc(QWidget, Figure_data_2ratios_Layout.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_data_Fig)

        self.dpi = 100
        self.figData = plt.Figure((10.0, 7.7), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figData)
        self.FigCanvas.setParent(self.Frame_FigData)
        axes1 = self.figData.add_subplot(211)
        axes2 = self.figData.add_subplot(212, sharex=axes1)
        if Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 1 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std,R0_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std,R1_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_xlabel('Time(h)')
            axes2.set_ylabel('R1')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2  and nb_std_conc_value == 1 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std,R0_corr_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_corr_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std,R1_corr_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_corr_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_xlabel('Time(h)')
            axes2.set_ylabel('R1')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2  and nb_std_conc_value == 1 and Auto_bias_conc_value == 1 and drift_order_conc_value >= 0:
            axes1.errorbar(Time_std,R0_ref_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_ref_unk, yerr=se0_ref_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0 (wt%)')
            axes2.errorbar(Time_std,R1_ref_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_ref_unk, yerr=se1_ref_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_xlabel('Time(h)')
            axes2.set_ylabel('R1 (wt%)')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2  and nb_std_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_xlabel('Time(h)')
            axes2.set_ylabel('R1')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2  and nb_std_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,R0_corr_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_corr_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_corr_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_corr_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_corr_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_corr_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_xlabel('Time(h)')
            axes2.set_ylabel('R1')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2  and nb_std_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std3,R0_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std3,R1_std3, yerr=error1_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_xlabel('Time(h)')
            axes2.set_ylabel('R1')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2  and nb_std_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,R0_corr_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_corr_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std3,R0_corr_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_corr_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_corr_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_corr_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std3,R1_corr_std3, yerr=error1_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_corr_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_xlabel('Time(h)')
            axes2.set_ylabel('R1')
        self.FigCanvas.show()

    def save_data_Fig(self):
        name_Fig_Data = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_Fig_Data = name_Fig_Data[0] + '.eps'
        self.figData.savefig(name_save_Fig_Data, dpi=300, format=None)

class Figure_data_Window_3ratios_conc(QWidget, Figure_data_3ratios_Layout.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_data_Fig)

        self.dpi = 100
        self.figData = plt.Figure((10.0, 8.9), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figData)
        self.FigCanvas.setParent(self.Frame_FigData)
        axes1 = self.figData.add_subplot(311)
        axes2 = self.figData.add_subplot(312, sharex=axes1)
        axes3 = self.figData.add_subplot(313, sharex=axes1)
        if Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 1 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std,R0_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std,R1_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std,R2_std, yerr=error2_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_unk,R2_unk, yerr=error2_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.set_xlabel('Time(h)')
            axes3.set_ylabel('R2')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3  and nb_std_conc_value == 1 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std,R0_corr_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_corr_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std,R1_corr_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_corr_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std,R2_corr_std, yerr=error2_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_unk,R2_corr_unk, yerr=error2_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.set_xlabel('Time(h)')
            axes3.set_ylabel('R2')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3  and nb_std_conc_value == 1 and Auto_bias_conc_value == 1 and drift_order_conc_value >= 0:
            axes1.errorbar(Time_std,R0_ref_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_ref_unk, yerr=se0_ref_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0 (wt%)')
            axes2.errorbar(Time_std,R1_ref_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_ref_unk, yerr=se1_ref_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_ylabel('R1 (wt%)')
            axes3.errorbar(Time_std,R2_ref_std, yerr=error2_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_unk,R2_ref_unk, yerr=se2_ref_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.set_xlabel('Time(h)')
            axes3.set_ylabel('R2 (wt%)')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3  and nb_std_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std1,R2_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,R2_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_unk,R2_unk, yerr=error2_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.set_xlabel('Time(h)')
            axes3.set_ylabel('R2')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3  and nb_std_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,R0_corr_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_corr_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_corr_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_corr_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_corr_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_corr_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std1,R2_corr_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,R2_corr_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_unk,R2_corr_unk, yerr=error2_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.set_xlabel('Time(h)')
            axes3.set_ylabel('R2')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3  and nb_std_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std3,R0_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std3,R1_std3, yerr=error1_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std1,R2_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,R2_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std3,R2_std3, yerr=error2_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_unk,R2_unk, yerr=error2_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.set_xlabel('Time(h)')
            axes3.set_ylabel('R2')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3  and nb_std_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,R0_corr_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_corr_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std3,R0_corr_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_corr_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_corr_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_corr_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std3,R1_corr_std3, yerr=error1_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_corr_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std1,R2_corr_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,R2_corr_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std3,R2_corr_std3, yerr=error2_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_unk,R2_corr_unk, yerr=error2_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.set_xlabel('Time(h)')
            axes3.set_ylabel('R2')
        self.FigCanvas.show()

    def save_data_Fig(self):
        name_Fig_Data = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_Fig_Data = name_Fig_Data[0] + '.eps'
        self.figData.savefig(name_save_Fig_Data, dpi=300, format=None)

class Figure_data_Window_4ratios_conc(QWidget, Figure_data_4ratios_Layout.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_data_Fig)

        self.dpi = 100
        self.figData = plt.Figure((10.0, 10.1), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figData)
        self.FigCanvas.setParent(self.Frame_FigData)
        axes1 = self.figData.add_subplot(411)
        axes2 = self.figData.add_subplot(412, sharex=axes1)
        axes3 = self.figData.add_subplot(413, sharex=axes1)
        axes4 = self.figData.add_subplot(414, sharex=axes1)
        if Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 1 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std,R0_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std,R1_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std,R2_std, yerr=error2_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_unk,R2_unk, yerr=error2_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.set_ylabel('R2')
            axes4.errorbar(Time_std,R3_std, yerr=error3_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_unk,R3_unk, yerr=error3_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.set_xlabel('Time(h)')
            axes4.set_ylabel('R3')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4  and nb_std_conc_value == 1 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std,R0_corr_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_corr_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std,R1_corr_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_corr_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std,R2_corr_std, yerr=error2_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_unk,R2_corr_unk, yerr=error2_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.set_ylabel('R2')
            axes4.errorbar(Time_std,R3_corr_std, yerr=error3_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_unk,R3_corr_unk, yerr=error3_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.set_xlabel('Time(h)')
            axes4.set_ylabel('R3')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4  and nb_std_conc_value == 1 and Auto_bias_conc_value == 1 and drift_order_conc_value >= 0:
            axes1.errorbar(Time_std,R0_ref_std, yerr=error0_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_ref_unk, yerr=se0_ref_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0 (wt%)')
            axes2.errorbar(Time_std,R1_ref_std, yerr=error1_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_ref_unk, yerr=se1_ref_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_ylabel('R1 (wt%)')
            axes3.errorbar(Time_std,R2_ref_std, yerr=error2_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_unk,R2_ref_unk, yerr=se2_ref_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.set_ylabel('R2 (wt%)')
            axes4.errorbar(Time_std,R3_ref_std, yerr=error3_std, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_unk,R3_ref_unk, yerr=se3_ref_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.set_xlabel('Time(h)')
            axes4.set_ylabel('R3 (wt%)')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4  and nb_std_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std1,R2_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,R2_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_unk,R2_unk, yerr=error2_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.set_ylabel('R2')
            axes4.errorbar(Time_std1,R3_std1, yerr=error3_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_std2,R3_std2, yerr=error3_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_unk,R3_unk, yerr=error3_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.set_xlabel('Time(h)')
            axes4.set_ylabel('R3')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4  and nb_std_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,R0_corr_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_corr_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_corr_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_corr_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_corr_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_corr_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std1,R2_corr_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,R2_corr_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_unk,R2_corr_unk, yerr=error2_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.set_ylabel('R2')
            axes4.errorbar(Time_std1,R3_corr_std1, yerr=error3_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_std2,R3_corr_std2, yerr=error3_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_unk,R3_corr_unk, yerr=error3_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.set_xlabel('Time(h)')
            axes4.set_ylabel('R3')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4  and nb_std_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            axes1.errorbar(Time_std1,R0_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std3,R0_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std3,R1_std3, yerr=error1_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std1,R2_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,R2_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std3,R2_std3, yerr=error2_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_unk,R2_unk, yerr=error2_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.set_ylabel('R2')
            axes4.errorbar(Time_std1,R3_std1, yerr=error3_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_std2,R3_std2, yerr=error3_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_std3,R3_std3, yerr=error3_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_unk,R3_unk, yerr=error3_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.set_xlabel('Time(h)')
            axes4.set_ylabel('R3')
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4  and nb_std_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            axes1.errorbar(Time_std1,R0_corr_std1, yerr=error0_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std2,R0_corr_std2, yerr=error0_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_std3,R0_corr_std3, yerr=error0_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.errorbar(Time_unk,R0_corr_unk, yerr=error0_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes1.set_ylabel('R0')
            axes2.errorbar(Time_std1,R1_corr_std1, yerr=error1_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std2,R1_corr_std2, yerr=error1_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_std3,R1_corr_std3, yerr=error1_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.errorbar(Time_unk,R1_corr_unk, yerr=error1_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes2.set_ylabel('R1')
            axes3.errorbar(Time_std1,R2_corr_std1, yerr=error2_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std2,R2_corr_std2, yerr=error2_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_std3,R2_corr_std3, yerr=error2_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.errorbar(Time_unk,R2_corr_unk, yerr=error2_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes3.set_ylabel('R2')
            axes4.errorbar(Time_std1,R3_corr_std1, yerr=error3_std1, marker='o', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_std2,R3_corr_std2, yerr=error3_std2, marker='d', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_std3,R3_corr_std3, yerr=error3_std3, marker='s', markerfacecolor='k', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.errorbar(Time_unk,R3_corr_unk, yerr=error3_unk, marker='o', markerfacecolor='w', markeredgecolor='k', ecolor='k', capthick=2, linestyle='')
            axes4.set_xlabel('Time(h)')
            axes4.set_ylabel('R3')
        self.FigCanvas.show()

    def save_data_Fig(self):
        name_Fig_Data = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_Fig_Data = name_Fig_Data[0] + '.eps'
        self.figData.savefig(name_save_Fig_Data, dpi=300, format=None)


class Figure_Fig_Bckg_24_Window(QWidget, Figure_Add_Info_Layout.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_AddInfo_Fig)

        self.dpi = 100
        self.figAddInfo = plt.Figure((10.7, 9.2), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figAddInfo)
        self.FigCanvas.setParent(self.Frame_FigAddInfo)
        axe1 = self.figAddInfo.add_subplot(111)
        axe1.plot(Time,Bkg_Lp2, 'ko', markersize=3)
        axe1.set_xlabel('Time (h)')
        axe1.set_ylabel('background 24Mg')
        self.figAddInfo.subplots_adjust(0.09, 0.08, 0.96, 0.96)

    def save_AddInfo_Fig(self):
        name_Fig_AddInfo = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_Fig_AddInfo = name_Fig_AddInfo[0] + '.eps'
        self.figAddInfo.savefig(name_save_Fig_AddInfo, dpi=300, format=None)


class Figure_AddInfo_Window(QWidget, Figure_Add_Info_Layout.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_AddInfo_Fig)

        self.dpi = 100
        self.figAddInfo = plt.Figure((10.7, 9.2), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figAddInfo)
        self.FigCanvas.setParent(self.Frame_FigAddInfo)
        axe1 = self.figAddInfo.add_subplot(221)
        axe1.plot(X_pos_B,Y_pos_B, 'ko', markersize=3)
        axe1.set_xlabel('X position ($\mu$m)')
        axe1.set_ylabel('Y position ($\mu$m)')
        axe1.set_xlim([-8000, 8000,])
        axe1.set_ylim([-8000, 8000,])
        circle5000 = Circle((0, 0), 5000, edgecolor=(0, 0, 0), facecolor='none', linestyle='--')
        axe1.add_patch(circle5000)
        axe1.set_aspect('equal', anchor='C')
        axe1.spines['left'].set_position('center')
        axe1.spines['bottom'].set_position('center')
        axe1.spines['right'].set_color('none')
        axe1.spines['top'].set_color('none')
        # axe1.xaxis.set_ticks_position('bottom')
        # axe1.yaxis.set_ticks_position('left')
        axe2 = self.figAddInfo.add_subplot(223)
        axe2.plot(dt_FA_X_B,dt_FA_Y_B, 'ko', markersize=3)
        axe2.set_xlabel('dt_FA X')
        axe2.set_ylabel('dt_FA Y')
        axe2.set_xlim([-150, 150,])
        axe2.set_ylim([-150, 150,])
        axe2.set_aspect('equal', anchor='C')
        axe3 = self.figAddInfo.add_subplot(222)
        axe3.plot(Time_B,Prim_B, 'ko', markersize=3)
        axe3.set_xlabel('Time (h)')
        axe3.set_ylabel('Primary current (nA)')
        axe4 = self.figAddInfo.add_subplot(224, sharex=axe3)
        axe4.plot(Time_B,Chamber_pressure_B, 'ko', markersize=3)
        axe4.set_xlabel('Time (h)')
        axe4.set_ylabel('Chamber pressure (mbar)')
        self.figAddInfo.subplots_adjust(0.09, 0.08, 0.96, 0.96)

    def save_AddInfo_Fig(self):
        name_Fig_AddInfo = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_Fig_AddInfo = name_Fig_AddInfo[0] + '.eps'
        self.figAddInfo.savefig(name_save_Fig_AddInfo, dpi=300, format=None)


class Figure_Stats_Window(QWidget, Figure_Statistics.Ui_Form):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)
        self.pushButton_saveFigure.clicked.connect(self.save_stats_Fig)

        self.dpi = 100
        self.figStats = plt.Figure((11.8, 5.8), dpi=self.dpi)
        self.FigCanvas = FigureCanvas(self.figStats)
        self.FigCanvas.setParent(self.Frame_FigStats)
        axe1 = self.figStats.add_subplot(121)
        axe1.set_xlabel('Degree fo freedom')
        axe1.set_ylabel('MSWD')
        axe1.set_xlim([0, 100])
        axe1.set_ylim([0, 3.5])
        x_df = np.linspace(0,100,400)
        sd_MSWDp = 1 + 2 * np.sqrt(2/x_df)
        sd_MSWDm = 1 - 2 * np.sqrt(2/x_df)
        s_MSWDm = 1 - np.sqrt(2/x_df)
        s_MSWDp = 1 + np.sqrt(2/x_df)
        if Analyses_type_value == 1 and nb_std_iso_value == 1:
            axe1.plot(df_std, MSWD, 'ko', markersize=6)
            axe1.plot(x_df, np.ones((len(x_df), 1)), 'k--', linewidth=2)
            axe1.plot(x_df, sd_MSWDp, 'k:', linewidth=1)
            axe1.plot(x_df, sd_MSWDm, 'k:', linewidth=1)
            axe1.plot(x_df, s_MSWDp, 'k-.', linewidth=1)
            axe1.plot(x_df, s_MSWDm, 'k-.', linewidth=1)
        elif Analyses_type_value == 1 and nb_std_iso_value >= 2:
            axe1.plot(df_tot_std, MSWD_tot, 'ko', markersize=6)
            axe1.plot(x_df, np.ones((len(x_df), 1)), 'k--', linewidth=2)
            axe1.plot(x_df, sd_MSWDp, 'k:', linewidth=1)
            axe1.plot(x_df, sd_MSWDm, 'k:', linewidth=1)
            axe1.plot(x_df, s_MSWDp, 'k-.', linewidth=1)
            axe1.plot(x_df, s_MSWDm, 'k-.', linewidth=1)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1:
            axe1.plot(df_std, MSWD, 'ko', markersize=6)
            axe1.plot(x_df, np.ones((len(x_df), 1)), 'k--', linewidth=2)
            axe1.plot(x_df, sd_MSWDp, 'k:', linewidth=1)
            axe1.plot(x_df, sd_MSWDm, 'k:', linewidth=1)
            axe1.plot(x_df, s_MSWDp, 'k-.', linewidth=1)
            axe1.plot(x_df, s_MSWDm, 'k-.', linewidth=1)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value >= 2:
            axe1.plot(df_tot_std, MSWD_tot, 'ko', markersize=6)
            axe1.plot(x_df, np.ones((len(x_df), 1)), 'k--', linewidth=2)
            axe1.plot(x_df, sd_MSWDp, 'k:', linewidth=1)
            axe1.plot(x_df, sd_MSWDm, 'k:', linewidth=1)
            axe1.plot(x_df, s_MSWDp, 'k-.', linewidth=1)
            axe1.plot(x_df, s_MSWDm, 'k-.', linewidth=1)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 1:
            axe1.plot(df_std, MSWD_R0, 'ko', markersize=6)
            axe1.plot(df_std, MSWD_R1, 'kd', markersize=6)
            axe1.plot(x_df, np.ones((len(x_df), 1)), 'k--', linewidth=2)
            axe1.plot(x_df, sd_MSWDp, 'k:', linewidth=1)
            axe1.plot(x_df, sd_MSWDm, 'k:', linewidth=1)
            axe1.plot(x_df, s_MSWDp, 'k-.', linewidth=1)
            axe1.plot(x_df, s_MSWDm, 'k-.', linewidth=1)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value >= 2:
            axe1.plot(df_tot_std, MSWD_R0_tot, 'ko', markersize=6)
            axe1.plot(df_tot_std, MSWD_R1_tot, 'kd', markersize=6)
            axe1.plot(x_df, np.ones((len(x_df), 1)), 'k--', linewidth=2)
            axe1.plot(x_df, sd_MSWDp, 'k:', linewidth=1)
            axe1.plot(x_df, sd_MSWDm, 'k:', linewidth=1)
            axe1.plot(x_df, s_MSWDp, 'k-.', linewidth=1)
            axe1.plot(x_df, s_MSWDm, 'k-.', linewidth=1)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 1:
            axe1.plot(df_std, MSWD_R0, 'ko', markersize=6)
            axe1.plot(df_std, MSWD_R1, 'kd', markersize=6)
            axe1.plot(df_std, MSWD_R2, 'ks', markersize=6)
            axe1.plot(x_df, np.ones((len(x_df), 1)), 'k--', linewidth=2)
            axe1.plot(x_df, sd_MSWDp, 'k:', linewidth=1)
            axe1.plot(x_df, sd_MSWDm, 'k:', linewidth=1)
            axe1.plot(x_df, s_MSWDp, 'k-.', linewidth=1)
            axe1.plot(x_df, s_MSWDm, 'k-.', linewidth=1)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value >= 2:
            axe1.plot(df_tot_std, MSWD_R0_tot, 'ko', markersize=6)
            axe1.plot(df_tot_std, MSWD_R1_tot, 'kd', markersize=6)
            axe1.plot(df_tot_std, MSWD_R2_tot, 'ks', markersize=6)
            axe1.plot(x_df, np.ones((len(x_df), 1)), 'k--', linewidth=2)
            axe1.plot(x_df, sd_MSWDp, 'k:', linewidth=1)
            axe1.plot(x_df, sd_MSWDm, 'k:', linewidth=1)
            axe1.plot(x_df, s_MSWDp, 'k-.', linewidth=1)
            axe1.plot(x_df, s_MSWDm, 'k-.', linewidth=1)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 1:
            axe1.plot(df_std, MSWD_R0, 'ko', markersize=6)
            axe1.plot(df_std, MSWD_R1, 'kd', markersize=6)
            axe1.plot(df_std, MSWD_R2, 'ks', markersize=6)
            axe1.plot(df_std, MSWD_R3, 'ks', markersize=6)
            axe1.plot(x_df, np.ones((len(x_df), 1)), 'k--', linewidth=2)
            axe1.plot(x_df, sd_MSWDp, 'k:', linewidth=1)
            axe1.plot(x_df, sd_MSWDm, 'k:', linewidth=1)
            axe1.plot(x_df, s_MSWDp, 'k-.', linewidth=1)
            axe1.plot(x_df, s_MSWDm, 'k-.', linewidth=1)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value >= 2:
            axe1.plot(df_tot_std, MSWD_R0_tot, 'ko', markersize=6)
            axe1.plot(df_tot_std, MSWD_R1_tot, 'kd', markersize=6)
            axe1.plot(df_tot_std, MSWD_R2_tot, 'ks', markersize=6)
            axe1.plot(df_tot_std, MSWD_R3_tot, 'ks', markersize=6)
            axe1.plot(x_df, np.ones((len(x_df), 1)), 'k--', linewidth=2)
            axe1.plot(x_df, sd_MSWDp, 'k:', linewidth=1)
            axe1.plot(x_df, sd_MSWDm, 'k:', linewidth=1)
            axe1.plot(x_df, s_MSWDp, 'k-.', linewidth=1)
            axe1.plot(x_df, s_MSWDm, 'k-.', linewidth=1)
        axe2 = self.figStats.add_subplot(122)
        if Analyses_type_value == 1 and nb_std_iso_value == 1 and drift_order_iso_value == 0:
            res = stats.probplot(res_std, fit=False, plot=axe2)
            axe2.get_lines()[0].set_marker('o')
            axe2.get_lines()[0].set_markerfacecolor('k')
            axe2.get_lines()[0].set_markeredgecolor('k')
            axe2.get_lines()[0].set_markersize(3)
            axe2.get_lines()[1].set_linewidth(1)
            axe2.get_lines()[1].set_linestyle('--')
            axe2.get_lines()[1].set_color("black")
        elif Analyses_type_value == 1 and nb_std_iso_value == 1 and drift_order_iso_value >= 1:
            res = stats.probplot(r_std, fit=False, plot=axe2)
            axe2.get_lines()[0].set_marker('o')
            axe2.get_lines()[0].set_markerfacecolor('k')
            axe2.get_lines()[0].set_markeredgecolor('k')
            axe2.get_lines()[0].set_markersize(3)
            axe2.get_lines()[1].set_linewidth(1)
            axe2.get_lines()[1].set_linestyle('--')
            axe2.get_lines()[1].set_color("black")
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and drift_order_iso_value == 0:
            res1 = stats.probplot(res_std1, fit=False, plot=axe2)
            res2 = stats.probplot(res_std2, fit=False, plot=axe2)
            axe2.get_lines()[0].set_marker('o')
            axe2.get_lines()[0].set_markerfacecolor('k')
            axe2.get_lines()[0].set_markeredgecolor('k')
            axe2.get_lines()[0].set_markersize(3)
            axe2.get_lines()[2].set_marker('d')
            axe2.get_lines()[2].set_markerfacecolor('k')
            axe2.get_lines()[2].set_markeredgecolor('k')
            axe2.get_lines()[2].set_markersize(3)
            axe2.get_lines()[1].set_linewidth(1)
            axe2.get_lines()[1].set_linestyle('--')
            axe2.get_lines()[1].set_color("black")
            axe2.get_lines()[3].set_linewidth(1)
            axe2.get_lines()[3].set_linestyle('-.')
            axe2.get_lines()[3].set_color("black")
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and drift_order_iso_value >= 1:
            res1 = stats.probplot(r_std1, fit=False, plot=axe2)
            res2 = stats.probplot(r_std2, fit=False, plot=axe2)
            axe2.get_lines()[0].set_marker('o')
            axe2.get_lines()[0].set_markerfacecolor('k')
            axe2.get_lines()[0].set_markeredgecolor('k')
            axe2.get_lines()[0].set_markersize(3)
            axe2.get_lines()[2].set_marker('d')
            axe2.get_lines()[2].set_markerfacecolor('k')
            axe2.get_lines()[2].set_markeredgecolor('k')
            axe2.get_lines()[2].set_markersize(3)
            axe2.get_lines()[1].set_linewidth(1)
            axe2.get_lines()[1].set_linestyle('--')
            axe2.get_lines()[1].set_color("black")
            axe2.get_lines()[3].set_linewidth(1)
            axe2.get_lines()[3].set_linestyle('-.')
            axe2.get_lines()[3].set_color("black")
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and drift_order_iso_value == 0:
            res1 = stats.probplot(res_std1, fit=False, plot=axe2)
            res2 = stats.probplot(res_std2, fit=False, plot=axe2)
            res3 = stats.probplot(res_std3, fit=False, plot=axe2)
            axe2.get_lines()[0].set_marker('o')
            axe2.get_lines()[0].set_markerfacecolor('k')
            axe2.get_lines()[0].set_markeredgecolor('k')
            axe2.get_lines()[0].set_markersize(3)
            axe2.get_lines()[2].set_marker('d')
            axe2.get_lines()[2].set_markerfacecolor('k')
            axe2.get_lines()[2].set_markeredgecolor('k')
            axe2.get_lines()[2].set_markersize(3)
            axe2.get_lines()[4].set_marker('s')
            axe2.get_lines()[4].set_markerfacecolor('k')
            axe2.get_lines()[4].set_markeredgecolor('k')
            axe2.get_lines()[4].set_markersize(3)
            axe2.get_lines()[1].set_linewidth(1)
            axe2.get_lines()[1].set_linestyle('--')
            axe2.get_lines()[1].set_color("black")
            axe2.get_lines()[3].set_linewidth(1)
            axe2.get_lines()[3].set_linestyle('-.')
            axe2.get_lines()[3].set_color("black")
            axe2.get_lines()[5].set_linewidth(1)
            axe2.get_lines()[5].set_linestyle(':')
            axe2.get_lines()[5].set_color("black")
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and drift_order_iso_value >= 1:
            res1 = stats.probplot(r_std1, fit=False, plot=axe2)
            res2 = stats.probplot(r_std2, fit=False, plot=axe2)
            res3 = stats.probplot(r_std3, fit=False, plot=axe2)
            axe2.get_lines()[0].set_marker('o')
            axe2.get_lines()[0].set_markerfacecolor('k')
            axe2.get_lines()[0].set_markeredgecolor('k')
            axe2.get_lines()[0].set_markersize(3)
            axe2.get_lines()[2].set_marker('d')
            axe2.get_lines()[2].set_markerfacecolor('k')
            axe2.get_lines()[2].set_markeredgecolor('k')
            axe2.get_lines()[2].set_markersize(3)
            axe2.get_lines()[4].set_marker('s')
            axe2.get_lines()[4].set_markerfacecolor('k')
            axe2.get_lines()[4].set_markeredgecolor('k')
            axe2.get_lines()[4].set_markersize(3)
            axe2.get_lines()[1].set_linewidth(1)
            axe2.get_lines()[1].set_linestyle('--')
            axe2.get_lines()[1].set_color("black")
            axe2.get_lines()[3].set_linewidth(1)
            axe2.get_lines()[3].set_linestyle('-.')
            axe2.get_lines()[3].set_color("black")
            axe2.get_lines()[5].set_linewidth(1)
            axe2.get_lines()[5].set_linestyle(':')
            axe2.get_lines()[5].set_color("black")
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and drift_order_conc_value == 0:
            res = stats.probplot(res_R0_std, fit=False, plot=axe2)
            axe2.get_lines()[0].set_marker('o')
            axe2.get_lines()[0].set_markerfacecolor('k')
            axe2.get_lines()[0].set_markeredgecolor('k')
            axe2.get_lines()[0].set_markersize(3)
            axe2.get_lines()[1].set_linewidth(1)
            axe2.get_lines()[1].set_linestyle('--')
            axe2.get_lines()[1].set_color("black")
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and drift_order_conc_value >= 1:
            res = stats.probplot(r_R0_std, fit=False, plot=axe2)
            axe2.get_lines()[0].set_marker('o')
            axe2.get_lines()[0].set_markerfacecolor('k')
            axe2.get_lines()[0].set_markeredgecolor('k')
            axe2.get_lines()[0].set_markersize(3)
            axe2.get_lines()[1].set_linewidth(1)
            axe2.get_lines()[1].set_linestyle('--')
            axe2.get_lines()[1].set_color("black")
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 2 and drift_order_conc_value == 0:
            res1 = stats.probplot(res_R0_std1, fit=False, plot=axe2)
            res2 = stats.probplot(res_R0_std2, fit=False, plot=axe2)
            axe2.get_lines()[0].set_marker('o')
            axe2.get_lines()[0].set_markerfacecolor('k')
            axe2.get_lines()[0].set_markeredgecolor('k')
            axe2.get_lines()[0].set_markersize(3)
            axe2.get_lines()[2].set_marker('d')
            axe2.get_lines()[2].set_markerfacecolor('k')
            axe2.get_lines()[2].set_markeredgecolor('k')
            axe2.get_lines()[2].set_markersize(3)
            axe2.get_lines()[1].set_linewidth(1)
            axe2.get_lines()[1].set_linestyle('--')
            axe2.get_lines()[1].set_color("black")
            axe2.get_lines()[3].set_linewidth(1)
            axe2.get_lines()[3].set_linestyle('-.')
            axe2.get_lines()[3].set_color("black")
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1  and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
            res1 = stats.probplot(r_R0_std1, fit=False, plot=axe2)
            res2 = stats.probplot(r_R0_std2, fit=False, plot=axe2)
            axe2.get_lines()[0].set_marker('o')
            axe2.get_lines()[0].set_markerfacecolor('k')
            axe2.get_lines()[0].set_markeredgecolor('k')
            axe2.get_lines()[0].set_markersize(3)
            axe2.get_lines()[2].set_marker('d')
            axe2.get_lines()[2].set_markerfacecolor('k')
            axe2.get_lines()[2].set_markeredgecolor('k')
            axe2.get_lines()[2].set_markersize(3)
            axe2.get_lines()[1].set_linewidth(1)
            axe2.get_lines()[1].set_linestyle('--')
            axe2.get_lines()[1].set_color("black")
            axe2.get_lines()[3].set_linewidth(1)
            axe2.get_lines()[3].set_linestyle('-.')
            axe2.get_lines()[3].set_color("black")
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 3 and drift_order_conc_value == 0:
            res1 = stats.probplot(res_R0_std1, fit=False, plot=axe2)
            res2 = stats.probplot(res_R0_std2, fit=False, plot=axe2)
            res3 = stats.probplot(res_R0_std3, fit=False, plot=axe2)
            axe2.get_lines()[0].set_marker('o')
            axe2.get_lines()[0].set_markerfacecolor('k')
            axe2.get_lines()[0].set_markeredgecolor('k')
            axe2.get_lines()[0].set_markersize(3)
            axe2.get_lines()[2].set_marker('d')
            axe2.get_lines()[2].set_markerfacecolor('k')
            axe2.get_lines()[2].set_markeredgecolor('k')
            axe2.get_lines()[2].set_markersize(3)
            axe2.get_lines()[4].set_marker('s')
            axe2.get_lines()[4].set_markerfacecolor('k')
            axe2.get_lines()[4].set_markeredgecolor('k')
            axe2.get_lines()[4].set_markersize(3)
            axe2.get_lines()[1].set_linewidth(1)
            axe2.get_lines()[1].set_linestyle('--')
            axe2.get_lines()[1].set_color("black")
            axe2.get_lines()[3].set_linewidth(1)
            axe2.get_lines()[3].set_linestyle('-.')
            axe2.get_lines()[3].set_color("black")
            axe2.get_lines()[5].set_linewidth(1)
            axe2.get_lines()[5].set_linestyle(':')
            axe2.get_lines()[5].set_color("black")
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
            res1 = stats.probplot(r_R0_std1, fit=False, plot=axe2)
            res2 = stats.probplot(r_R0_std2, fit=False, plot=axe2)
            res3 = stats.probplot(r_R0_std3, fit=False, plot=axe2)
            axe2.get_lines()[0].set_marker('o')
            axe2.get_lines()[0].set_markerfacecolor('k')
            axe2.get_lines()[0].set_markeredgecolor('k')
            axe2.get_lines()[0].set_markersize(3)
            axe2.get_lines()[2].set_marker('d')
            axe2.get_lines()[2].set_markerfacecolor('k')
            axe2.get_lines()[2].set_markeredgecolor('k')
            axe2.get_lines()[2].set_markersize(3)
            axe2.get_lines()[4].set_marker('s')
            axe2.get_lines()[4].set_markerfacecolor('k')
            axe2.get_lines()[4].set_markeredgecolor('k')
            axe2.get_lines()[4].set_markersize(3)
            axe2.get_lines()[1].set_linewidth(1)
            axe2.get_lines()[1].set_linestyle('--')
            axe2.get_lines()[1].set_color("black")
            axe2.get_lines()[3].set_linewidth(1)
            axe2.get_lines()[3].set_linestyle('-.')
            axe2.get_lines()[3].set_color("black")
            axe2.get_lines()[5].set_linewidth(1)
            axe2.get_lines()[5].set_linestyle(':')
            axe2.get_lines()[5].set_color("black")
        axe2.set_title('Normal Probability Plot')
        axe2.set_xlabel('Normal Theoretical Quantiles')
        axe2.set_ylabel('Standard(s) Quantiles')
        self.figStats.subplots_adjust(0.06, 0.1, 0.98, 0.94)

    def save_stats_Fig(self):
        name_Fig_Stats = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_Fig_Stats = name_Fig_Stats[0] + '.eps'
        self.figStats.savefig(name_save_Fig_Stats, dpi=300, format=None)


class ProceSIMS_App(QMainWindow, ProceSIMS_Layout.Ui_MainWindow):
    def __init__(self):
        super(self.__class__, self).__init__()
        self.setupUi(self)

        self.home()

## Define all default variables

    global Input_Mat_mod
    Input_Mat_mod = 0
    global Deadtime_new
    Deadtime_new = 0
    global number_of_cycles
    number_of_cycles = 0
    global Section_value
    Section_value = 0
    global Name_cell
    Name_cell = 0
    global Data_type
    Data_type = 0
    global Analyses_type_value
    Analyses_type_value = 1
    global Isotopic_system_value
    Isotopic_system_value = 1
    global Ratio_iso
    Ratio_iso = 1
    global nb_std_iso_value
    nb_std_iso_value = 1
    global drift_iso_value
    drift_iso_value = 0
    global drift_order_iso_value
    drift_order_iso_value = 0
    global drift_conc_value
    drift_conc_value = 0
    global drift_order_conc_value
    drift_order_conc_value = 0
    global drift_undef_value
    drift_undef_value = 0
    global Auto_bias_iso_value
    Auto_bias_iso_value = 0
    global Auto_bias_conc_value
    Auto_bias_conc_value = 0
    global Ref_iso
    Ref_iso = 0.0020052

## Define all connections for the GUI

    def home(self):
        self.actionQuit.triggered.connect(self.close_application)
        self.actionAbout_ProceSIMS.triggered.connect(self.display_About_window)
        self.actionData.triggered.connect(self.Input_data)
        self.actionDeadtime.triggered.connect(self.Enter_New_Deadtime)
        self.actionBackground.triggered.connect(self.See_Background_24Mg)
        self.actionChange_of_cycles.triggered.connect(self.Enter_new_n_cycles)
        self.actionReset.triggered.connect(self.Reset_Variables)
        self.actionAdvanced_statistics.triggered.connect(self.figure_Statistics)
        self.actionStatistics.triggered.connect(self.Window_Statistics_fit)
        self.actionStandards.triggered.connect(self.figure_standards_show)
        self.actionResiduals_2.triggered.connect(self.figure_residuals_show)
        self.actionAll_data.triggered.connect(self.figure_data_show)
        self.actionStandard_data.triggered.connect(self.output_standard_data)
        self.actionSample_data.triggered.connect(self.output_sample_data)
        self.actionWhole_session.triggered.connect(self.output_whole_session)
        self.actionInput_data.triggered.connect(self.input)
        self.actionOptics_and_primary.triggered.connect(self.figure_AddInfo)
        self.tabAnalyses_type.currentChanged.connect(self.Analyses_type)
        self.pushButton_files_iso.clicked.connect(self.file_browse_iso)
        self.pushButton_files_conc.clicked.connect(self.file_browse_conc)
        self.pushButton_plot_iso.clicked.connect(self.plot_iso)
        self.pushButton_plot_conc.clicked.connect(self.plot_conc)
        self.comboBox_Isotopic_system.activated.connect(self.Iso_system)
        self.comboBox_ratio_iso.activated.connect(self.ratio_iso)
        self.comboBox_nb_ratios_conc.activated.connect(self.nb_ratios_conc)
        self.comboBox_nb_std_iso.activated.connect(self.nb_std_iso)
        self.comboBox_nb_std_conc.activated.connect(self.nb_std_conc)
        self.comboBox_drift_order_iso.activated.connect(self.drift_order_iso)
        self.comboBox_drift_order_conc.activated.connect(self.drift_order_conc)
        self.checkBox_comments.stateChanged.connect(self.set_name_cell)
        self.checkBox_drift_iso.stateChanged.connect(self.enable_drift_order_iso)
        self.checkBox_drift_conc.stateChanged.connect(self.enable_drift_order_conc)
        self.checkBox_bias_iso.stateChanged.connect(self.enable_ref_value_iso)
        self.checkBox_bias_conc.stateChanged.connect(self.enable_ref_value_conc)
        self.lineEdit_std1_name_iso.editingFinished.connect(self.std1_name_iso)
        self.lineEdit_std2_name_iso.editingFinished.connect(self.std2_name_iso)
        self.lineEdit_std3_name_iso.editingFinished.connect(self.std3_name_iso)
        self.lineEdit_std1_name_conc.editingFinished.connect(self.std1_name_conc)
        self.lineEdit_std2_name_conc.editingFinished.connect(self.std2_name_conc)
        self.lineEdit_std3_name_conc.editingFinished.connect(self.std3_name_conc)
    

## Define all actions for each interaction with the GUI

    def close_application(self):
        choice = QMessageBox.question(self, 'Quit!?',
                                      "Do you really want to quit the application? Any unsaved changes will be lost.",
                                      QMessageBox.Yes | QMessageBox.No)
        if choice == QMessageBox.Yes:
            sys.exit()
        else:
            pass

    def display_About_window(self):
        self.About_Window = About_Window()
        self.About_Window.show()

    def Analyses_type(self, selected_tab):
        global Analyses_type_value
        global nb_ratios_conc_value
        global nb_std_conc_value
        Analyses_type_value = None
        currentIndex = self.tabAnalyses_type.currentIndex()
        if currentIndex == 0:
            Analyses_type_value = 1
        elif currentIndex == 1:
            Analyses_type_value = 2
            nb_ratios_conc_value = 1
            nb_std_conc_value = 1


    def file_browse_iso(self):
        global name
        name, _ = QFileDialog.getOpenFileNames(self, "Select the .asc files to import", "Desktop", filter='*.asc')

    def file_browse_conc(self):
        global name
        name, _ = QFileDialog.getOpenFileNames(self, "Select the .asc files to import", "Desktop", filter='*.asc')

    def import_data(self):
        global Filename_u
        global Serialtime
        global Comment
        global X_pos
        global Y_pos
        global FA
        global Entr_slit
        global Energy_slit
        global Cont_Ap
        global Max_Area
        global Chamber_pressure
        global Sputtering_time
        global Raster_size_sput
        global Raster_size_analyses
        global Primary_current
        global dt_FA_X
        global dt_FA_Y
        global dt_CA_X
        global dt_CA_Y
        global Time
        global n_cycles
        global Bkg_Lp2
        Filename_u = []
        Comment = []
        Serialtime = []
        X_pos = []
        Y_pos = []        
        FA = []
        Entr_slit = []       
        Energy_slit = []
        Cont_Ap = []
        Max_Area = []
        Chamber_pressure = []
        Sputtering_time = []
        Raster_size_sput = []
        Raster_size_analyses = []
        Primary_current = []
        dt_FA_X = []
        dt_FA_Y = []
        dt_CA_X = []
        dt_CA_Y = []
        n_cycles =  []
        lookup_CAMECA = 'CAMECA'
        lookup_Time_PM = 'PM'
        lookup_Time_AM = 'AM'
        lookup_Comment = 'File Description :'
        lookup_XY = 'X POSITION:'
        lookup_detection = 'ACQUISITION PARAMETERS:========================================================='
        lookup_FA = 'Field _App. (um)'
        lookup_sample_HV = 'SAMPLE HV   (v)'
        lookup_Ent_slit = 'Entr._Slit  (um)'
        lookup_Energy_slit = 'Energ._Slit (eV)'
        lookup_Cont_Ap = 'Cont. Aperture (um)'
        lookup_Max_Area = 'Max Area  (optical gate coef= 100%) (um):'
        lookup_Chamber_pressure = 'Sec.Anal.pressure (mb)'
        lookup_detectors = 'DETECTOR PARAMETERS:============================================================'
        lookup_Sputter_time = 'Sputter Time (s) '
        lookup_Raster_start = 'Raster size start (um)'
        lookup_Raster_end = 'Raster size end (um)'
        lookup_start_name_ratios = 'ISOTOPICS RATIO================================================================='
        lookup_start_ratios = 'STATISTICS RESULTS://///////////////////////////////////////////////////////////'
        lookup_end_ratios = 'RESULTS : //////////////////////////////////////////////////////////////////////'
        lookup_RAW_data = 'RAW DATA:======================================================================='
        lookup_corrected_data = 'CORRECTED DATA:================================================================='
        lookup_end_cycles = 'PRIMARY INTENSITY DATA : ///////////////////////////////////////////////////////'
        lookup_Prim = 'Primary Current START (A)'
        lookup_dt_FA = 'Field App (DT1)'
        lookup_dt_CA_X = 'Entrance Slits'
        lookup_dt_CA_Y = 'Contrast Apperture'
        Bkg_Lp2 = []
        for files in name:
            file = open(files, 'r')
            Filename_u.append(os.path.basename(file.name))
            global Filename
            Filename = []
            for x in Filename_u:
                Filename_str = str(x)
                Filename_str = re.sub('(.asc)','',Filename_str)
                Filename.append(Filename_str)
            for num, line in enumerate(file, 1):
                if lookup_CAMECA in line:
                    repr(line)
                    line = line.strip()
                    columns_CAMECA = line.split('\t')
                    linetime = next(file,'')
                    if lookup_Time_PM in linetime:
                        linetime.strip()
                        columntime = linetime.split()
                        time_analysis = tm.strftime('%H:%M:%S', tm.strptime(columntime[0] + ' ' + columntime[1], '%I:%M %p'))
                        time = re.sub('1900-01-01 ','',time_analysis)
                        Date_time = columns_CAMECA[1] + '.' + time_analysis
                        date = dt.datetime.strptime(Date_time, '%m/%d/%Y.%H:%M:%S')
                        temp = dt.datetime(1899, 12, 30,00,00,00)
                    elif lookup_Time_AM in linetime:
                        linetime.strip()
                        columntime = linetime.split()
                        time_analysis = tm.strftime('%H:%M:%S', tm.strptime(columntime[0] + ' ' + columntime[1], '%I:%M %p'))
                        time = re.sub('1900-01-01 ','',time_analysis)
                        Date_time = columns_CAMECA[1] + '.' + time_analysis
                        date = dt.datetime.strptime(Date_time, '%m/%d/%Y.%H:%M:%S')
                        temp = dt.datetime(1899, 12, 30,00,00,00)
                    else:
                        linetime.strip()
                        columntime = linetime.split()
                        Date_time = columns_CAMECA[1] + '.' + columntime[0]
                        date = dt.datetime.strptime(Date_time, '%d.%m.%y.%H:%M')
                        temp = dt.datetime(1899, 12, 30,00,00)
                    delta = date - temp
                    serialtime =float(delta.days) + (float(delta.seconds) / 86400)
                    Serialtime.append(serialtime)
                elif lookup_Comment in line:
                    repr(line)
                    line_comment = next(file,'')
                    line_comment.strip()
                    Comment_split = line_comment.split('\t')
                    Comment_strip = Comment_split[0].strip('"')
                    Comment_strip = Comment_strip.strip('"\r\n')
                    Comment.append(Comment_strip)
                elif lookup_XY in line:
                    repr(line)
                    line = line.strip()
                    columns_XY = line.split('\t')
                    X = float(columns_XY[1])
                    X_pos.append(X)
                    Y = float(columns_XY[3])
                    Y_pos.append(Y)
                elif lookup_FA in line:
                    repr(line)
                    line = line.strip()
                    columns = line.split('\t')
                    columns = float(columns[1])
                    FA.append(columns)
                elif lookup_Ent_slit in line:
                    repr(line)
                    line = line.strip()
                    columns = line.split('\t')
                    columns = float(columns[1])
                    Entr_slit.append(columns)
                elif lookup_Energy_slit in line:
                    repr(line)
                    line = line.strip()
                    columns = line.split('\t')
                    columns = float(columns[1])
                    Energy_slit.append(columns)
                elif lookup_Cont_Ap in line:
                    repr(line)
                    line = line.strip()
                    columns = line.split('\t')
                    columns = float(columns[1])
                    Cont_Ap.append(columns)
                elif lookup_Max_Area in line:
                    repr(line)
                    line = line.strip()
                    columns = line.split('\t')
                    columns = float(columns[1])
                    Max_Area.append(columns)
                elif lookup_Chamber_pressure in line:
                    repr(line)
                    line = line.strip()
                    columns = line.split('\t')
                    columns = float(columns[1])
                    Chamber_pressure.append(columns)
                elif line.rstrip() == lookup_start_name_ratios:
                    global line_0
                    line_0 = num
                elif line.rstrip() == lookup_start_ratios:
                    global line_1
                    global block_name
                    line_1 = num
                    ratio_0 = list(islice(file, 8))
                    block_name = 1 + ((line_1 - line_0 - 5) / 2)
                elif lookup_Sputter_time in line:
                    repr(line)
                    line = line.strip()
                    columns = line.split('\t')
                    columns = float(columns[1])
                    Sputtering_time.append(columns)
                elif lookup_Raster_start in line:
                    repr(line)
                    line = line.strip()
                    columns = line.split('\t')
                    columns = float(columns[1])
                    Raster_size_sput.append(columns)
                elif lookup_Raster_end in line:
                    repr(line)
                    line = line.strip()
                    columns = line.split('\t')
                    columns = float(columns[1])
                    Raster_size_analyses.append(columns)
                elif lookup_Prim in line:
                    repr(line)
                    line = line.strip()
                    columns = line.split('\t')
                    columns = float(columns[2])
                    Primary_current.append(1000000000 * columns)
                elif lookup_dt_FA in line:
                    repr(line)
                    line = line.strip()
                    columns = line.split('\t')
                    columns_X = float(columns[3])
                    dt_FA_X.append(columns_X)
                    columns_Y = float(columns[4])
                    dt_FA_Y.append(columns_Y)
                elif lookup_dt_CA_X in line:
                    repr(line)
                    line = line.strip()
                    columns = line.split('\t')
                    columns = float(columns[3])
                    dt_CA_X.append(columns)
                elif lookup_dt_CA_Y in line:
                    repr(line)
                    line = line.strip()
                    columns = line.split('\t')
                    columns = float(columns[4])
                    dt_CA_Y.append(columns)
                elif line.rstrip() == lookup_RAW_data:
                    Data_type = 0
                elif line.rstrip() == lookup_corrected_data:
                    Data_type = 1
        if Data_type == 0:
            lookup_start_cycles = 'RAW DATA:======================================================================='
        elif Data_type == 1:
            lookup_start_cycles = 'CORRECTED DATA:================================================================='
        for files in name:
            file = open(files, 'r')
            for num, line in enumerate(file, 1):
                lookup_end_cycles = 'PRIMARY INTENSITY DATA : ///////////////////////////////////////////////////////'
                if line.rstrip() == lookup_RAW_data:
                    num2 = num
                elif line.rstrip() == lookup_corrected_data:
                    num2 = num
                elif line.rstrip() == lookup_end_cycles:
                    num3 = num
                    n_cycles.append(num3 - num2 - 7)
        Time_diff = np.asarray(Serialtime) - min(np.asarray(Serialtime))
        Time = np.asarray(Time_diff) * 24

        for files in name:
            file = open(files, 'r')
            for num, line in enumerate(file, 1):
                if line.rstrip() == lookup_detection:
                    detection = list(islice(file, 20))
                    Masses_line = detection[1].split('\t')
                    n_masses = len(Masses_line) - 2
                    Masses = []
                    for i in range(1, n_masses + 1):
                        Masses_line[i] = re.sub("^\s+|\s+$", "", Masses_line[i], flags=re.UNICODE)
                        Masses.append(Masses_line[i])
                    Detector_line = detection[11].split('\t')
                    Detectors = []
                    for i in range(1, n_masses):
                        Detector_line[i] = re.sub("^\s+|\s+$", "", Detector_line[i], flags=re.UNICODE)
                        Detectors.append(Detector_line[i])
                    Detector_type_line = detection[12].split('\t')
                    Detectors_type = []
                    for i in range(1, n_masses):
                        Detector_type_line[i] = re.sub("^\s+|\s+$", "", Detector_type_line[i], flags=re.UNICODE)
                        Detectors_type.append(Detector_type_line[i])

                elif line.rstrip() == lookup_detectors:
                    detectors_Y_dt = list(islice(file, 21))
                    Lp2_line = detectors_Y_dt[3].split('\t')
                    Yield_Lp2 = float(Lp2_line[1])
                    Bkg_Lp2.append(float(Lp2_line[2]))
                    DT_Lp2 = float(Lp2_line[3])
                    EM_HV_Lp2 = float(Lp2_line[5])
                    L2_line = detectors_Y_dt[4].split('\t')
                    Yield_L2 = float(L2_line[1])
                    Bkg_L2 = float(L2_line[2])
                    DT_L2 = float(L2_line[3])
                    EM_HV_L2 = float(L2_line[5])
                    L1_line = detectors_Y_dt[5].split('\t')
                    Yield_L1 = float(L1_line[1])
                    Bkg_L1 = float(L1_line[2])
                    DT_L1 = float(L1_line[3])
                    EM_HV_L1 = float(L1_line[5])
                    C_line = detectors_Y_dt[6].split('\t')
                    Yield_C = float(C_line[1])
                    Bkg_C = float(C_line[2])
                    DT_C = float(C_line[3])
                    EM_HV_C = float(C_line[5])
                    H1_line = detectors_Y_dt[7].split('\t')
                    Yield_H1 = float(H1_line[1])
                    Bkg_H1 = float(H1_line[2])
                    DT_H1 = float(H1_line[3])
                    EM_HV_H1 = float(H1_line[5])
                    H2_line = detectors_Y_dt[8].split('\t')
                    Yield_H2 = float(H2_line[1])
                    Bkg_H2 = float(H2_line[2])
                    DT_H2 = float(H2_line[3])
                    EM_HV_H2 = float(H2_line[5])
                    Hp2_line = detectors_Y_dt[9].split('\t')
                    Yield_Hp2 = float(Hp2_line[1])
                    Bkg_Hp2 = float(Hp2_line[2])
                    DT_Hp2 = float(Hp2_line[3])
                    EM_HV_Hp2 = float(Hp2_line[5])
                    FC1_line = detectors_Y_dt[10].split('\t')
                    Yield_FC1 = float(FC1_line[1])
                    Bkg_FC1 = float(FC1_line[2])
                    DT_FC1 = float(FC1_line[3])
                    EM_HV_FC1 = float(FC1_line[5])
                    EM_line = detectors_Y_dt[11].split('\t')
                    Yield_EM = float(EM_line[1])
                    Bkg_EM = float(EM_line[2])
                    DT_EM = float(EM_line[3])
                    EM_HV_EM = float(EM_line[5])
                    FC2_line = detectors_Y_dt[12].split('\t')
                    Yield_FC2 = float(FC2_line[1])
                    Bkg_FC2 = float(FC2_line[2])
                    DT_FC2 = float(FC2_line[3])
                    EM_HV_FC2 = float(FC2_line[5])



        # if block_name == 5:
        #     global R0_name
        #     R0_name = []
        #     file = open(name, 'r')
        #     for num, line in enumerate(file, 1):
        #         if line.rstrip() == lookup_start_name_ratios:
        #             name_0 = list(islice(file, 2))
        #             name_ratio0 = name_0[1].strip()
        #             cell_R0 = name_ratio0.split('\t')
        #             R0_name_str = str(cell_R0[0])
        #             R0_name.append(R0_name_str)
        # elif block_name == 7:
        #     global R1_name
        #     R0_name = []
        #     R1_name = []
        #     file = open(name, 'r')
        #     for num, line in enumerate(file, 1):
        #         if line.rstrip() == lookup_start_name_ratios:
        #             name_0 = list(islice(file, 4))
        #             name_ratio0 = name_0[1].strip()
        #             cell_R0 = name_ratio0.split('\t')
        #             R0_name_str = str(cell_R0[0])
        #             R0_name_str = re.sub('[R0=]','',R0_name_str)
        #             R0_name.append(R0_name_str)
        #             name_ratio1 = name_0[3].strip()
        #             cell_R1 = name_ratio1.split('\t')
        #             R1_name_str = str(cell_R1[0])
        #             R1_name.append(R1_name_str)
        # elif block_name == 9:
        #     global R2_name
        #     R0_name = []
        #     R1_name = []
        #     R2_name = []
        #     file = open(name, 'r')
        #     for num, line in enumerate(file, 1):
        #         if line.rstrip() == lookup_start_name_ratios:
        #             name_0 = list(islice(file, 6))
        #             name_ratio0 = name_0[1].strip()
        #             cell_R0 = name_ratio0.split('\t')
        #             R0_name_str = str(cell_R0[0])
        #             R0_name_str = re.sub('(R0=1.000000 *)','',R0_name_str)
        #             R0_name_str = re.sub('(1.000000 *)','',R0_name_str)
        #             # R0_name_str = re.sub("([L'2])",'',R0_name_str)
        #             # R0_name_str = re.sub("([H'2])",'',R0_name_str)
        #             # R0_name_str = re.sub("([H2])",'',R0_name_str)
        #             # R0_name_str = re.sub("([H1])",'',R0_name_str)
        #             # R0_name_str = re.sub("([L2])",'',R0_name_str)
        #             # R0_name_str = re.sub("([L1])",'',R0_name_str)
        #             # R0_name_str = re.sub("([C])",'',R0_name_str)
        #             # R0_name_str = re.sub("([FC1])",'',R0_name_str)
        #             # R0_name_str = re.sub("([FC2])",'',R0_name_str)
        #             # R0_name_str = re.sub("([EM])",'',R0_name_str)
        #             R0_name.append(R0_name_str)
        #             name_ratio1 = name_0[3].strip()
        #             cell_R1 = name_ratio1.split('\t')
        #             R1_name_str = str(cell_R1[0])
        #             R1_name_str = re.sub('(R1=1.000000 *)','',R1_name_str)
        #             R1_name_str = re.sub('(1.000000 *)','',R1_name_str)
        #             # R1_name_str = re.sub("([L'2])",'',R1_name_str)
        #             # R1_name_str = re.sub("([H'2])",'',R1_name_str)
        #             # R1_name_str = re.sub("([H2])",'',R1_name_str)
        #             # R1_name_str = re.sub("([H1])",'',R1_name_str)
        #             # R1_name_str = re.sub("([L2])",'',R1_name_str)
        #             # R1_name_str = re.sub("([L1])",'',R1_name_str)
        #             # R1_name_str = re.sub("([C])",'',R1_name_str)
        #             # R1_name_str = re.sub("([FC1])",'',R1_name_str)
        #             # R1_name_str = re.sub("([FC2])",'',R1_name_str)
        #             # R1_name_str = re.sub("([EM])",'',R1_name_str)
        #             R1_name.append(R1_name_str)
        #             name_ratio2 = name_0[5].strip()
        #             cell_R2 = name_ratio2.split('\t')
        #             R2_name_str = str(cell_R2[0])
        #             R2_name_str = re.sub('(R2=1.000000 *)','',R2_name_str)
        #             R2_name_str = re.sub('(1.000000 *)','',R2_name_str)
        #             # R2_name_str = re.sub("([L'2])",'',R2_name_str)
        #             # R2_name_str = re.sub("([H'2])",'',R2_name_str)
        #             # R2_name_str = re.sub("([H2])",'',R2_name_str)
        #             # R2_name_str = re.sub("([H1])",'',R2_name_str)
        #             # R2_name_str = re.sub("([L2])",'',R2_name_str)
        #             # R2_name_str = re.sub("([L1])",'',R2_name_str)
        #             # R2_name_str = re.sub("([C])",'',R2_name_str)
        #             # R2_name_str = re.sub("([FC1])",'',R2_name_str)
        #             # R2_name_str = re.sub("([FC2])",'',R2_name_str)
        #             # R2_name_str = re.sub("([EM])",'',R2_name_str)
        #             R2_name.append(R2_name_str)
        # elif block_name == 11:
        #     global R3_name
        #     R0_name = []
        #     R1_name = []
        #     R2_name = []
        #     R3_name = []
        #     file = open(name, 'r')
        #     for num, line in enumerate(file, 1):
        #         if line.rstrip() == lookup_start_name_ratios:
        #             name_0 = list(islice(file, 6))
        #             name_ratio0 = name_0[1].strip()
        #             cell_R0 = name_ratio0.split('\t')
        #             R0_name_str = str(cell_R0[0])
        #             R0_name_str = re.sub('(R0=1.000000 *)','',R0_name_str)
        #             R0_name_str = re.sub('(1.000000 *)','',R0_name_str)
        #             # R0_name_str = re.sub("([L'2])",'',R0_name_str)
        #             # R0_name_str = re.sub("([H'2])",'',R0_name_str)
        #             # R0_name_str = re.sub("([H2])",'',R0_name_str)
        #             # R0_name_str = re.sub("([H1])",'',R0_name_str)
        #             # R0_name_str = re.sub("([L2])",'',R0_name_str)
        #             # R0_name_str = re.sub("([L1])",'',R0_name_str)
        #             # R0_name_str = re.sub("([C])",'',R0_name_str)
        #             # R0_name_str = re.sub("([FC1])",'',R0_name_str)
        #             # R0_name_str = re.sub("([FC2])",'',R0_name_str)
        #             # R0_name_str = re.sub("([EM])",'',R0_name_str)
        #             R0_name.append(R0_name_str)
        #             name_ratio1 = name_0[3].strip()
        #             cell_R1 = name_ratio1.split('\t')
        #             R1_name_str = str(cell_R1[0])
        #             R1_name_str = re.sub('(R1=1.000000 *)','',R1_name_str)
        #             R1_name_str = re.sub('(1.000000 *)','',R1_name_str)
        #             # R1_name_str = re.sub("([L'2])",'',R1_name_str)
        #             # R1_name_str = re.sub("([H'2])",'',R1_name_str)
        #             # R1_name_str = re.sub("([H2])",'',R1_name_str)
        #             # R1_name_str = re.sub("([H1])",'',R1_name_str)
        #             # R1_name_str = re.sub("([L2])",'',R1_name_str)
        #             # R1_name_str = re.sub("([L1])",'',R1_name_str)
        #             # R1_name_str = re.sub("([C])",'',R1_name_str)
        #             # R1_name_str = re.sub("([FC1])",'',R1_name_str)
        #             # R1_name_str = re.sub("([FC2])",'',R1_name_str)
        #             # R1_name_str = re.sub("([EM])",'',R1_name_str)
        #             R1_name.append(R1_name_str)
        #             name_ratio2 = name_0[5].strip()
        #             cell_R2 = name_ratio2.split('\t')
        #             R2_name_str = str(cell_R2[0])
        #             R2_name_str = re.sub('(R2=1.000000 *)','',R2_name_str)
        #             R2_name_str = re.sub('(1.000000 *)','',R2_name_str)
        #             # R2_name_str = re.sub("([L'2])",'',R2_name_str)
        #             # R2_name_str = re.sub("([H'2])",'',R2_name_str)
        #             # R2_name_str = re.sub("([H2])",'',R2_name_str)
        #             # R2_name_str = re.sub("([H1])",'',R2_name_str)
        #             # R2_name_str = re.sub("([L2])",'',R2_name_str)
        #             # R2_name_str = re.sub("([L1])",'',R2_name_str)
        #             # R2_name_str = re.sub("([C])",'',R2_name_str)
        #             # R2_name_str = re.sub("([FC1])",'',R2_name_str)
        #             # R2_name_str = re.sub("([FC2])",'',R2_name_str)
        #             # R2_name_str = re.sub("([EM])",'',R2_name_str)
        #             R2_name.append(R2_name_str)
        #             name_ratio3 = name_0[7].strip()
        #             cell_R3 = name_ratio2.split('\t')
        #             R3_name_str = str(cell_R3[0])
        #             R3_name_str = re.sub('(R3=1.000000 *)','',R3_name_str)
        #             R3_name_str = re.sub('(1.000000 *)','',R3_name_str)
        #             # R3_name_str = re.sub("([L'2])",'',R3_name_str)
        #             # R3_name_str = re.sub("([H'2])",'',R3_name_str)
        #             # R3_name_str = re.sub("([H2])",'',R3_name_str)
        #             # R3_name_str = re.sub("([H1])",'',R3_name_str)
        #             # R3_name_str = re.sub("([L2])",'',R3_name_str)
        #             # R3_name_str = re.sub("([L1])",'',R3_name_str)
        #             # R3_name_str = re.sub("([C])",'',R3_name_str)
        #             # R3_name_str = re.sub("([FC1])",'',R3_name_str)
        #             # R3_name_str = re.sub("([FC2])",'',R3_name_str)
        #             # R3_name_str = re.sub("([EM])",'',R3_name_str)
        #             R3_name.append(R3_name_str)

        if block_name == 1:
            global R0
            global s0
            R0 = []
            s0 = []
            for files in name:
                file = open(files, 'r')
                for num, line in enumerate(file, 1):
                    if line.rstrip() == lookup_start_ratios:
                        ratio_0 = list(islice(file, 6))
                        ratio0 = ratio_0[5].strip()
                        columns0 = ratio0.split()
                        R0_f = float(columns0[1])
                        R0.append(R0_f)
                        s0_f = float(columns0[3])
                        s0.append(s0_f)

            global error0
            error0 = np.transpose((s0 * np.transpose(R0)) / 100)

        elif block_name == 2:
            global R1
            global s1
            R0 = []
            s0 = []
            R1 = []
            s1 = []
            for files in name:
                file = open(files, 'r')
                for num, line in enumerate(file, 1):
                    if line.rstrip() == lookup_start_ratios:
                        ratio_0 = list(islice(file, 7))
                        ratio0 = ratio_0[5].strip()
                        columns0 = ratio0.split()
                        R0_f = float(columns0[1])
                        R0.append(R0_f)
                        s0_f = float(columns0[3])
                        s0.append(s0_f)
                        ratio1 = ratio_0[6].strip()
                        columns1 = ratio1.split()
                        R1_f = float(columns1[1])
                        R1.append(R1_f)
                        s1_f = float(columns1[3])
                        s1.append(s1_f)

            global error1
            error0 = np.transpose((s0 * np.transpose(R0)) / 100)
            error1 = np.transpose((s1 * np.transpose(R1)) / 100)


        elif block_name == 3:
            global R2
            global s2
            R0 = []
            s0 = []
            R1 = []
            s1 = []
            R2 = []
            s2 = []
            for files in name:
                file = open(files, 'r')
                for num, line in enumerate(file, 1):
                    if line.rstrip() == lookup_start_ratios:
                        ratio_0 = list(islice(file, 8))
                        ratio0 = ratio_0[5].strip()
                        columns0 = ratio0.split()
                        R0_f = float(columns0[1])
                        R0.append(R0_f)
                        s0_f = float(columns0[3])
                        s0.append(s0_f)
                        ratio1 = ratio_0[6].strip()
                        columns1 = ratio1.split()
                        R1_f = float(columns1[1])
                        R1.append(R1_f)
                        s1_f = float(columns1[3])
                        s1.append(s1_f)
                        ratio2 = ratio_0[7].strip()
                        columns2 = ratio2.split()
                        R2_f = float(columns2[1])
                        R2.append(R2_f)
                        s2_f = float(columns2[3])
                        s2.append(s2_f)

            global error2
            error0 = np.transpose((s0 * np.transpose(R0)) / 100)
            error1 = np.transpose((s1 * np.transpose(R1)) / 100)
            error2 = np.transpose((s2 * np.transpose(R2)) / 100)

        elif block_name == 4:
            global R3
            global s3
            R0 = []
            s0 = []
            R1 = []
            s1 = []
            R2 = []
            s2 = []
            R3 = []
            s3 = []
            for files in name:
                file = open(files, 'r')
                for num, line in enumerate(file, 1):
                    if line.rstrip() == lookup_start_ratios:
                        ratio_0 = list(islice(file, 9))
                        ratio0 = ratio_0[5].strip()
                        columns0 = ratio0.split()
                        R0_f = float(columns0[1])
                        R0.append(R0_f)
                        s0_f = float(columns0[3])
                        s0.append(s0_f)
                        ratio1 = ratio_0[6].strip()
                        columns1 = ratio1.split()
                        R1_f = float(columns1[1])
                        R1.append(R1_f)
                        s1_f = float(columns1[3])
                        s1.append(s1_f)
                        ratio2 = ratio_0[7].strip()
                        columns2 = ratio2.split()
                        R2_f = float(columns2[1])
                        R2.append(R2_f)
                        s2_f = float(columns2[3])
                        s2.append(s2_f)
                        ratio3 = ratio_0[8].strip()
                        columns3 = ratio3.split()
                        R3_f = float(columns3[1])
                        R3.append(R3_f)
                        s3_f = float(columns3[3])
                        s3.append(s3_f)

            global error3
            error0 = np.transpose((s0 * np.transpose(R0)) / 100)
            error1 = np.transpose((s1 * np.transpose(R1)) / 100)
            error2 = np.transpose((s2 * np.transpose(R2)) / 100)
            error3 = np.transpose((s3 * np.transpose(R3)) / 100)

        elif block_name == 5:
            global R4
            global s4
            R0 = []
            s0 = []
            R1 = []
            s1 = []
            R2 = []
            s2 = []
            R3 = []
            s3 = []
            R4 = []
            s4 = []
            for files in name:
                file = open(files, 'r')
                for num, line in enumerate(file, 1):
                    if line.rstrip() == lookup_start_ratios:
                        ratio_0 = list(islice(file, 10))
                        ratio0 = ratio_0[5].strip()
                        columns0 = ratio0.split()
                        R0_f = float(columns0[1])
                        R0.append(R0_f)
                        s0_f = float(columns0[3])
                        s0.append(s0_f)
                        ratio1 = ratio_0[6].strip()
                        columns1 = ratio1.split()
                        R1_f = float(columns1[1])
                        R1.append(R1_f)
                        s1_f = float(columns1[3])
                        s1.append(s1_f)
                        ratio2 = ratio_0[7].strip()
                        columns2 = ratio2.split()
                        R2_f = float(columns2[1])
                        R2.append(R2_f)
                        s2_f = float(columns2[3])
                        s2.append(s2_f)
                        ratio3 = ratio_0[8].strip()
                        columns3 = ratio3.split()
                        R3_f = float(columns3[1])
                        R3.append(R3_f)
                        s3_f = float(columns3[3])
                        s3.append(s3_f)
                        ratio4 = ratio_0[9].strip()
                        columns4 = ratio4.split()
                        R4_f = float(columns4[1])
                        R4.append(R4_f)
                        s4_f = float(columns4[3])
                        s4.append(s4_f)

            global error4
            error0 = np.transpose((s0 * np.transpose(R0)) / 100)
            error1 = np.transpose((s1 * np.transpose(R1)) / 100)
            error2 = np.transpose((s2 * np.transpose(R2)) / 100)
            error3 = np.transpose((s3 * np.transpose(R3)) / 100)
            error4 = np.transpose((s4 * np.transpose(R4)) / 100)

        elif block_name == 6:
            global R5
            global s5
            R0 = []
            s0 = []
            R1 = []
            s1 = []
            R2 = []
            s2 = []
            R3 = []
            s3 = []
            R4 = []
            s4 = []
            R5 = []
            s5 = []
            for files in name:
                file = open(files, 'r')
                for num, line in enumerate(file, 1):
                    if line.rstrip() == lookup_start_ratios:
                        ratio_0 = list(islice(file, 11))
                        ratio0 = ratio_0[5].strip()
                        columns0 = ratio0.split()
                        R0_f = float(columns0[1])
                        R0.append(R0_f)
                        s0_f = float(columns0[3])
                        s0.append(s0_f)
                        ratio1 = ratio_0[6].strip()
                        columns1 = ratio1.split()
                        R1_f = float(columns1[1])
                        R1.append(R1_f)
                        s1_f = float(columns1[3])
                        s1.append(s1_f)
                        ratio2 = ratio_0[7].strip()
                        columns2 = ratio2.split()
                        R2_f = float(columns2[1])
                        R2.append(R2_f)
                        s2_f = float(columns2[3])
                        s2.append(s2_f)
                        ratio3 = ratio_0[8].strip()
                        columns3 = ratio3.split()
                        R3_f = float(columns3[1])
                        R3.append(R3_f)
                        s3_f = float(columns3[3])
                        s3.append(s3_f)
                        ratio4 = ratio_0[9].strip()
                        columns4 = ratio4.split()
                        R4_f = float(columns4[1])
                        R4.append(R4_f)
                        s4_f = float(columns4[3])
                        s4.append(s4_f)
                        ratio5 = ratio_0[10].strip()
                        columns5 = ratio5.split()
                        R5_f = float(columns5[1])
                        R5.append(R5_f)
                        s5_f = float(columns5[3])
                        s5.append(s5_f)

            global error5
            error0 = np.transpose((s0 * np.transpose(R0)) / 100)
            error1 = np.transpose((s1 * np.transpose(R1)) / 100)
            error2 = np.transpose((s2 * np.transpose(R2)) / 100)
            error3 = np.transpose((s3 * np.transpose(R3)) / 100)
            error4 = np.transpose((s4 * np.transpose(R4)) / 100)
            error5 = np.transpose((s5 * np.transpose(R5)) / 100)

        elif block_name == 7:
            global R6
            global s6
            R0 = []
            s0 = []
            R1 = []
            s1 = []
            R2 = []
            s2 = []
            R3 = []
            s3 = []
            R4 = []
            s4 = []
            R5 = []
            s5 = []
            R6 = []
            s6 = []
            for files in name:
                file = open(files, 'r')
                for num, line in enumerate(file, 1):
                    if line.rstrip() == lookup_start_ratios:
                        ratio_0 = list(islice(file, 12))
                        ratio0 = ratio_0[5].strip()
                        columns0 = ratio0.split()
                        R0_f = float(columns0[1])
                        R0.append(R0_f)
                        s0_f = float(columns0[3])
                        s0.append(s0_f)
                        ratio1 = ratio_0[6].strip()
                        columns1 = ratio1.split()
                        R1_f = float(columns1[1])
                        R1.append(R1_f)
                        s1_f = float(columns1[3])
                        s1.append(s1_f)
                        ratio2 = ratio_0[7].strip()
                        columns2 = ratio2.split()
                        R2_f = float(columns2[1])
                        R2.append(R2_f)
                        s2_f = float(columns2[3])
                        s2.append(s2_f)
                        ratio3 = ratio_0[8].strip()
                        columns3 = ratio3.split()
                        R3_f = float(columns3[1])
                        R3.append(R3_f)
                        s3_f = float(columns3[3])
                        s3.append(s3_f)
                        ratio4 = ratio_0[9].strip()
                        columns4 = ratio4.split()
                        R4_f = float(columns4[1])
                        R4.append(R4_f)
                        s4_f = float(columns4[3])
                        s4.append(s4_f)
                        ratio5 = ratio_0[10].strip()
                        columns5 = ratio5.split()
                        R5_f = float(columns5[1])
                        R5.append(R5_f)
                        s5_f = float(columns5[3])
                        s5.append(s5_f)
                        ratio6 = ratio_0[11].strip()
                        columns6 = ratio6.split()
                        R6_f = float(columns6[1])
                        R6.append(R6_f)
                        s6_f = float(columns6[3])
                        s6.append(s6_f)
            if Isotopic_system_value == 8:
                global Cycles_Mat
                global cycles_24Mg
                global cycles_25Mg
                global cycles_26Mg
                global cycles_25
                global cycles_26
                global cycles_27Al
                global d26
                global d25
                global d26_25
                global D26
                global d25Mg
                global sd_d25Mg
                global mean_d25Mg
                global d26Mg
                global sd_d26Mg
                global mean_d26Mg
                global d26_25Mg
                global sd_d26_25Mg
                global mean_d26_25Mg
                global D26Mg
                global sd_D26Mg
                global mean_D26Mg
                global ratio_27Al_24Mg
                global sd_27Al_24Mg
                global half_25
                global sd_half_25
                global mean_half_25
                global half_26
                global sd_half_26
                global mean_half_26
                global se_D26Mg
                global Bckg_avg_24Mg
                Bckg_avg_24Mg = []
                Cycle = []
                n = []
                Cycles_Mat = []
                for x in range(len(n_cycles)):
                    if number_of_cycles == 0:
                        n = n_cycles[x] + 5
                        Cycle = range(n_cycles[x])
                    elif number_of_cycles == 1:
                        if n_cycles[x] >= n_cycles_set:
                            n = n_cycles_set + 5
                            Cycle = range(n_cycles_set)
                        elif n_cycles[x] <= n_cycles_set:
                            n = n_cycles[x] + 5
                            Cycle = range(n_cycles[x])
                    file = open(name[x], 'r')
                    if x == 0:
                        Bckg_avg_24Mg.append(np.asarray(Bkg_Lp2[x]) - np.mean(Bkg_Lp2[x:x+5]))
                    elif x == 1:
                        Bckg_avg_24Mg.append(np.asarray(Bkg_Lp2[x]) - np.mean(Bkg_Lp2[x-1:x+5]))
                    elif x == 2:
                        Bckg_avg_24Mg.append(np.asarray(Bkg_Lp2[x]) - np.mean(Bkg_Lp2[x-2:x+5]))
                    else:
                        Bckg_avg_24Mg.append(np.asarray(Bkg_Lp2[x]) - np.mean(Bkg_Lp2[x-3:x+5]))
                    cycles_24Mg = []
                    cycles_25Mg = []
                    cycles_26Mg = []
                    cycles_25 = []
                    cycles_26 = []
                    cycles_27Al = []
                    for num, line in enumerate(file, 1):
                        if line.rstrip() == lookup_start_cycles:
                            cycles = list(islice(file, n))
                            line_name_species_cycles = cycles[3]
                            name_species = line_name_species_cycles.split('\t')
                            name_species_1 = name_species[1]
                            name_species_2 = name_species[2]
                            name_species_3 = name_species[3]
                            name_species_4 = name_species[4]
                            name_species_5 = name_species[5]
                            name_species_6 = name_species[6]
                            for i in range(5, n):
                                cycles_b = cycles[i].split()
                                cycles_24Mg.append(float(cycles_b[2]))
                                cycles_25Mg.append(float(cycles_b[3]))
                                cycles_26Mg.append(float(cycles_b[4]))
                                cycles_25.append(float(cycles_b[5]))
                                cycles_26.append(float(cycles_b[6]))
                                cycles_27Al.append(float(cycles_b[7]))
                       
                    Cycles_Mat.append(pd.DataFrame({'Filename' : Filename[x], 'Comment' : Comment[x], 'Time (h)' : Time[x], 'Bckg Lp2' : Bckg_avg_24Mg[x], 'cycles' : Cycle, '24Mg' : cycles_24Mg, '25Mg' : cycles_25Mg, '26Mg' : cycles_26Mg, '25' : cycles_25, '26' : cycles_26, '27Al' : cycles_27Al}))     


            global error6
            error0 = np.transpose((s0 * np.transpose(R0)) / 100)
            error1 = np.transpose((s1 * np.transpose(R1)) / 100)
            error2 = np.transpose((s2 * np.transpose(R2)) / 100)
            error3 = np.transpose((s3 * np.transpose(R3)) / 100)
            error4 = np.transpose((s4 * np.transpose(R4)) / 100)
            error5 = np.transpose((s5 * np.transpose(R5)) / 100)
            error6 = np.transpose((s6 * np.transpose(R6)) / 100)


        elif block_name == 8:
            global R7
            global s7
            R0 = []
            s0 = []
            R1 = []
            s1 = []
            R2 = []
            s2 = []
            R3 = []
            s3 = []
            R4 = []
            s4 = []
            R5 = []
            s5 = []
            R6 = []
            s6 = []
            R7 = []
            s7 = []
            for files in name:
                file = open(files, 'r')
                for num, line in enumerate(file, 1):
                    if line.rstrip() == lookup_start_ratios:
                        ratio_0 = list(islice(file, 13))
                        ratio0 = ratio_0[5].strip()
                        columns0 = ratio0.split()
                        R0_f = float(columns0[1])
                        R0.append(R0_f)
                        s0_f = float(columns0[3])
                        s0.append(s0_f)
                        ratio1 = ratio_0[6].strip()
                        columns1 = ratio1.split()
                        R1_f = float(columns1[1])
                        R1.append(R1_f)
                        s1_f = float(columns1[3])
                        s1.append(s1_f)
                        ratio2 = ratio_0[7].strip()
                        columns2 = ratio2.split()
                        R2_f = float(columns2[1])
                        R2.append(R2_f)
                        s2_f = float(columns2[3])
                        s2.append(s2_f)
                        ratio3 = ratio_0[8].strip()
                        columns3 = ratio3.split()
                        R3_f = float(columns3[1])
                        R3.append(R3_f)
                        s3_f = float(columns3[3])
                        s3.append(s3_f)
                        ratio4 = ratio_0[9].strip()
                        columns4 = ratio4.split()
                        R4_f = float(columns4[1])
                        R4.append(R4_f)
                        s4_f = float(columns4[3])
                        s4.append(s4_f)
                        ratio5 = ratio_0[10].strip()
                        columns5 = ratio5.split()
                        R5_f = float(columns5[1])
                        R5.append(R5_f)
                        s5_f = float(columns5[3])
                        s5.append(s5_f)
                        ratio6 = ratio_0[11].strip()
                        columns6 = ratio6.split()
                        R6_f = float(columns6[1])
                        R6.append(R6_f)
                        s6_f = float(columns6[3])
                        s6.append(s6_f)
                        ratio7 = ratio_0[12].strip()
                        columns7 = ratio7.split()
                        R7_f = float(columns7[1])
                        R7.append(R7_f)
                        s7_f = float(columns7[3])
                        s7.append(s7_f)
            # if Isotopic_system_value == 9:
            #     cycles_24Mg = []
            #     cycles_25Mg = []
            #     cycles_26Mg = []
            #     cycles_24 = []
            #     cycles_25 = []
            #     cycles_26 = []
            #     cycles_27Al = []
            #     n_cycles =  []
            #     for x in range(len(n_cycles)):
            #         n = n_cycles[x] + 5
            #         file = open(name[x], 'r')
            #         for num, line in enumerate(file, 1):
            #             if line.rstrip() == lookup_start_cycles:
            #                 cycles = list(islice(file, n))
            #                 for i in range(5, n):
            #                     cycles_b = cycles[i].split()
            #                     cycles_24Mg.append(float(cycles_b[2]))
            #                     cycles_25Mg.append(float(cycles_b[3]))
            #                     cycles_26Mg.append(float(cycles_b[4]))
            #                     cycles_24.append(float(cycles_b[6]))
            #                     cycles_25.append(float(cycles_b[7]))
            #                     cycles_26.append(float(cycles_b[5]))
            #                     cycles_27Al.append(float(cycles_b[8]))

            
            global error7
            error0 = np.transpose((s0 * np.transpose(R0)) / 100)
            error1 = np.transpose((s1 * np.transpose(R1)) / 100)
            error2 = np.transpose((s2 * np.transpose(R2)) / 100)
            error3 = np.transpose((s3 * np.transpose(R3)) / 100)
            error4 = np.transpose((s4 * np.transpose(R4)) / 100)
            error5 = np.transpose((s5 * np.transpose(R5)) / 100)
            error6 = np.transpose((s6 * np.transpose(R6)) / 100)
            error7 = np.transpose((s7 * np.transpose(R7)) / 100)

        elif block_name == 9:
            global R8
            global s8
            R0 = []
            s0 = []
            R1 = []
            s1 = []
            R2 = []
            s2 = []
            R3 = []
            s3 = []
            R4 = []
            s4 = []
            R5 = []
            s5 = []
            R6 = []
            s6 = []
            R7 = []
            s7 = []
            R8 = []
            s8 = []
            for files in name:
                file = open(files, 'r')
                for num, line in enumerate(file, 1):
                    if line.rstrip() == lookup_start_ratios:
                        ratio_0 = list(islice(file, 14))
                        ratio0 = ratio_0[5].strip()
                        columns0 = ratio0.split()
                        R0_f = float(columns0[1])
                        R0.append(R0_f)
                        s0_f = float(columns0[3])
                        s0.append(s0_f)
                        ratio1 = ratio_0[6].strip()
                        columns1 = ratio1.split()
                        R1_f = float(columns1[1])
                        R1.append(R1_f)
                        s1_f = float(columns1[3])
                        s1.append(s1_f)
                        ratio2 = ratio_0[7].strip()
                        columns2 = ratio2.split()
                        R2_f = float(columns2[1])
                        R2.append(R2_f)
                        s2_f = float(columns2[3])
                        s2.append(s2_f)
                        ratio3 = ratio_0[8].strip()
                        columns3 = ratio3.split()
                        R3_f = float(columns3[1])
                        R3.append(R3_f)
                        s3_f = float(columns3[3])
                        s3.append(s3_f)
                        ratio4 = ratio_0[9].strip()
                        columns4 = ratio4.split()
                        R4_f = float(columns4[1])
                        R4.append(R4_f)
                        s4_f = float(columns4[3])
                        s4.append(s4_f)
                        ratio5 = ratio_0[10].strip()
                        columns5 = ratio5.split()
                        R5_f = float(columns5[1])
                        R5.append(R5_f)
                        s5_f = float(columns5[3])
                        s5.append(s5_f)
                        ratio6 = ratio_0[11].strip()
                        columns6 = ratio6.split()
                        R6_f = float(columns6[1])
                        R6.append(R6_f)
                        s6_f = float(columns6[3])
                        s6.append(s6_f)
                        ratio7 = ratio_0[12].strip()
                        columns7 = ratio7.split()
                        R7_f = float(columns7[1])
                        R7.append(R7_f)
                        s7_f = float(columns7[3])
                        s7.append(s7_f)
                        ratio8 = ratio_0[13].strip()
                        columns8 = ratio8.split()
                        R8_f = float(columns8[1])
                        R8.append(R8_f)
                        s8_f = float(columns8[3])
                        s8.append(s8_f)
            
            global error8
            error0 = np.transpose((s0 * np.transpose(R0)) / 100)
            error1 = np.transpose((s1 * np.transpose(R1)) / 100)
            error2 = np.transpose((s2 * np.transpose(R2)) / 100)
            error3 = np.transpose((s3 * np.transpose(R3)) / 100)
            error4 = np.transpose((s4 * np.transpose(R4)) / 100)
            error5 = np.transpose((s5 * np.transpose(R5)) / 100)
            error6 = np.transpose((s6 * np.transpose(R6)) / 100)
            error7 = np.transpose((s7 * np.transpose(R7)) / 100)
            error8 = np.transpose((s8 * np.transpose(R8)) / 100)


        if n_masses == 1:
            tst = 10
        elif n_masses == 2:
            Cycles_Mat = []
            for x in range(len(n_cycles)):
                if number_of_cycles == 0:
                    n = n_cycles[x] + 5
                    Cycle = range(n_cycles[x])
                elif number_of_cycles == 1:
                    if n_cycles[x] >= n_cycles_set:
                        n = n_cycles_set + 5
                        Cycle = range(n_cycles_set)
                    elif n_cycles[x] <= n_cycles_set:
                        n = n_cycles[x] + 5
                        Cycle = range(n_cycles[x])
                file = open(name[x], 'r')
                name_species_1 = []
                name_species_2 = []
                cycles_species_1 = []
                cycles_species_2 = []
                for num, line in enumerate(file, 1):
                    if line.rstrip() == lookup_start_cycles:
                        cycles = list(islice(file, n))
                        line_name_species_cycles = cycles[3]
                        name_species = line_name_species_cycles.split('\t')
                        name_species_1 = name_species[1]
                        name_species_2 = name_species[2]
                        for i in range(5, n):
                            cycles_b = cycles[i].split()
                            cycles_species_1.append(float(cycles_b[2]))
                            cycles_species_2.append(float(cycles_b[3]))
        elif n_masses == 3:
            Cycles_Mat = []
            for x in range(len(n_cycles)):
                if number_of_cycles == 0:
                    n = n_cycles[x] + 5
                    Cycle = range(n_cycles[x])
                elif number_of_cycles == 1:
                    if n_cycles[x] >= n_cycles_set:
                        n = n_cycles_set + 5
                        Cycle = range(n_cycles_set)
                    elif n_cycles[x] <= n_cycles_set:
                        n = n_cycles[x] + 5
                        Cycle = range(n_cycles[x])
                file = open(name[x], 'r')
                name_species_1 = []
                name_species_2 = []
                name_species_3 = []
                cycles_species_1 = []
                cycles_species_2 = []
                cycles_species_3 = []
                for num, line in enumerate(file, 1):
                    if line.rstrip() == lookup_start_cycles:
                        cycles = list(islice(file, n))
                        line_name_species_cycles = cycles[3]
                        name_species = line_name_species_cycles.split('\t')
                        name_species_1 = re.sub("^\s+|\s+$", "", name_species[1], flags=re.UNICODE)
                        name_species_2 = re.sub("^\s+|\s+$", "", name_species[2], flags=re.UNICODE)
                        name_species_3 = re.sub("^\s+|\s+$", "", name_species[3], flags=re.UNICODE)
                        for i in range(5, n):
                            cycles_b = cycles[i].split()
                            cycles_species_1.append(float(cycles_b[2]))
                            cycles_species_2.append(float(cycles_b[3]))
                            cycles_species_3.append(float(cycles_b[4]))
                Cycles_Mat.append(pd.DataFrame({'Filename' : Filename[x], 'Comment' : Comment[x], 'Time (h)' : Time[x], 'cycles' : Cycle, name_species_1 : cycles_species_1, name_species_2 : cycles_species_2, name_species_3 : cycles_species_3})) 
        elif n_masses == 4:
            Cycles_Mat = []
            for x in range(len(n_cycles)):
                if number_of_cycles == 0:
                    n = n_cycles[x] + 5
                    Cycle = range(n_cycles[x])
                elif number_of_cycles == 1:
                    if n_cycles[x] >= n_cycles_set:
                        n = n_cycles_set + 5
                        Cycle = range(n_cycles_set)
                    elif n_cycles[x] <= n_cycles_set:
                        n = n_cycles[x] + 5
                        Cycle = range(n_cycles[x])
                file = open(name[x], 'r')
                name_species_1 = []
                name_species_2 = []
                name_species_3 = []
                name_species_4 = []
                cycles_species_1 = []
                cycles_species_2 = []
                cycles_species_3 = []
                cycles_species_4 = []
                for num, line in enumerate(file, 1):
                    if line.rstrip() == lookup_start_cycles:
                        cycles = list(islice(file, n))
                        line_name_species_cycles = cycles[3]
                        name_species = line_name_species_cycles.split('\t')
                        name_species_1 = name_species[1]
                        name_species_2 = name_species[2]
                        name_species_3 = name_species[3]
                        name_species_4 = name_species[4]
                        for i in range(5, n):
                            cycles_b = cycles[i].split()
                            cycles_species_1.append(float(cycles_b[2]))
                            cycles_species_2.append(float(cycles_b[3]))
                            cycles_species_3.append(float(cycles_b[4]))
                            cycles_species_4.append(float(cycles_b[5]))
                Cycles_Mat.append(pd.DataFrame({'Filename' : Filename[x], 'Comment' : Comment[x], 'Time (h)' : Time[x], 'cycles' : Cycle, name_species_1 : cycles_species_1, name_species_2 : cycles_species_2, name_species_3 : cycles_species_3, name_species_4 : cycles_species_4})) 
        elif n_masses == 5:
            Cycles_Mat = []
            for x in range(len(n_cycles)):
                if number_of_cycles == 0:
                    n = n_cycles[x] + 5
                    Cycle = range(n_cycles[x])
                elif number_of_cycles == 1:
                    if n_cycles[x] >= n_cycles_set:
                        n = n_cycles_set + 5
                        Cycle = range(n_cycles_set)
                    elif n_cycles[x] <= n_cycles_set:
                        n = n_cycles[x] + 5
                        Cycle = range(n_cycles[x])
                file = open(name[x], 'r')
                name_species_1 = []
                name_species_2 = []
                name_species_3 = []
                name_species_4 = []
                name_species_5 = []
                cycles_species_1 = []
                cycles_species_2 = []
                cycles_species_3 = []
                cycles_species_4 = []
                cycles_species_5 = []
                for num, line in enumerate(file, 1):
                    if line.rstrip() == lookup_start_cycles:
                        cycles = list(islice(file, n))
                        line_name_species_cycles = cycles[3]
                        name_species = line_name_species_cycles.split('\t')
                        name_species_1 = name_species[1]
                        name_species_2 = name_species[2]
                        name_species_3 = name_species[3]
                        name_species_4 = name_species[4]
                        name_species_5 = name_species[5]
                        for i in range(5, n):
                            cycles_b = cycles[i].split()
                            cycles_species_1.append(float(cycles_b[2]))
                            cycles_species_2.append(float(cycles_b[3]))
                            cycles_species_3.append(float(cycles_b[4]))
                            cycles_species_4.append(float(cycles_b[5]))
                            cycles_species_5.append(float(cycles_b[6]))
                Cycles_Mat.append(pd.DataFrame({'Filename' : Filename[x], 'Comment' : Comment[x], 'Time (h)' : Time[x], 'cycles' : Cycle, name_species_1 : cycles_species_1, name_species_2 : cycles_species_2, name_species_3 : cycles_species_3, name_species_4 : cycles_species_4, name_species_5 : cycles_species_5})) 
        # elif n_masses == 6:
        #     Cycles_Mat = []
        #     for x in range(len(n_cycles)):
        #         n = n_cycles[x] + 5
        #         file = open(name[x], 'r')
        #         Cycle = range(n_cycles[x])
        #         name_species_1 = []
        #         name_species_2 = []
        #         name_species_3 = []
        #         name_species_4 = []
        #         name_species_5 = []
        #         name_species_6 = []
        #         cycles_species_1 = []
        #         cycles_species_2 = []
        #         cycles_species_3 = []
        #         cycles_species_4 = []
        #         cycles_species_5 = []
        #         cycles_species_6 = []
        #         for num, line in enumerate(file, 1):
        #             if line.rstrip() == lookup_start_cycles:
        #                 cycles = list(islice(file, n))
        #                 line_name_species_cycles = cycles[3]
        #                 name_species = line_name_species_cycles.split('\t')
        #                 name_species_1 = name_species[1]
        #                 name_species_2 = name_species[2]
        #                 name_species_3 = name_species[3]
        #                 name_species_4 = name_species[4]
        #                 name_species_5 = name_species[5]
        #                 name_species_6 = name_species[6]
        #                 for i in range(5, n):
        #                     cycles_b = cycles[i].split()
        #                     cycles_species_1.append(float(cycles_b[2]))
        #                     cycles_species_2.append(float(cycles_b[3]))
        #                     cycles_species_3.append(float(cycles_b[4]))
        #                     cycles_species_4.append(float(cycles_b[5]))
        #                     cycles_species_5.append(float(cycles_b[6]))
        #                     cycles_species_6.append(float(cycles_b[7]))
        #         Cycles_Mat.append(pd.DataFrame({'Filename' : Filename[x], 'Comment' : Comment[x], 'Time (h)' : Time[x], 'cycles' : Cycle, name_species_1 : cycles_species_1, name_species_2 : cycles_species_2, name_species_3 : cycles_species_3, name_species_4 : cycles_species_4, name_species_5 : cycles_species_5, name_species_6 : cycles_species_6})) 
        elif n_masses == 7:
            Cycles_Mat = []
            for x in range(len(n_cycles)):
                if number_of_cycles == 0:
                    n = n_cycles[x] + 5
                    Cycle = range(n_cycles[x])
                elif number_of_cycles == 1:
                    if n_cycles[x] >= n_cycles_set:
                        n = n_cycles_set + 5
                        Cycle = range(n_cycles_set)
                    elif n_cycles[x] <= n_cycles_set:
                        n = n_cycles[x] + 5
                        Cycle = range(n_cycles[x])
                file = open(name[x], 'r')
                name_species_1 = []
                name_species_2 = []
                name_species_3 = []
                name_species_4 = []
                name_species_5 = []
                name_species_6 = []
                name_species_7 = []
                cycles_species_1 = []
                cycles_species_2 = []
                cycles_species_3 = []
                cycles_species_4 = []
                cycles_species_5 = []
                cycles_species_6 = []
                cycles_species_7 = []
                for num, line in enumerate(file, 1):
                    if line.rstrip() == lookup_start_cycles:
                        cycles = list(islice(file, n))
                        line_name_species_cycles = cycles[3]
                        name_species = line_name_species_cycles.split('\t')
                        name_species_1 = name_species[1]
                        name_species_2 = name_species[2]
                        name_species_3 = name_species[3]
                        name_species_4 = name_species[4]
                        name_species_5 = name_species[5]
                        name_species_6 = name_species[6]
                        name_species_7 = name_species[7]
                        for i in range(5, n):
                            cycles_b = cycles[i].split()
                            cycles_species_1.append(float(cycles_b[2]))
                            cycles_species_2.append(float(cycles_b[3]))
                            cycles_species_3.append(float(cycles_b[4]))
                            cycles_species_4.append(float(cycles_b[5]))
                            cycles_species_5.append(float(cycles_b[6]))
                            cycles_species_6.append(float(cycles_b[7]))
                            cycles_species_7.append(float(cycles_b[8]))
                Cycles_Mat.append(pd.DataFrame({'Filename' : Filename[x], 'Comment' : Comment[x], 'Time (h)' : Time[x], 'cycles' : Cycle, '24Mg' : cycles_species_1, '25Mg' : cycles_species_2, '26Mg' : cycles_species_3, '26' : cycles_species_4, '24' : cycles_species_5, '25' : cycles_species_6, '27Al' : cycles_species_7})) 
        elif n_masses == 8:
            Cycles_Mat = []
            for x in range(len(n_cycles)):
                if number_of_cycles == 0:
                    n = n_cycles[x] + 5
                    Cycle = range(n_cycles[x])
                elif number_of_cycles == 1:
                    if n_cycles[x] >= n_cycles_set:
                        n = n_cycles_set + 5
                        Cycle = range(n_cycles_set)
                    elif n_cycles[x] <= n_cycles_set:
                        n = n_cycles[x] + 5
                        Cycle = range(n_cycles[x])
                file = open(name[x], 'r')
                name_species_1 = []
                name_species_2 = []
                name_species_3 = []
                name_species_4 = []
                name_species_5 = []
                name_species_6 = []
                name_species_7 = []
                name_species_8 = []
                cycles_species_1 = []
                cycles_species_2 = []
                cycles_species_3 = []
                cycles_species_4 = []
                cycles_species_5 = []
                cycles_species_6 = []
                cycles_species_7 = []
                cycles_species_8 = []
                for num, line in enumerate(file, 1):
                    if line.rstrip() == lookup_start_cycles:
                        cycles = list(islice(file, n))
                        line_name_species_cycles = cycles[3]
                        name_species = line_name_species_cycles.split('\t')
                        name_species_1 = name_species[1]
                        name_species_2 = name_species[2]
                        name_species_3 = name_species[3]
                        name_species_4 = name_species[4]
                        name_species_5 = name_species[5]
                        name_species_6 = name_species[6]
                        name_species_7 = name_species[7]
                        name_species_8 = name_species[8]
                        for i in range(5, n):
                            cycles_b = cycles[i].split()
                            cycles_species_1.append(float(cycles_b[2]))
                            cycles_species_2.append(float(cycles_b[3]))
                            cycles_species_3.append(float(cycles_b[4]))
                            cycles_species_4.append(float(cycles_b[5]))
                            cycles_species_5.append(float(cycles_b[6]))
                            cycles_species_6.append(float(cycles_b[7]))
                            cycles_species_7.append(float(cycles_b[8]))
                            cycles_species_8.append(float(cycles_b[9]))
                Cycles_Mat.append(pd.DataFrame({'Filename' : Filename[x], 'Comment' : Comment[x], 'Time (h)' : Time[x], 'cycles' : Cycle, name_species_1 : cycles_species_1, name_species_2 : cycles_species_2, name_species_3 : cycles_species_3, name_species_4 : cycles_species_4, name_species_5 : cycles_species_5, name_species_6 : cycles_species_6, name_species_7 : cycles_species_7, name_species_8 : cycles_species_8})) 
        elif n_masses == 9:
            Cycles_Mat = []
            for x in range(len(n_cycles)):
                if number_of_cycles == 0:
                    n = n_cycles[x] + 5
                    Cycle = range(n_cycles[x])
                elif number_of_cycles == 1:
                    if n_cycles[x] >= n_cycles_set:
                        n = n_cycles_set + 5
                        Cycle = range(n_cycles_set)
                    elif n_cycles[x] <= n_cycles_set:
                        n = n_cycles[x] + 5
                        Cycle = range(n_cycles[x])
                file = open(name[x], 'r')
                name_species_1 = []
                name_species_2 = []
                name_species_3 = []
                name_species_4 = []
                name_species_5 = []
                name_species_6 = []
                name_species_7 = []
                name_species_8 = []
                name_species_9 = []
                cycles_species_1 = []
                cycles_species_2 = []
                cycles_species_3 = []
                cycles_species_4 = []
                cycles_species_5 = []
                cycles_species_6 = []
                cycles_species_7 = []
                cycles_species_8 = []
                cycles_species_9 = []
                for num, line in enumerate(file, 1):
                    if line.rstrip() == lookup_start_cycles:
                        cycles = list(islice(file, n))
                        line_name_species_cycles = cycles[3]
                        name_species = line_name_species_cycles.split('\t')
                        name_species_1 = name_species[1]
                        name_species_2 = name_species[2]
                        name_species_3 = name_species[3]
                        name_species_4 = name_species[4]
                        name_species_5 = name_species[5]
                        name_species_6 = name_species[6]
                        name_species_7 = name_species[7]
                        name_species_8 = name_species[8]
                        name_species_9 = name_species[9]
                        for i in range(5, n):
                            cycles_b = cycles[i].split()
                            cycles_species_1.append(float(cycles_b[2]))
                            cycles_species_2.append(float(cycles_b[3]))
                            cycles_species_3.append(float(cycles_b[4]))
                            cycles_species_4.append(float(cycles_b[5]))
                            cycles_species_5.append(float(cycles_b[6]))
                            cycles_species_6.append(float(cycles_b[7]))
                            cycles_species_7.append(float(cycles_b[8]))
                            cycles_species_8.append(float(cycles_b[9]))
                            cycles_species_9.append(float(cycles_b[10]))
                Cycles_Mat.append(pd.DataFrame({'Filename' : Filename[x], 'Comment' : Comment[x], 'Time (h)' : Time[x], 'cycles' : Cycle, name_species_1 : cycles_species_1, name_species_2 : cycles_species_2, name_species_3 : cycles_species_3, name_species_4 : cycles_species_4, name_species_5 : cycles_species_5, name_species_6 : cycles_species_6, name_species_7 : cycles_species_7, name_species_8 : cycles_species_8, name_species_9 : cycles_species_9})) 

        global Cycles_tot
        global new_Cycles_tot
        global Cycles_section
        if Deadtime_new ==  0:
            Cycles_tot = []
            Cycles_tot = pd.concat(Cycles_Mat)
        elif Deadtime_new == 1:
            pass
        if Isotopic_system_value == 1:
            Ratio_2H_1H = Cycles_tot['2H'] / Cycles_tot['1H']
            Cycles_tot = Cycles_tot.assign(Ratio_2H_1H=Ratio_2H_1H.values)
        elif Isotopic_system_value == 2:
            Ratio_7Li_6Li = Cycles_tot['7Li'] / Cycles_tot['6Li']
            Cycles_tot = Cycles_tot.assign(Ratio_7Li_6Li=Ratio_7Li_6Li.values)
        elif Isotopic_system_value == 3:
            Ratio_11B_10B = Cycles_tot['11B'] / Cycles_tot['10B']
            Cycles_tot = Cycles_tot.assign(Ratio_11B_10B=Ratio_11B_10B.values)
        elif Isotopic_system_value == 4:
            Ratio_13C_12C = Cycles_tot['13C'] / Cycles_tot['12C']
            Cycles_tot = Cycles_tot.assign(Ratio_13C_12C=Ratio_13C_12C.values)
        elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
            Ratio_18O_16O = Cycles_tot['18O'] / Cycles_tot['16O']
            Cycles_tot = Cycles_tot.assign(Ratio_18O_16O=Ratio_18O_16O.values)
        elif Isotopic_system_value == 7:
            Ratio_37Cl_35Cl = Cycles_tot['37Cl'] / Cycles_tot['35Cl']
            Cycles_tot = Cycles_tot.assign(Ratio_37Cl_35Cl=Ratio_37Cl_35Cl.values)
        elif Isotopic_system_value == 8:
            global mean_27Al_24Mg
            global se_27Al_24Mg
            if Input_Mat_mod == 0:
                if Deadtime_new == 0:
                    if Section_value == 0:
                        d26 = (Cycles_tot['26Mg'] / (Cycles_tot['24Mg'] + Cycles_tot['Bckg Lp2'])/ 0.13932).values
                        d25 = (Cycles_tot['25Mg'] / (Cycles_tot['24Mg'] + Cycles_tot['Bckg Lp2'])/ 0.12663).values
                    elif Section_value == 1:
                        d26 = (Cycles_section['26Mg'] / (Cycles_section['24Mg'] + Cycles_section['Bckg Lp2'])/ 0.13932).values
                        d25 = (Cycles_section['25Mg'] / (Cycles_section['24Mg'] + Cycles_section['Bckg Lp2'])/ 0.12663).values
                    d26_25 = np.asarray(d26) / np.asarray(d25)
                    D26 = np.asarray(d26) / np.asarray(d25) ** (1 / 0.5128)
                    d25Mg = (np.asarray(d25) - 1) * 1000
                    d26Mg = (np.asarray(d26) - 1) * 1000
                    d26_25Mg = (np.asarray(d26_25) - 1) * 1000
                    D26Mg = (np.asarray(D26) - 1) * 1000
                    if Section_value == 0:
                        ratio_27Al_24Mg = Cycles_tot['27Al'] / Cycles_tot['24Mg']
                        half_25 = Cycles_tot['25'] / Cycles_tot['25Mg']
                        half_26 = Cycles_tot['26'] / Cycles_tot['26Mg']
                        Cycles_tot = Cycles_tot.assign(Ratio_27Al_24Mg=ratio_27Al_24Mg.values)
                        Cycles_tot = Cycles_tot.assign(D26Mg=D26Mg)
                        Cycles_tot = Cycles_tot.assign(d25Mg=d25Mg)
                        Cycles_tot = Cycles_tot.assign(d26Mg=d26Mg)
                        Cycles_tot = Cycles_tot.assign(half_25=half_25.values)
                        Cycles_tot = Cycles_tot.assign(half_26=half_26.values)
                    elif Section_value == 1:
                        ratio_27Al_24Mg = Cycles_section['27Al'] / Cycles_section['24Mg']
                        half_25 = Cycles_section['25'] / Cycles_section['25Mg']
                        half_26 = Cycles_section['26'] / Cycles_section['26Mg']
                        Cycles_section = Cycles_section.assign(Ratio_27Al_24Mg=ratio_27Al_24Mg.values)
                        Cycles_section = Cycles_section.assign(D26Mg=D26Mg)
                        Cycles_section = Cycles_section.assign(d25Mg=d25Mg)
                        Cycles_section = Cycles_section.assign(d26Mg=d26Mg)
                        Cycles_section = Cycles_section.assign(half_25=half_25.values)
                        Cycles_section = Cycles_section.assign(half_26=half_26.values)
                elif Deadtime_new == 1:
                    if Section_value == 0:
                        d26 = (Cycles_tot['cycles_26Mg_mod'] / (Cycles_tot['24Mg'] + Cycles_tot['Bckg Lp2'])/ 0.13932).values
                        d25 = (Cycles_tot['cycles_25Mg_mod'] / (Cycles_tot['24Mg'] + Cycles_tot['Bckg Lp2'])/ 0.12663).values
                    elif Section_value == 1:
                        d26 = (Cycles_section['cycles_26Mg_mod'] / (Cycles_section['24Mg'] + Cycles_section['Bckg Lp2'])/ 0.13932).values
                        d25 = (Cycles_section['cycles_25Mg_mod'] / (Cycles_section['24Mg'] + Cycles_section['Bckg Lp2'])/ 0.12663).values
                    d26_25 = np.asarray(d26) / np.asarray(d25)
                    D26 = np.asarray(d26) / np.asarray(d25) ** (1 / 0.5128)
                    d25Mg = (np.asarray(d25) - 1) * 1000
                    d26Mg = (np.asarray(d26) - 1) * 1000
                    d26_25Mg = (np.asarray(d26_25) - 1) * 1000
                    D26Mg = (np.asarray(D26) - 1) * 1000
                    if Section_value == 0:
                        ratio_27Al_24Mg = Cycles_tot['27Al'] / Cycles_tot['24Mg']
                        half_25 = Cycles_tot['25'] / Cycles_tot['cycles_25Mg_mod']
                        half_26 = Cycles_tot['26'] / Cycles_tot['cycles_26Mg_mod']
                        Cycles_tot = Cycles_tot.assign(Ratio_27Al_24Mg=ratio_27Al_24Mg.values)
                        Cycles_tot = Cycles_tot.assign(D26Mg=D26Mg)
                        Cycles_tot = Cycles_tot.assign(d25Mg=d25Mg)
                        Cycles_tot = Cycles_tot.assign(d26Mg=d26Mg)
                        Cycles_tot = Cycles_tot.assign(half_25=half_25.values)
                        Cycles_tot = Cycles_tot.assign(half_26=half_26.values)
                    elif Section_value == 1:
                        ratio_27Al_24Mg = Cycles_section['27Al'] / Cycles_section['24Mg']
                        half_25 = Cycles_section['25'] / Cycles_section['cycles_25Mg_mod']
                        half_26 = Cycles_section['26'] / Cycles_section['cycles_26Mg_mod']
                        Cycles_section = Cycles_section.assign(Ratio_27Al_24Mg=ratio_27Al_24Mg.values)
                        Cycles_section = Cycles_section.assign(D26Mg=D26Mg)
                        Cycles_section = Cycles_section.assign(d25Mg=d25Mg)
                        Cycles_section = Cycles_section.assign(d26Mg=d26Mg)
                        Cycles_section = Cycles_section.assign(half_25=half_25.values)
                        Cycles_section = Cycles_section.assign(half_26=half_26.values)
            elif Input_Mat_mod == 1:
                if Deadtime_new == 0:
                    if Section_value == 0:
                        d26 = (new_Cycles_tot['26Mg'] / (new_Cycles_tot['24Mg'] + new_Cycles_tot['Bckg Lp2'])/ 0.13932).values
                        d25 = (new_Cycles_tot['25Mg'] / (new_Cycles_tot['24Mg'] + new_Cycles_tot['Bckg Lp2'])/ 0.12663).values
                    elif Section_value == 1:
                        d26 = (Cycles_section['26Mg'] / (Cycles_section['24Mg'] + Cycles_section['Bckg Lp2'])/ 0.13932).values
                        d25 = (Cycles_section['25Mg'] / (Cycles_section['24Mg'] + Cycles_section['Bckg Lp2'])/ 0.12663).values
                    d26_25 = np.asarray(d26) / np.asarray(d25)
                    D26 = np.asarray(d26) / np.asarray(d25) ** (1 / 0.5128)
                    d25Mg = (np.asarray(d25) - 1) * 1000
                    d26Mg = (np.asarray(d26) - 1) * 1000
                    d26_25Mg = (np.asarray(d26_25) - 1) * 1000
                    D26Mg = (np.asarray(D26) - 1) * 1000
                    if Section_value == 0:
                        ratio_27Al_24Mg = new_Cycles_tot['27Al'] / new_Cycles_tot['24Mg']
                        half_25 = new_Cycles_tot['25'] / new_Cycles_tot['25Mg']
                        half_26 = new_Cycles_tot['26'] / new_Cycles_tot['26Mg']
                        new_Cycles_tot = new_Cycles_tot.assign(Ratio_27Al_24Mg=ratio_27Al_24Mg.values)
                        new_Cycles_tot = new_Cycles_tot.assign(D26Mg=D26Mg)
                        new_Cycles_tot = new_Cycles_tot.assign(d25Mg=d25Mg)
                        new_Cycles_tot = new_Cycles_tot.assign(d26Mg=d26Mg)
                        new_Cycles_tot = new_Cycles_tot.assign(half_25=half_25.values)
                        new_Cycles_tot = new_Cycles_tot.assign(half_26=half_26.values)
                    elif Section_value == 1:
                        ratio_27Al_24Mg = Cycles_section['27Al'] / Cycles_section['24Mg']
                        half_25 = Cycles_section['25'] / Cycles_section['25Mg']
                        half_26 = Cycles_section['26'] / Cycles_section['26Mg']
                        Cycles_section = Cycles_section.assign(Ratio_27Al_24Mg=ratio_27Al_24Mg.values)
                        Cycles_section = Cycles_section.assign(D26Mg=D26Mg)
                        Cycles_section = Cycles_section.assign(d25Mg=d25Mg)
                        Cycles_section = Cycles_section.assign(d26Mg=d26Mg)
                        Cycles_section = Cycles_section.assign(half_25=half_25.values)
                        Cycles_section = Cycles_section.assign(half_26=half_26.values)
                elif Deadtime_new == 1:
                    if Section_value == 0:
                        d26 = (new_Cycles_tot['cycles_26Mg_mod'] / (new_Cycles_tot['24Mg'] + new_Cycles_tot['Bckg Lp2'])/ 0.13932).values
                        d25 = (new_Cycles_tot['cycles_25Mg_mod'] / (new_Cycles_tot['24Mg'] + new_Cycles_tot['Bckg Lp2'])/ 0.12663).values
                    elif Section_value == 1:
                        d26 = (Cycles_section['cycles_26Mg_mod'] / (Cycles_section['24Mg'] + Cycles_section['Bckg Lp2'])/ 0.13932).values
                        d25 = (Cycles_section['cycles_25Mg_mod'] / (Cycles_section['24Mg'] + Cycles_section['Bckg Lp2'])/ 0.12663).values
                    d26_25 = np.asarray(d26) / np.asarray(d25)
                    D26 = np.asarray(d26) / np.asarray(d25) ** (1 / 0.5128)
                    d25Mg = (np.asarray(d25) - 1) * 1000
                    d26Mg = (np.asarray(d26) - 1) * 1000
                    d26_25Mg = (np.asarray(d26_25) - 1) * 1000
                    D26Mg = (np.asarray(D26) - 1) * 1000
                    if Section_value == 0:
                        ratio_27Al_24Mg = new_Cycles_tot['27Al'] / new_Cycles_tot['24Mg']
                        half_25 = new_Cycles_tot['25'] / new_Cycles_tot['cycles_25Mg_mod']
                        half_26 = new_Cycles_tot['26'] / new_Cycles_tot['cycles_26Mg_mod']
                        new_Cycles_tot = new_Cycles_tot.assign(Ratio_27Al_24Mg=ratio_27Al_24Mg.values)
                        new_Cycles_tot = new_Cycles_tot.assign(D26Mg=D26Mg)
                        new_Cycles_tot = new_Cycles_tot.assign(d25Mg=d25Mg)
                        new_Cycles_tot = new_Cycles_tot.assign(d26Mg=d26Mg)
                        new_Cycles_tot = new_Cycles_tot.assign(half_25=half_25.values)
                        new_Cycles_tot = new_Cycles_tot.assign(half_26=half_26.values)
                    elif Section_value == 1:
                        ratio_27Al_24Mg = Cycles_section['27Al'] / Cycles_section['24Mg']
                        half_25 = Cycles_section['25'] / Cycles_section['cycles_25Mg_mod']
                        half_26 = Cycles_section['26'] / Cycles_section['cycles_26Mg_mod']
                        Cycles_section = Cycles_section.assign(Ratio_27Al_24Mg=ratio_27Al_24Mg.values)
                        Cycles_section = Cycles_section.assign(D26Mg=D26Mg)
                        Cycles_section = Cycles_section.assign(d25Mg=d25Mg)
                        Cycles_section = Cycles_section.assign(d26Mg=d26Mg)
                        Cycles_section = Cycles_section.assign(half_25=half_25.values)
                        Cycles_section = Cycles_section.assign(half_26=half_26.values)
            mean_d25Mg = []
            mean_d26Mg = []
            half_24 = []
            half_25 = []
            sd_half_25 = []
            mean_half_25 = []
            half_26 = []
            sd_half_26 = []
            mean_half_26 = []
            se_D26Mg = []
            mean_D26Mg = []
            mean_27Al_24Mg = []
            se_27Al_24Mg = []
            global mean_24cps
            mean_24cps = []
            if Input_Mat_mod == 0:
                if Section_value == 0:
                    for x in range(len(Filename)):
                        Time_to_match = str(Time[x])
                        Single_analysis = Cycles_tot[Cycles_tot['Time (h)'].astype(str).str.contains(Time_to_match, regex=False)]
                        se_D26Mg.append(2 * np.std(np.asarray(Single_analysis['D26Mg'].values)) / np.sqrt(n_cycles[x]))
                        mean_24cps.append(np.mean(Single_analysis['24Mg']))
                        mean_d25Mg.append(np.mean(Single_analysis['d25Mg']))
                        mean_d26Mg.append(np.mean(Single_analysis['d26Mg']))
                        mean_D26Mg.append(np.mean(Single_analysis['D26Mg']))
                        mean_half_25.append(np.mean(Single_analysis['half_25'].values))
                        mean_half_26.append(np.mean(Single_analysis['half_26'].values))
                        mean_27Al_24Mg.append(np.mean(Single_analysis['Ratio_27Al_24Mg']))
                        se_27Al_24Mg.append((200 * np.std(np.asarray(Single_analysis['Ratio_27Al_24Mg'].values)) / np.sqrt(n_cycles[x])) / np.mean(Single_analysis['Ratio_27Al_24Mg']))
                elif Section_value == 1:
                    for x in range(len(Selection_section)):
                        Time_to_match = str(Time[x])
                        Single_analysis = Cycles_section[Cycles_section['Time (h)'].astype(str).str.contains(Time_to_match, regex=False)]
                        se_D26Mg.append(2 * np.std(np.asarray(Single_analysis['D26Mg'].values)) / np.sqrt(n_cycles[x]))
                        mean_24cps.append(np.mean(Single_analysis['24Mg']))
                        mean_d25Mg.append(np.mean(Single_analysis['d25Mg']))
                        mean_d26Mg.append(np.mean(Single_analysis['d26Mg']))
                        mean_D26Mg.append(np.mean(Single_analysis['D26Mg']))
                        mean_half_25.append(np.mean(Single_analysis['half_25'].values))
                        mean_half_26.append(np.mean(Single_analysis['half_26'].values))
                        mean_27Al_24Mg.append(np.mean(Single_analysis['Ratio_27Al_24Mg']))
                        se_27Al_24Mg.append((200 * np.std(np.asarray(Single_analysis['Ratio_27Al_24Mg'].values)) / np.sqrt(n_cycles[x])) / np.mean(Single_analysis['Ratio_27Al_24Mg']))
            elif Input_Mat_mod == 1:
                if Section_value == 0:
                    for x in range(len(B_mod['Time (h)'])):
                        Time_to_match = str(Time[x])
                        Single_analysis = new_Cycles_tot[new_Cycles_tot['Time (h)'].astype(str).str.contains(Time_to_match, regex=False)]
                        se_D26Mg.append(2 * np.std(np.asarray(Single_analysis['D26Mg'].values)) / np.sqrt(n_cycles[x]))
                        mean_24cps.append(np.mean(Single_analysis['24Mg']))
                        mean_d25Mg.append(np.mean(Single_analysis['d25Mg']))
                        mean_d26Mg.append(np.mean(Single_analysis['d26Mg']))
                        mean_D26Mg.append(np.mean(Single_analysis['D26Mg']))
                        mean_half_25.append(np.mean(Single_analysis['half_25'].values))
                        mean_half_26.append(np.mean(Single_analysis['half_26'].values))
                        mean_27Al_24Mg.append(np.mean(Single_analysis['Ratio_27Al_24Mg']))
                        se_27Al_24Mg.append((200 * np.std(np.asarray(Single_analysis['Ratio_27Al_24Mg'].values)) / np.sqrt(n_cycles[x])) / np.mean(Single_analysis['Ratio_27Al_24Mg']))
                elif Section_value == 1:
                    for x in range(len(Selection_section)):
                        Time_to_match = str(Time[x])
                        Single_analysis = Cycles_section[Cycles_section['Time (h)'].astype(str).str.contains(Time_to_match, regex=False)]
                        se_D26Mg.append(2 * np.std(np.asarray(Single_analysis['D26Mg'].values)) / np.sqrt(n_cycles[x]))
                        mean_24cps.append(np.mean(Single_analysis['24Mg']))
                        mean_d25Mg.append(np.mean(Single_analysis['d25Mg']))
                        mean_d26Mg.append(np.mean(Single_analysis['d26Mg']))
                        mean_D26Mg.append(np.mean(Single_analysis['D26Mg']))
                        mean_half_25.append(np.mean(Single_analysis['half_25'].values))
                        mean_half_26.append(np.mean(Single_analysis['half_26'].values))
                        mean_27Al_24Mg.append(np.mean(Single_analysis['Ratio_27Al_24Mg']))
                        se_27Al_24Mg.append((200 * np.std(np.asarray(Single_analysis['Ratio_27Al_24Mg'].values)) / np.sqrt(n_cycles[x])) / np.mean(Single_analysis['Ratio_27Al_24Mg']))
        elif Isotopic_system_value == 9:
            if Input_Mat_mod == 0:
                if Deadtime_new == 0:
                    d26 = (Cycles_tot['26Mg'] / Cycles_tot['24Mg'] / 0.13932).values
                    d25 = (Cycles_tot['25Mg'] / Cycles_tot['24Mg'] / 0.12663).values
                    d26_25 = np.asarray(d26) / np.asarray(d25)
                    D26 = np.asarray(d26) / np.asarray(d25) ** (1 / 0.5128)
                    d25Mg = (np.asarray(d25) - 1) * 1000
                    d26Mg = (np.asarray(d26) - 1) * 1000
                    d26_25Mg = (np.asarray(d26_25) - 1) * 1000
                    D26Mg = (np.asarray(D26) - 1) * 1000
                    ratio_27Al_24Mg = Cycles_tot['27Al'] / Cycles_tot['24Mg']
                    half_24 = Cycles_tot['24'] / Cycles_tot['24Mg']
                    half_25 = Cycles_tot['25'] / Cycles_tot['25Mg']
                    half_26 = Cycles_tot['26'] / Cycles_tot['26Mg']
                    Cycles_tot = Cycles_tot.assign(Ratio_27Al_24Mg=ratio_27Al_24Mg.values)
                    Cycles_tot = Cycles_tot.assign(D26Mg=D26Mg)
                    Cycles_tot = Cycles_tot.assign(d25Mg=d25Mg)
                    Cycles_tot = Cycles_tot.assign(d26Mg=d26Mg)
                    Cycles_tot = Cycles_tot.assign(half_24=half_24.values)
                    Cycles_tot = Cycles_tot.assign(half_25=half_25.values)
                    Cycles_tot = Cycles_tot.assign(half_26=half_26.values)
                elif Deadtime_new == 1:
                    d26 = (Cycles_tot['cycles_26Mg_mod'] / Cycles_tot['cycles_24Mg_mod'] / 0.13932).values
                    d25 = (Cycles_tot['cycles_25Mg_mod'] / Cycles_tot['cycles_24Mg_mod'] / 0.12663).values
                    d26_25 = np.asarray(d26) / np.asarray(d25)
                    D26 = np.asarray(d26) / np.asarray(d25) ** (1 / 0.5128)
                    d25Mg = (np.asarray(d25) - 1) * 1000
                    d26Mg = (np.asarray(d26) - 1) * 1000
                    d26_25Mg = (np.asarray(d26_25) - 1) * 1000
                    D26Mg = (np.asarray(D26) - 1) * 1000
                    ratio_27Al_24Mg = Cycles_tot['27Al'] / Cycles_tot['24Mg']
                    half_24 = Cycles_tot['24'] / Cycles_tot['cycles_24Mg_mod']
                    half_25 = Cycles_tot['25'] / Cycles_tot['cycles_25Mg_mod']
                    half_26 = Cycles_tot['26'] / Cycles_tot['cycles_26Mg_mod']
                    Cycles_tot = Cycles_tot.assign(Ratio_27Al_24Mg=ratio_27Al_24Mg.values)
                    Cycles_tot = Cycles_tot.assign(D26Mg=D26Mg)
                    Cycles_tot = Cycles_tot.assign(d25Mg=d25Mg)
                    Cycles_tot = Cycles_tot.assign(d26Mg=d26Mg)
                    Cycles_tot = Cycles_tot.assign(half_24=half_24.values)
                    Cycles_tot = Cycles_tot.assign(half_25=half_25.values)
                    Cycles_tot = Cycles_tot.assign(half_26=half_26.values)
            elif Input_Mat_mod == 1:
                if Deadtime_new == 0:
                    d26 = (new_Cycles_tot['26Mg'] / new_Cycles_tot['24Mg'] / 0.13932).values
                    d25 = (new_Cycles_tot['25Mg'] / new_Cycles_tot['24Mg'] / 0.12663).values
                    d26_25 = np.asarray(d26) / np.asarray(d25)
                    D26 = np.asarray(d26) / np.asarray(d25) ** (1 / 0.5128)
                    d25Mg = (np.asarray(d25) - 1) * 1000
                    d26Mg = (np.asarray(d26) - 1) * 1000
                    d26_25Mg = (np.asarray(d26_25) - 1) * 1000
                    D26Mg = (np.asarray(D26) - 1) * 1000
                    ratio_27Al_24Mg = new_Cycles_tot['27Al'] / new_Cycles_tot['24Mg']
                    half_24 = new_Cycles_tot['24'] / new_Cycles_tot['24Mg']
                    half_25 = new_Cycles_tot['25'] / new_Cycles_tot['25Mg']
                    half_26 = new_Cycles_tot['26'] / new_Cycles_tot['26Mg']
                    new_Cycles_tot = new_Cycles_tot.assign(Ratio_27Al_24Mg=ratio_27Al_24Mg.values)
                    new_Cycles_tot = new_Cycles_tot.assign(D26Mg=D26Mg)
                    new_Cycles_tot = new_Cycles_tot.assign(d25Mg=d25Mg)
                    new_Cycles_tot = new_Cycles_tot.assign(d26Mg=d26Mg)
                    new_Cycles_tot = new_Cycles_tot.assign(half_24=half_24.values)
                    new_Cycles_tot = new_Cycles_tot.assign(half_25=half_25.values)
                    new_Cycles_tot = new_Cycles_tot.assign(half_26=half_26.values)
                elif Deadtime_new == 1:
                    d26 = (new_Cycles_tot['cycles_26Mg_mod'] / new_Cycles_tot['24Mg'] / 0.13932).values
                    d25 = (new_Cycles_tot['cycles_25Mg_mod'] / new_Cycles_tot['24Mg'] / 0.12663).values
                    d26_25 = np.asarray(d26) / np.asarray(d25)
                    D26 = np.asarray(d26) / np.asarray(d25) ** (1 / 0.5128)
                    d25Mg = (np.asarray(d25) - 1) * 1000
                    d26Mg = (np.asarray(d26) - 1) * 1000
                    d26_25Mg = (np.asarray(d26_25) - 1) * 1000
                    D26Mg = (np.asarray(D26) - 1) * 1000
                    ratio_27Al_24Mg = new_Cycles_tot['27Al'] / new_Cycles_tot['24Mg']
                    half_24 = new_Cycles_tot['24'] / new_Cycles_tot['cycles_24Mg_mod']
                    half_25 = new_Cycles_tot['25'] / new_Cycles_tot['cycles_25Mg_mod']
                    half_26 = new_Cycles_tot['26'] / new_Cycles_tot['cycles_26Mg_mod']
                    new_Cycles_tot = new_Cycles_tot.assign(Ratio_27Al_24Mg=ratio_27Al_24Mg.values)
                    new_Cycles_tot = new_Cycles_tot.assign(D26Mg=D26Mg)
                    new_Cycles_tot = new_Cycles_tot.assign(d25Mg=d25Mg)
                    new_Cycles_tot = new_Cycles_tot.assign(d26Mg=d26Mg)
                    new_Cycles_tot = new_Cycles_tot.assign(half_24=half_24.values)
                    new_Cycles_tot = new_Cycles_tot.assign(half_25=half_25.values)
                    new_Cycles_tot = new_Cycles_tot.assign(half_26=half_26.values)
            mean_d25Mg = []
            mean_d26Mg = []
            half_25 = []
            global mean_half_24
            mean_half_24 = []
            sd_half_25 = []
            mean_half_25 = []
            half_26 = []
            sd_half_26 = []
            mean_half_26 = []
            se_D26Mg = []
            mean_D26Mg = []
            mean_27Al_24Mg = []
            se_27Al_24Mg = []
            mean_24cps = []
            if Input_Mat_mod == 0:
                if Section_value == 0:
                    for x in range(len(Filename)):
                        Time_to_match = str(Time[x])
                        Single_analysis = Cycles_tot[Cycles_tot['Time (h)'].astype(str).str.contains(Time_to_match, regex=False)]
                        se_D26Mg.append(2 * np.std(np.asarray(Single_analysis['D26Mg'].values)) / np.sqrt(n_cycles[x]))
                        mean_24cps.append(np.mean(Single_analysis['24Mg']))
                        mean_d25Mg.append(np.mean(Single_analysis['d25Mg']))
                        mean_d26Mg.append(np.mean(Single_analysis['d26Mg']))
                        mean_D26Mg.append(np.mean(Single_analysis['D26Mg']))
                        mean_half_24.append(np.mean(Single_analysis['half_24'].values))
                        mean_half_25.append(np.mean(Single_analysis['half_25'].values))
                        mean_half_26.append(np.mean(Single_analysis['half_26'].values))
                        mean_27Al_24Mg.append(np.mean(Single_analysis['Ratio_27Al_24Mg']))
                        se_27Al_24Mg.append((200 * np.std(np.asarray(Single_analysis['Ratio_27Al_24Mg'].values)) / np.sqrt(n_cycles[x])) / np.mean(Single_analysis['Ratio_27Al_24Mg']))
                if Section_value == 1:
                    for x in range(len(Selection_section)):
                        Time_to_match = str(Time[x])
                        Single_analysis = Cycles_section[Cycles_section['Time (h)'].astype(str).str.contains(Time_to_match, regex=False)]
                        se_D26Mg.append(2 * np.std(np.asarray(Single_analysis['D26Mg'].values)) / np.sqrt(n_cycles[x]))
                        mean_24cps.append(np.mean(Single_analysis['24Mg']))
                        mean_d25Mg.append(np.mean(Single_analysis['d25Mg']))
                        mean_d26Mg.append(np.mean(Single_analysis['d26Mg']))
                        mean_D26Mg.append(np.mean(Single_analysis['D26Mg']))
                        mean_half_24.append(np.mean(Single_analysis['half_24'].values))
                        mean_half_25.append(np.mean(Single_analysis['half_25'].values))
                        mean_half_26.append(np.mean(Single_analysis['half_26'].values))
                        mean_27Al_24Mg.append(np.mean(Single_analysis['Ratio_27Al_24Mg']))
                        se_27Al_24Mg.append((200 * np.std(np.asarray(Single_analysis['Ratio_27Al_24Mg'].values)) / np.sqrt(n_cycles[x])) / np.mean(Single_analysis['Ratio_27Al_24Mg']))
            elif Input_Mat_mod == 1:
                if Section_value == 0:
                    for x in range(len(B_mod['Time (h)'])):
                        Time_to_match = str(Time[x])
                        Single_analysis = new_Cycles_tot[new_Cycles_tot['Time (h)'].astype(str).str.contains(Time_to_match, regex=False)]
                        se_D26Mg.append(2 * np.std(np.asarray(Single_analysis['D26Mg'].values)) / np.sqrt(n_cycles[x]))
                        mean_24cps.append(np.mean(Single_analysis['24Mg']))
                        mean_d25Mg.append(np.mean(Single_analysis['d25Mg']))
                        mean_d26Mg.append(np.mean(Single_analysis['d26Mg']))
                        mean_D26Mg.append(np.mean(Single_analysis['D26Mg']))
                        mean_half_24.append(np.mean(Single_analysis['half_24'].values))
                        mean_half_25.append(np.mean(Single_analysis['half_25'].values))
                        mean_half_26.append(np.mean(Single_analysis['half_26'].values))
                        mean_27Al_24Mg.append(np.mean(Single_analysis['Ratio_27Al_24Mg']))
                        se_27Al_24Mg.append((200 * np.std(np.asarray(Single_analysis['Ratio_27Al_24Mg'].values)) / np.sqrt(n_cycles[x])) / np.mean(Single_analysis['Ratio_27Al_24Mg']))
                if Section_value == 1:
                    for x in range(len(Selection_section)):
                        Time_to_match = str(Time[x])
                        Single_analysis = Cycles_section[Cycles_section['Time (h)'].astype(str).str.contains(Time_to_match, regex=False)]
                        se_D26Mg.append(2 * np.std(np.asarray(Single_analysis['D26Mg'].values)) / np.sqrt(n_cycles[x]))
                        mean_24cps.append(np.mean(Single_analysis['24Mg']))
                        mean_d25Mg.append(np.mean(Single_analysis['d25Mg']))
                        mean_d26Mg.append(np.mean(Single_analysis['d26Mg']))
                        mean_D26Mg.append(np.mean(Single_analysis['D26Mg']))
                        mean_half_24.append(np.mean(Single_analysis['half_24'].values))
                        mean_half_25.append(np.mean(Single_analysis['half_25'].values))
                        mean_half_26.append(np.mean(Single_analysis['half_26'].values))
                        mean_27Al_24Mg.append(np.mean(Single_analysis['Ratio_27Al_24Mg']))
                        se_27Al_24Mg.append((200 * np.std(np.asarray(Single_analysis['Ratio_27Al_24Mg'].values)) / np.sqrt(n_cycles[x])) / np.mean(Single_analysis['Ratio_27Al_24Mg']))
        elif Isotopic_system_value == 11:
            Ratio_18O_16O = Cycles_tot['18O'] / Cycles_tot['16O']
            Cycles_tot = Cycles_tot.assign(Ratio_18O_16O=Ratio_18O_16O.values)
            Ratio_17O_16O = Cycles_tot['17O'] / Cycles_tot['16O']
            Cycles_tot = Cycles_tot.assign(Ratio_17O_16O=Ratio_17O_16O.values)
        self.Input_matrix()


    def Input_matrix(self):
        global delta_raw
        global SE_int_raw
        global Comment_B
        global A
        global B
        global X_pos_B
        global Y_pos_B
        global dt_FA_X_B
        global dt_FA_Y_B
        global dt_CA_X_B
        global dt_CA_Y_B
        global Chamber_pressure_B
        global FA_B
        global Entr_slit_B
        global Cont_Ap_B
        global Max_Area_B
        global Raster_size_sput_B
        global Raster_size_analyses_B
        global Input_Mat
        delta_raw = []
        SE_int_raw = []
        if Isotopic_system_value == 8:
            # correction_25 = 0.0178
            # correction_26 = 0.0232
            correction_25 = 0.02222
            correction_26 = 0.025
            d25Mg_corr = np.asarray(mean_d25Mg) - (np.asarray(mean_half_25) - np.mean(mean_half_25)) / correction_25
            d26Mg_corr = np.asarray(mean_d26Mg) - (np.asarray(mean_half_26) - np.mean(mean_half_26)) / correction_26
            delta_raw = ((1 + np.asarray(d26Mg_corr) / 1000) / (1 + np.asarray(d25Mg_corr) / 1000) ** (1 / 0.5128) - 1) * 1000
            SE_int_raw = se_D26Mg
        elif Isotopic_system_value == 9:
            correction_24 = 0.0286
            correction_25 = 0.0175
            correction_26 = 0.03125
            d25Mg_corr = np.asarray(mean_d25Mg) - (np.asarray(mean_half_25) - 0.5535) / correction_25 + (np.asarray(mean_half_24) - 0.5161) / correction_24
            d26Mg_corr = np.asarray(mean_d26Mg) - (np.asarray(mean_half_26) - 0.5042) / correction_26 + (np.asarray(mean_half_24) - 0.5161) / correction_24
            delta_raw = ((1 + np.asarray(d26Mg_corr) / 1000) / (1 + np.asarray(d25Mg_corr) / 1000) ** (1 / 0.5128) - 1) * 1000
            SE_int_raw = se_D26Mg
        elif Isotopic_system_value == 11:
            delta_raw = 1000 * ((np.asarray(R1)/0.002052) - 1)
            SE_int_raw = 20 * np.asarray(s1)
            d17O_raw = 1000 * ((np.asarray(R2)/0.000383) - 1)
            d17O_SE_int_raw = 20 * np.asarray(s2)
            D17O_raw = d17O_raw - np.asarray(delta_raw) * 0.52
            D17O_SE_int_raw = np.sqrt(np.asarray(d17O_SE_int_raw) ** 2 + (0.52 * np.asarray(SE_int_raw)) ** 2)
        else:
            if Ratio_iso == 1:
                delta_raw = 1000 * ((np.asarray(R0)/Ref_iso) - 1)
                SE_int_raw = 20 * np.asarray(s0)
            elif Ratio_iso == 2:
                delta_raw = 1000 * ((np.asarray(R1)/Ref_iso) - 1)
                SE_int_raw = 20 * np.asarray(s1)
            elif Ratio_iso == 3:
                delta_raw = 1000 * ((np.asarray(R2)/Ref_iso) - 1)
                SE_int_raw = 20 * np.asarray(s2)
            elif Ratio_iso == 4:
                delta_raw = 1000 * ((np.asarray(R3)/Ref_iso) - 1)
                SE_int_raw = 20 * np.asarray(s3)
            elif Ratio_iso == 5:
                delta_raw = 1000 * ((np.asarray(R4)/Ref_iso) - 1)
                SE_int_raw = 20 * np.asarray(s4)
            elif Ratio_iso == 6:
                delta_raw = 1000 * ((np.asarray(R5)/Ref_iso) - 1)
                SE_int_raw = 20 * np.asarray(s5)
            elif Ratio_iso == 7:
                delta_raw = 1000 * ((np.asarray(R6)/Ref_iso) - 1)
                SE_int_raw = 20 * np.asarray(s6)
            elif Ratio_iso == 8:
                delta_raw = 1000 * ((np.asarray(R7)/Ref_iso) - 1)
                SE_int_raw = 20 * np.asarray(s7)
        X_pos_B = []
        Y_pos_B = []
        dt_FA_X_B = []
        dt_FA_Y_B = []
        dt_CA_X_B = []
        dt_CA_Y_B = []
        Chamber_pressure_B = []
        FA_B = []
        Entr_slit_B = []
        Cont_Ap_B = []
        Max_Area_B = []
        Raster_size_sput_B = []
        Raster_size_analyses_B = []
        if Analyses_type_value == 1 and block_name == 1:
            global Name_B
            global Time_B
            global Prim_B
            global delta_B
            global error_B
            global R0_B
            global s0_B
            Name_B = []
            Time_B = []
            Prim_B = []
            delta_B = []
            error_B = []
            R0_B = []
            s0_B = []
            if Input_Mat_mod == 0:
                if Section_value == 0:
                    if Name_cell == 0:
                        A = pd.DataFrame({'Name' : Filename, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0,  
                            'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                            'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                    elif Name_cell == 1:
                        A = pd.DataFrame({'Name' : Filename, 'Comment' : Comment, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0,  
                            'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                            'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Comment', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                        Comment_B = np.transpose(B['Comment'].tolist())
                    Name_B = np.transpose(B['Name'].tolist())
                    Time_B = B['Time (h)'].values
                    Prim_B = B['Primary current (nA)'].values
                    delta_B = B['delta raw (permil)'].values
                    error_B = B['error int (permil)'].values
                    R0_B = B['R0'].values
                    s0_B = B['se R0 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
            elif Input_Mat_mod == 1:
                if Section_value == 0:
                    Name_B = np.transpose(B_mod['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_mod['Comment'].tolist())
                    Time_B = B_mod['Time (h)'].values
                    Prim_B = B_mod['Primary current (nA)'].values
                    delta_B = B_mod['delta raw (permil)'].values
                    error_B = B_mod['error int (permil)'].values
                    R0_B = B_mod['R0'].values
                    s0_B = B_mod['se R0 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
        elif Analyses_type_value == 1 and block_name == 2:
            global R1_B
            global s1_B
            Name_B = []
            Time_B = []
            Prim_B = []
            delta_B = []
            error_B = []
            R0_B = []
            s0_B = []
            R1_B = []
            s1_B = []
            if Input_Mat_mod == 0:
                if Section_value == 0:
                    if Name_cell == 0:
                        A = pd.DataFrame({'Name' : Filename, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0, 'R1' : R1, 'se R1 (%)' : s1,  
                            'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                            'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'R1', 'se R1 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                    elif Name_cell == 1:
                        A = pd.DataFrame({'Name' : Filename, 'Comment' : Comment, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0, 'R1' : R1, 'se R1 (%)' : s1,  
                            'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                            'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Comment', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'R1', 'se R1 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                        Comment_B = np.transpose(B['Comment'].tolist())
                    Name_B = np.transpose(B['Name'].tolist())
                    Time_B = B['Time (h)'].values
                    Prim_B = B['Primary current (nA)'].values
                    delta_B = B['delta raw (permil)'].values
                    error_B = B['error int (permil)'].values
                    R0_B = B['R0'].values
                    s0_B = B['se R0 (%)'].values
                    R1_B = B['R1'].values
                    s1_B = B['se R1 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
            elif Input_Mat_mod == 1:
                if Section_value == 0:
                    Name_B = np.transpose(B_mod['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_mod['Comment'].tolist())
                    Time_B = B_mod['Time (h)'].values
                    Prim_B = B_mod['Primary current (nA)'].values
                    delta_B = B_mod['delta raw (permil)'].values
                    error_B = B_mod['error int (permil)'].values
                    R0_B = B_mod['R0'].values
                    s0_B = B_mod['se R0 (%)'].values
                    R1_B = B_mod['R1'].values
                    s1_B = B_mod['se R1 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
        elif Analyses_type_value == 1 and block_name == 3:
            global R2_B
            global s2_B
            Name_B = []
            Time_B = []
            Prim_B = []
            delta_B = []
            error_B = []
            R0_B = []
            s0_B = []
            R1_B = []
            s1_B = []
            R2_B = []
            s2_B = []
            if Input_Mat_mod == 0:
                if Section_value == 0:
                    if Name_cell == 0:
                        A = pd.DataFrame({'Name' : Filename, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0, 'R1' : R1, 'se R1 (%)' : s1, 'R2' : R2, 'se R2 (%)' : s2, 
                            'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                            'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'R1', 'se R1 (%)', 'R2', 'se R2 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                    elif Name_cell == 1:
                        A = pd.DataFrame({'Name' : Filename, 'Comment' : Comment, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0, 'R1' : R1, 'se R1 (%)' : s1, 'R2' : R2, 'se R2 (%)' : s2, 
                            'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                            'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Comment', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'R1', 'se R1 (%)', 'R2', 'se R2 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                        Comment_B = np.transpose(B['Comment'].tolist())
                    Name_B = np.transpose(B['Name'].tolist())
                    Time_B = B['Time (h)'].values
                    Prim_B = B['Primary current (nA)'].values
                    delta_B = B['delta raw (permil)'].values
                    error_B = B['error int (permil)'].values
                    R0_B = B['R0'].values
                    s0_B = B['se R0 (%)'].values
                    R1_B = B['R1'].values
                    s1_B = B['se R1 (%)'].values
                    R2_B = B['R2'].values
                    s2_B = B['se R2 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
            elif Input_Mat_mod == 1:
                if Section_value == 0:
                    Name_B = np.transpose(B_mod['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_mod['Comment'].tolist())
                    Time_B = B_mod['Time (h)'].values
                    Prim_B = B_mod['Primary current (nA)'].values
                    delta_B = B_mod['delta raw (permil)'].values
                    error_B = B_mod['error int (permil)'].values
                    R0_B = B_mod['R0'].values
                    s0_B = B_mod['se R0 (%)'].values
                    R1_B = B_mod['R1'].values
                    s1_B = B_mod['se R1 (%)'].values
                    R2_B = B_mod['R2'].values
                    s2_B = B_mod['se R2 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
        elif Analyses_type_value == 1 and block_name == 4:
            global R3_B
            global s3_B
            Name_B = []
            Time_B = []
            Prim_B = []
            delta_B = []
            error_B = []
            R0_B = []
            s0_B = []
            R1_B = []
            s1_B = []
            R2_B = []
            s2_B = []
            R3_B = []
            s3_B = []
            if Input_Mat_mod == 0:
                if Section_value == 0:
                    if Name_cell ==0:
                        A = pd.DataFrame({'Name' : Filename, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0, 'R1' : R1, 'se R1 (%)' : s1, 'R2' : R2, 'se R2 (%)' : s2, 
                            'R3' : R3, 'se R3 (%)' : s3, 'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                            'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'R1', 'se R1 (%)', 'R2', 'se R2 (%)', 'R3', 'se R3 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                    elif Name_cell == 1:
                        A = pd.DataFrame({'Name' : Filename, 'Comment' : Comment, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0, 'R1' : R1, 'se R1 (%)' : s1, 'R2' : R2, 'se R2 (%)' : s2, 
                        'R3' : R3, 'se R3 (%)' : s3, 'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                        'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Comment', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'R1', 'se R1 (%)', 'R2', 'se R2 (%)', 'R3', 'se R3 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                        Comment_B = np.transpose(B['Comment'].tolist())
                    Name_B = np.transpose(B['Name'].tolist())
                    Time_B = B['Time (h)'].values
                    Prim_B = B['Primary current (nA)'].values
                    delta_B = B['delta raw (permil)'].values
                    error_B = B['error int (permil)'].values
                    R0_B = B['R0'].values
                    s0_B = B['se R0 (%)'].values
                    R1_B = B['R1'].values
                    s1_B = B['se R1 (%)'].values
                    R2_B = B['R2'].values
                    s2_B = B['se R2 (%)'].values
                    R3_B = B['R3'].values
                    s3_B = B['se R3 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
                    R3_B = B_section['R3'].values
                    s3_B = B_section['se R3 (%)'].values
            elif Input_Mat_mod == 1:
                if Section_value == 0:
                    Name_B = np.transpose(B_mod['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_mod['Comment'].tolist())
                    Time_B = B_mod['Time (h)'].values
                    Prim_B = B_mod['Primary current (nA)'].values
                    delta_B = B_mod['delta raw (permil)'].values
                    error_B = B_mod['error int (permil)'].values
                    R0_B = B_mod['R0'].values
                    s0_B = B_mod['se R0 (%)'].values
                    R1_B = B_mod['R1'].values
                    s1_B = B_mod['se R1 (%)'].values
                    R2_B = B_mod['R2'].values
                    s2_B = B_mod['se R2 (%)'].values
                    R3_B = B_mod['R3'].values
                    s3_B = B_mod['se R3 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
                    R3_B = B_section['R3'].values
                    s3_B = B_section['se R3 (%)'].values
        elif Analyses_type_value == 1 and block_name == 5:
            global R4_B
            global s4_B
            Name_B = []
            Time_B = []
            Prim_B = []
            delta_B = []
            error_B = []
            R0_B = []
            s0_B = []
            R1_B = []
            s1_B = []
            R2_B = []
            s2_B = []
            R3_B = []
            s3_B = []
            R4_B = []
            s4_B = []
            if Input_Mat_mod == 0:
                if Section_value == 0:
                    if Name_cell == 0:
                        A = pd.DataFrame({'Name' : Filename, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0, 'R1' : R1, 'se R1 (%)' : s1, 'R2' : R2, 'se R2 (%)' : s2, 
                            'R3' : R3, 'se R3 (%)' : s3, 'R4' : R4, 'se R4 (%)' : s4, 'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                            'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'R1', 'se R1 (%)', 'R2', 'se R2 (%)', 'R3', 'se R3 (%)', 'R4', 'se R4 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                    elif Name_cell == 1:
                        A = pd.DataFrame({'Name' : Filename, 'Comment' : Comment, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0, 'R1' : R1, 'se R1 (%)' : s1, 'R2' : R2, 'se R2 (%)' : s2, 
                            'R3' : R3, 'se R3 (%)' : s3, 'R4' : R4, 'se R4 (%)' : s4, 'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                            'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Comment', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'R1', 'se R1 (%)', 'R2', 'se R2 (%)', 'R3', 'se R3 (%)', 'R4', 'se R4 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                        Comment_B = np.transpose(B['Comment'].tolist())
                    Name_B = np.transpose(B['Name'].tolist())
                    Time_B = B['Time (h)'].values
                    Prim_B = B['Primary current (nA)'].values
                    delta_B = B['delta raw (permil)'].values
                    error_B = B['error int (permil)'].values
                    R0_B = B['R0'].values
                    s0_B = B['se R0 (%)'].values
                    R1_B = B['R1'].values
                    s1_B = B['se R1 (%)'].values
                    R2_B = B['R2'].values
                    s2_B = B['se R2 (%)'].values
                    R3_B = B['R3'].values
                    s3_B = B['se R3 (%)'].values
                    R4_B = B['R4'].values
                    s4_B = B['se R4 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
                    R3_B = B_section['R3'].values
                    s3_B = B_section['se R3 (%)'].values
                    R4_B = B_section['R4'].values
                    s4_B = B_section['se R4 (%)'].values
            elif Input_Mat_mod == 1:
                if Section_value == 0:
                    Name_B = np.transpose(B_mod['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_mod['Comment'].tolist())
                    Time_B = B_mod['Time (h)'].values
                    Prim_B = B_mod['Primary current (nA)'].values
                    delta_B = B_mod['delta raw (permil)'].values
                    error_B = B_mod['error int (permil)'].values
                    R0_B = B_mod['R0'].values
                    s0_B = B_mod['se R0 (%)'].values
                    R1_B = B_mod['R1'].values
                    s1_B = B_mod['se R1 (%)'].values
                    R2_B = B_mod['R2'].values
                    s2_B = B_mod['se R2 (%)'].values
                    R3_B = B_mod['R3'].values
                    s3_B = B_mod['se R3 (%)'].values
                    R4_B = B_mod['R4'].values
                    s4_B = B_mod['se R4 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
                    R3_B = B_section['R3'].values
                    s3_B = B_section['se R3 (%)'].values
                    R4_B = B_section['R4'].values
                    s4_B = B_section['se R4 (%)'].values
        elif Analyses_type_value == 1 and block_name == 6:
            global R5_B
            global s5_B
            Name_B = []
            Time_B = []
            Prim_B = []
            delta_B = []
            error_B = []
            R0_B = []
            s0_B = []
            R1_B = []
            s1_B = []
            R2_B = []
            s2_B = []
            R3_B = []
            s3_B = []
            R4_B = []
            s4_B = []
            R5_B = []
            s5_B = []
            if Input_Mat_mod == 0:
                if Section_value == 0:
                    if Name_cell == 0:
                        A = pd.DataFrame({'Name' : Filename, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0, 'R1' : R1, 'se R1 (%)' : s1, 'R2' : R2, 'se R2 (%)' : s2, 
                            'R3' : R3, 'se R3 (%)' : s3, 'R4' : R4, 'se R4 (%)' : s4, 'R5' : R5, 'se R5 (%)' : s5, 'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 
                            'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'R1', 'se R1 (%)', 'R2', 'se R2 (%)', 'R3', 'se R3 (%)', 'R4', 'se R4 (%)', 'R5', 'se R5 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                    elif Name_cell == 1:
                        A = pd.DataFrame({'Name' : Filename, 'Comment' : Comment, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0, 'R1' : R1, 'se R1 (%)' : s1, 'R2' : R2, 'se R2 (%)' : s2, 
                            'R3' : R3, 'se R3 (%)' : s3, 'R4' : R4, 'se R4 (%)' : s4, 'R5' : R5, 'se R5 (%)' : s5, 'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 
                            'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Comment', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'R1', 'se R1 (%)', 'R2', 'se R2 (%)', 'R3', 'se R3 (%)', 'R4', 'se R4 (%)', 'R5', 'se R5 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                        Comment_B = np.transpose(B['Comment'].tolist())
                    Name_B = np.transpose(B['Name'].tolist())
                    Time_B = B['Time (h)'].values
                    Prim_B = B['Primary current (nA)'].values
                    delta_B = B['delta raw (permil)'].values
                    error_B = B['error int (permil)'].values
                    R0_B = B['R0'].values
                    s0_B = B['se R0 (%)'].values
                    R1_B = B['R1'].values
                    s1_B = B['se R1 (%)'].values
                    R2_B = B['R2'].values
                    s2_B = B['se R2 (%)'].values
                    R3_B = B['R3'].values
                    s3_B = B['se R3 (%)'].values
                    R4_B = B['R4'].values
                    s4_B = B['se R4 (%)'].values
                    R5_B = B['R5'].values
                    s5_B = B['se R5 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
                    R3_B = B_section['R3'].values
                    s3_B = B_section['se R3 (%)'].values
                    R4_B = B_section['R4'].values
                    s4_B = B_section['se R4 (%)'].values
                    R5_B = B_section['R5'].values
                    s5_B = B_section['se R5 (%)'].values
            elif Input_Mat_mod == 1:
                if Section_value == 0:
                    Name_B = np.transpose(B_mod['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_mod['Comment'].tolist())
                    Time_B = B_mod['Time (h)'].values
                    Prim_B = B_mod['Primary current (nA)'].values
                    delta_B = B_mod['delta raw (permil)'].values
                    error_B = B_mod['error int (permil)'].values
                    R0_B = B_mod['R0'].values
                    s0_B = B_mod['se R0 (%)'].values
                    R1_B = B_mod['R1'].values
                    s1_B = B_mod['se R1 (%)'].values
                    R2_B = B_mod['R2'].values
                    s2_B = B_mod['se R2 (%)'].values
                    R3_B = B_mod['R3'].values
                    s3_B = B_mod['se R3 (%)'].values
                    R4_B = B_mod['R4'].values
                    s4_B = B_mod['se R4 (%)'].values
                    R5_B = B_mod['R5'].values
                    s5_B = B_mod['se R5 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
                    R3_B = B_section['R3'].values
                    s3_B = B_section['se R3 (%)'].values
                    R4_B = B_section['R4'].values
                    s4_B = B_section['se R4 (%)'].values
                    R5_B = B_section['R5'].values
                    s5_B = B_section['se R5 (%)'].values
        elif Analyses_type_value == 1 and block_name == 7:
            global R6_B
            global s6_B
            Name_B = []
            Time_B = []
            Prim_B = []
            delta_B = []
            error_B = []
            R0_B = []
            s0_B = []
            R1_B = []
            s1_B = []
            R2_B = []
            s2_B = []
            R3_B = []
            s3_B = []
            R4_B = []
            s4_B = []
            R5_B = []
            s5_B = []
            R6_B = []
            s6_B = []
            if Input_Mat_mod == 0:
                if Section_value == 0:
                    if Name_cell == 0:
                        A = pd.DataFrame({'Name' : Filename, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0, 'R1' : R1, 'se R1 (%)' : s1, 'R2' : R2, 'se R2 (%)' : s2, 'R3' : R3, 'se R3 (%)' : s3, 
                            'R4' : R4, 'se R4 (%)' : s4, 'R5' : R5, 'se R5 (%)' : s5, 'R6' : R6, 'se R6 (%)' : s6, 'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 
                            'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'R1', 'se R1 (%)', 'R2', 'se R2 (%)', 'R3', 'se R3 (%)', 'R4', 'se R4 (%)', 'R5', 'se R5 (%)', 'R6', 'se R6 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                    elif Name_cell == 1:
                        A = pd.DataFrame({'Name' : Filename, 'Comment' : Comment, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0, 'R1' : R1, 'se R1 (%)' : s1, 'R2' : R2, 'se R2 (%)' : s2, 'R3' : R3, 'se R3 (%)' : s3, 
                            'R4' : R4, 'se R4 (%)' : s4, 'R5' : R5, 'se R5 (%)' : s5, 'R6' : R6, 'se R6 (%)' : s6, 'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 
                            'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Comment', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'R1', 'se R1 (%)', 'R2', 'se R2 (%)', 'R3', 'se R3 (%)', 'R4', 'se R4 (%)', 'R5', 'se R5 (%)', 'R6', 'se R6 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                        Comment_B = np.transpose(B['Comment'].tolist())
                    Name_B = np.transpose(B['Name'].tolist())
                    Time_B = B['Time (h)'].values
                    Prim_B = B['Primary current (nA)'].values
                    delta_B = B['delta raw (permil)'].values
                    error_B = B['error int (permil)'].values
                    R0_B = B['R0'].values
                    s0_B = B['se R0 (%)'].values
                    R1_B = B['R1'].values
                    s1_B = B['se R1 (%)'].values
                    R2_B = B['R2'].values
                    s2_B = B['se R2 (%)'].values
                    R3_B = B['R3'].values
                    s3_B = B['se R3 (%)'].values
                    R4_B = B['R4'].values
                    s4_B = B['se R4 (%)'].values
                    R5_B = B['R5'].values
                    s5_B = B['se R5 (%)'].values
                    R6_B = B['R6'].values
                    s6_B = B['se R6 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    # Name_B = B_section['Name']
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
                    R3_B = B_section['R3'].values
                    s3_B = B_section['se R3 (%)'].values
                    R4_B = B_section['R4'].values
                    s4_B = B_section['se R4 (%)'].values
                    R5_B = B_section['R5'].values
                    s5_B = B_section['se R5 (%)'].values
                    R6_B = B_section['R6'].values
                    s6_B = B_section['se R6 (%)'].values
            elif Input_Mat_mod == 1:
                if Section_value == 0:
                    Name_B = np.transpose(B_mod['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_mod['Comment'].tolist())
                    Time_B = B_mod['Time (h)'].values
                    Prim_B = B_mod['Primary current (nA)'].values
                    delta_B = B_mod['delta raw (permil)'].values
                    error_B = B_mod['error int (permil)'].values
                    R0_B = B_mod['R0'].values
                    s0_B = B_mod['se R0 (%)'].values
                    R1_B = B_mod['R1'].values
                    s1_B = B_mod['se R1 (%)'].values
                    R2_B = B_mod['R2'].values
                    s2_B = B_mod['se R2 (%)'].values
                    R3_B = B_mod['R3'].values
                    s3_B = B_mod['se R3 (%)'].values
                    R4_B = B_mod['R4'].values
                    s4_B = B_mod['se R4 (%)'].values
                    R5_B = B_mod['R5'].values
                    s5_B = B_mod['se R5 (%)'].values
                    R6_B = B_mod['R6'].values
                    s6_B = B_mod['se R6 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    # Name_B = B_section['Name']
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
                    R3_B = B_section['R3'].values
                    s3_B = B_section['se R3 (%)'].values
                    R4_B = B_section['R4'].values
                    s4_B = B_section['se R4 (%)'].values
                    R5_B = B_section['R5'].values
                    s5_B = B_section['se R5 (%)'].values
                    R6_B = B_section['R6'].values
                    s6_B = B_section['se R6 (%)'].values
        elif Analyses_type_value == 1 and block_name == 8:
            global R7_B
            global s7_B
            Name_B = []
            Time_B = []
            Prim_B = []
            delta_B = []
            error_B = []
            R0_B = []
            s0_B = []
            R1_B = []
            s1_B = []
            R2_B = []
            s2_B = []
            R3_B = []
            s3_B = []
            R4_B = []
            s4_B = []
            R5_B = []
            s5_B = []
            R6_B = []
            s6_B = []
            R7_B = []
            s7_B = []
            if Input_Mat_mod == 0:
                if Section_value == 0:
                    if Name_cell == 0:
                        A = pd.DataFrame({'Name' : Filename, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0, 'R1' : R1, 'se R1 (%)' : s1, 'R2' : R2, 'se R2 (%)' : s2, 'R3' : R3, 'se R3 (%)' : s3, 
                        'R4' : R4, 'se R4 (%)' : s4, 'R5' : R5, 'se R5 (%)' : s5, 'R6' : R6, 'se R6 (%)' : s6, 'R7' : R7, 'se R7 (%)' : s7, 'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y,
                        'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'R1', 'se R1 (%)', 'R2', 'se R2 (%)', 'R3', 'se R3 (%)', 'R4', 'se R4 (%)', 'R5', 'se R5 (%)', 'R6', 'se R6 (%)', 'R7', 'se R7 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                    elif Name_cell == 1:
                        A = pd.DataFrame({'Name' : Filename, 'Comment' : Comment, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0, 'R1' : R1, 'se R1 (%)' : s1, 'R2' : R2, 'se R2 (%)' : s2, 'R3' : R3, 'se R3 (%)' : s3, 
                            'R4' : R4, 'se R4 (%)' : s4, 'R5' : R5, 'se R5 (%)' : s5, 'R6' : R6, 'se R6 (%)' : s6, 'R7' : R7, 'se R7 (%)' : s7, 'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y,
                            'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Comment', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'R1', 'se R1 (%)', 'R2', 'se R2 (%)', 'R3', 'se R3 (%)', 'R4', 'se R4 (%)', 'R5', 'se R5 (%)', 'R6', 'se R6 (%)', 'R7', 'se R7 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                        Comment_B = np.transpose(B['Comment'].tolist())
                    Name_B = np.transpose(B['Name'].tolist())
                    Time_B = B['Time (h)'].values
                    Prim_B = B['Primary current (nA)'].values
                    delta_B = B['delta raw (permil)'].values
                    error_B = B['error int (permil)'].values
                    R0_B = B['R0'].values
                    s0_B = B['se R0 (%)'].values
                    R1_B = B['R1'].values
                    s1_B = B['se R1 (%)'].values
                    R2_B = B['R2'].values
                    s2_B = B['se R2 (%)'].values
                    R3_B = B['R3'].values
                    s3_B = B['se R3 (%)'].values
                    R4_B = B['R4'].values
                    s4_B = B['se R4 (%)'].values
                    R5_B = B['R5'].values
                    s5_B = B['se R5 (%)'].values
                    R6_B = B['R6'].values
                    s6_B = B['se R6 (%)'].values
                    R7_B = B['R7'].values
                    s7_B = B['se R7 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
                    R3_B = B_section['R3'].values
                    s3_B = B_section['se R3 (%)'].values
                    R4_B = B_section['R4'].values
                    s4_B = B_section['se R4 (%)'].values
                    R5_B = B_section['R5'].values
                    s5_B = B_section['se R5 (%)'].values
                    R6_B = B_section['R6'].values
                    s6_B = B_section['se R6 (%)'].values
                    R7_B = B_section['R7'].values
                    s7_B = B_section['se R7 (%)'].values
            elif Input_Mat_mod == 1:
                if Section_value == 0:
                    Name_B = np.transpose(B_mod['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_mod['Comment'].tolist())
                    Time_B = B_mod['Time (h)'].values
                    Prim_B = B_mod['Primary current (nA)'].values
                    delta_B = B_mod['delta raw (permil)'].values
                    error_B = B_mod['error int (permil)'].values
                    R0_B = B_mod['R0'].values
                    s0_B = B_mod['se R0 (%)'].values
                    R1_B = B_mod['R1'].values
                    s1_B = B_mod['se R1 (%)'].values
                    R2_B = B_mod['R2'].values
                    s2_B = B_mod['se R2 (%)'].values
                    R3_B = B_mod['R3'].values
                    s3_B = B_mod['se R3 (%)'].values
                    R4_B = B_mod['R4'].values
                    s4_B = B_mod['se R4 (%)'].values
                    R5_B = B_mod['R5'].values
                    s5_B = B_mod['se R5 (%)'].values
                    R6_B = B_mod['R6'].values
                    s6_B = B_mod['se R6 (%)'].values
                    R7_B = B_mod['R7'].values
                    s7_B = B_mod['se R7 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
                    R3_B = B_section['R3'].values
                    s3_B = B_section['se R3 (%)'].values
                    R4_B = B_section['R4'].values
                    s4_B = B_section['se R4 (%)'].values
                    R5_B = B_section['R5'].values
                    s5_B = B_section['se R5 (%)'].values
                    R6_B = B_section['R6'].values
                    s6_B = B_section['se R6 (%)'].values
                    R7_B = B_section['R7'].values
                    s7_B = B_section['se R7 (%)'].values
        elif Analyses_type_value == 1 and block_name == 9:
            global R8_B
            global s8_B
            Name_B = []
            Time_B = []
            Prim_B = []
            delta_B = []
            error_B = []
            R0_B = []
            s0_B = []
            R1_B = []
            s1_B = []
            R2_B = []
            s2_B = []
            R3_B = []
            s3_B = []
            R4_B = []
            s4_B = []
            R5_B = []
            s5_B = []
            R6_B = []
            s6_B = []
            R7_B = []
            s7_B = []
            R8_B = []
            s8_B = []
            if Input_Mat_mod == 0:
                if Section_value == 0:
                    if Name_cell == 0:
                        A = pd.DataFrame({'Name' : Filename, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0, 'R1' : R1, 'se R1 (%)' : s1, 'R2' : R2, 'se R2 (%)' : s2, 'R3' : R3, 'se R3 (%)' : s3, 
                            'R4' : R4, 'se R4 (%)' : s4, 'R5' : R5, 'se R5 (%)' : s5, 'R6' : R6, 'se R6 (%)' : s6, 'R7' : R7, 'se R7 (%)' : s7, 'R8' : R8, 'se R8 (%)' : s8, 'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 
                            'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'R1', 'se R1 (%)', 'R2', 'se R2 (%)', 'R3', 'se R3 (%)', 'R4', 'se R4 (%)', 'R5', 'se R5 (%)', 'R6', 'se R6 (%)', 'R7', 'se R7 (%)', 'R8', 'se R8 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                    elif Name_cell == 1:
                        A = pd.DataFrame({'Name' : Filename, 'Comment' : Comment, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'delta raw (permil)' : delta_raw, 'error int (permil)' : SE_int_raw, 'R0' : R0, 'se R0 (%)' : s0, 'R1' : R1, 'se R1 (%)' : s1, 'R2' : R2, 'se R2 (%)' : s2, 'R3' : R3, 'se R3 (%)' : s3, 
                            'R4' : R4, 'se R4 (%)' : s4, 'R5' : R5, 'se R5 (%)' : s5, 'R6' : R6, 'se R6 (%)' : s6, 'R7' : R7, 'se R7 (%)' : s7, 'R8' : R8, 'se R8 (%)' : s8, 'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 
                            'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Comment', 'Time (h)', 'Primary current (nA)', 'delta raw (permil)', 'error int (permil)', 'R0', 'se R0 (%)', 'R1', 'se R1 (%)', 'R2', 'se R2 (%)', 'R3', 'se R3 (%)', 'R4', 'se R4 (%)', 'R5', 'se R5 (%)', 'R6', 'se R6 (%)', 'R7', 'se R7 (%)', 'R8', 'se R8 (%)', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                        Comment_B = np.transpose(B['Comment'].tolist())
                    Name_B = np.transpose(B['Name'].tolist())
                    Time_B = B['Time (h)'].values
                    Prim_B = B['Primary current (nA)'].values
                    delta_B = B['delta raw (permil)'].values
                    error_B = B['error int (permil)'].values
                    R0_B = B['R0'].values
                    s0_B = B['se R0 (%)'].values
                    R1_B = B['R1'].values
                    s1_B = B['se R1 (%)'].values
                    R2_B = B['R2'].values
                    s2_B = B['se R2 (%)'].values
                    R3_B = B['R3'].values
                    s3_B = B['se R3 (%)'].values
                    R4_B = B['R4'].values
                    s4_B = B['se R4 (%)'].values
                    R5_B = B['R5'].values
                    s5_B = B['se R5 (%)'].values
                    R6_B = B['R6'].values
                    s6_B = B['se R6 (%)'].values
                    R7_B = B['R7'].values
                    s7_B = B['se R7 (%)'].values
                    R8_B = B['R8'].values
                    s8_B = B['se R8 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
                    R3_B = B_section['R3'].values
                    s3_B = B_section['se R3 (%)'].values
                    R4_B = B_section['R4'].values
                    s4_B = B_section['se R4 (%)'].values
                    R5_B = B_section['R5'].values
                    s5_B = B_section['se R5 (%)'].values
                    R6_B = B_section['R6'].values
                    s6_B = B_section['se R6 (%)'].values
                    R7_B = B_section['R7'].values
                    s7_B = B_section['se R7 (%)'].values
                    R8_B = B_section['R8'].values
                    s8_B = B_section['se R8 (%)'].values
            elif Input_Mat_mod == 1:
                if Section_value == 0:
                    Name_B = np.transpose(B_mod['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_mod['Comment'].tolist())
                    Time_B = B_mod['Time (h)'].values
                    Prim_B = B_mod['Primary current (nA)'].values
                    delta_B = B_mod['delta raw (permil)'].values
                    error_B = B_mod['error int (permil)'].values
                    R0_B = B_mod['R0'].values
                    s0_B = B_mod['se R0 (%)'].values
                    R1_B = B_mod['R1'].values
                    s1_B = B_mod['se R1 (%)'].values
                    R2_B = B_mod['R2'].values
                    s2_B = B_mod['se R2 (%)'].values
                    R3_B = B_mod['R3'].values
                    s3_B = B_mod['se R3 (%)'].values
                    R4_B = B_mod['R4'].values
                    s4_B = B_mod['se R4 (%)'].values
                    R5_B = B_mod['R5'].values
                    s5_B = B_mod['se R5 (%)'].values
                    R6_B = B_mod['R6'].values
                    s6_B = B_mod['se R6 (%)'].values
                    R7_B = B_mod['R7'].values
                    s7_B = B_mod['se R7 (%)'].values
                    R8_B = B_mod['R8'].values
                    s8_B = B_mod['se R8 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
                    R3_B = B_section['R3'].values
                    s3_B = B_section['se R3 (%)'].values
                    R4_B = B_section['R4'].values
                    s4_B = B_section['se R4 (%)'].values
                    R5_B = B_section['R5'].values
                    s5_B = B_section['se R5 (%)'].values
                    R6_B = B_section['R6'].values
                    s6_B = B_section['se R6 (%)'].values
                    R7_B = B_section['R7'].values
                    s7_B = B_section['se R7 (%)'].values
                    R8_B = B_section['R8'].values
                    s8_B = B_section['se R8 (%)'].values
        elif Analyses_type_value > 1 and nb_ratios_conc_value == 1:
            global error_R0_B
            Name_B = []
            Time_B = []
            Prim_B = []
            R0_B = []
            error_R0_B = []
            if Input_Mat_mod == 0:
                if Section_value == 0:
                    if Name_cell == 0:
                        A = pd.DataFrame({'Name' : Filename, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'R0' : R0, 'error_R0' : error0, 'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 
                        'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                        'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Time (h)', 'Primary current (nA)', 'R0', 'error_R0', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                    elif Name_cell == 1:
                        A = pd.DataFrame({'Name' : Filename, 'Comment' : Comment, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'R0' : R0, 'error_R0' : error0, 'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 
                            'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                            'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Comment', 'Time (h)', 'Primary current (nA)', 'R0', 'error_R0', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                        Comment_B = np.transpose(B['Comment'].tolist())
                    Name_B = np.transpose(B['Name'].tolist())
                    Time_B = B['Time (h)'].values
                    Prim_B = B['Primary current (nA)'].values
                    R0_B = B['R0'].values
                    error_R0_B = B['error_R0'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
            elif Input_Mat_mod == 1:
                if Section_value == 0:
                    Name_B = np.transpose(B_mod['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_mod['Comment'].tolist())
                    Time_B = B_mod['Time (h)'].values
                    Prim_B = B_mod['Primary current (nA)'].values
                    delta_B = B_mod['delta raw (permil)'].values
                    error_B = B_mod['error int (permil)'].values
                    R0_B = B_mod['R0'].values
                    s0_B = B_mod['se R0 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
        elif Analyses_type_value > 1 and nb_ratios_conc_value == 2:
            global error_R1_B
            Name_B = []
            Time_B = []
            Prim_B = []
            R0_B = []
            error_R0_B = []
            R1_B = []
            error_R1_B = []
            if Input_Mat_mod == 0:
                if Section_value == 0:
                    if Name_cell == 0:
                        A = pd.DataFrame({'Name' : Filename, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'R0' : R0, 'error_R0' : error0, 'R1' : R1, 'error_R1' : error1, 'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 
                            'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                            'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Time (h)', 'Primary current (nA)', 'R0', 'error_R0', 'R1', 'error_R1', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                    elif Name_cell == 1:
                        A = pd.DataFrame({'Name' : Filename, 'Comment' : Comment, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'R0' : R0, 'error_R0' : error0, 'R1' : R1, 'error_R1' : error1, 'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 
                            'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                            'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Comment', 'Time (h)', 'Primary current (nA)', 'R0', 'error_R0', 'R1', 'error_R1', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                        Comment_B = np.transpose(B['Comment'].tolist())
                    Name_B = np.transpose(B['Name'].tolist())
                    Time_B = B['Time (h)'].values
                    Prim_B = B['Primary current (nA)'].values
                    R0_B = B['R0'].values
                    error_R0_B = B['error_R0'].values
                    R1_B = B['R1'].values
                    error_R1_B = B['error_R1'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
            elif Input_Mat_mod == 1:
                if Section_value == 0:
                    Name_B = np.transpose(B_mod['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_mod['Comment'].tolist())
                    Time_B = B_mod['Time (h)'].values
                    Prim_B = B_mod['Primary current (nA)'].values
                    delta_B = B_mod['delta raw (permil)'].values
                    error_B = B_mod['error int (permil)'].values
                    R0_B = B_mod['R0'].values
                    s0_B = B_mod['se R0 (%)'].values
                    R1_B = B_mod['R1'].values
                    s1_B = B_mod['se R1 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
        elif Analyses_type_value > 1 and nb_ratios_conc_value == 3:
            global error_R2_B
            Name_B = []
            Time_B = []
            Prim_B = []
            R0_B = []
            error_R0_B = []
            R1_B = []
            error_R1_B = []
            R2_B = []
            error_R2_B = []
            if Input_Mat_mod == 0:
                if Section_value == 0:
                    if Name_cell == 0:
                        A = pd.DataFrame({'Name' : Filename, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'R0' : R0, 'error_R0' : error0, 'R1' : R1, 'error_R1' : error1, 'R2' : R2, 'error_R2' : error2, 
                            'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                            'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Time (h)', 'Primary current (nA)', 'R0', 'error_R0', 'R1', 'error_R1', 'R2', 'error_R2', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                    elif Name_cell == 1:
                        A = pd.DataFrame({'Name' : Filename, 'Comment' : Comment, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'R0' : R0, 'error_R0' : error0, 'R1' : R1, 'error_R1' : error1, 'R2' : R2, 'error_R2' : error2, 
                            'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                            'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Comment', 'Time (h)', 'Primary current (nA)', 'R0', 'error_R0', 'R1', 'error_R1', 'R2', 'error_R2', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                        Comment_B = np.transpose(B['Comment'].tolist())
                    Name_B = np.transpose(B['Name'].tolist())
                    Time_B = B['Time (h)'].values
                    Prim_B = B['Primary current (nA)'].values
                    R0_B = B['R0'].values
                    error_R0_B = B['error_R0'].values
                    R1_B = B['R1'].values
                    error_R1_B = B['error_R1'].values
                    R2_B = B['R2'].values
                    error_R2_B = B['error_R2'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
            elif Input_Mat_mod == 1:
                if Section_value == 0:
                    Name_B = np.transpose(B_mod['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_mod['Comment'].tolist())
                    Time_B = B_mod['Time (h)'].values
                    Prim_B = B_mod['Primary current (nA)'].values
                    delta_B = B_mod['delta raw (permil)'].values
                    error_B = B_mod['error int (permil)'].values
                    R0_B = B_mod['R0'].values
                    s0_B = B_mod['se R0 (%)'].values
                    R1_B = B_mod['R1'].values
                    s1_B = B_mod['se R1 (%)'].values
                    R2_B = B_mod['R2'].values
                    s2_B = B_mod['se R2 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
        elif Analyses_type_value > 1 and nb_ratios_conc_value == 4:
            global error3_B
            Name_B = []
            Time_B = []
            Prim_B = []
            R0_B = []
            error_R0_B = []
            R1_B = []
            error_R1_B = []
            R2_B = []
            error_R2_B = []
            R3_B = []
            error3_B = []
            if Input_Mat_mod == 0:
                if Section_value == 0:
                    if Name_cell == 0:
                        A = pd.DataFrame({'Name' : Filename, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'R0' : R0, 'error_R0' : error0, 'R1' : R1, 'error_R1' : error1, 'R2' : R2, 'error_R2' : error2, 'R3' : R3, 'error_R3' : error3, 
                            'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                            'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Time (h)', 'Primary current (nA)', 'R0', 'error_R0', 'R1', 'error_R1', 'R2', 'error_R2', 'R3', 'error_R3', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                    elif Name_cell == 1: 
                        A = pd.DataFrame({'Name' : Filename, 'Comment' : Comment, 'Time (h)' : Time, 'Primary current (nA)' : Primary_current, 'R0' : R0, 'error_R0' : error0, 'R1' : R1, 'error_R1' : error1, 'R2' : R2, 'error_R2' : error2, 'R3' : R3, 'error_R3' : error3, 
                            'X position (um)' : X_pos, 'Y position (um)' : Y_pos, 'dt_FA_X' : dt_FA_X, 'dt_FA_Y' : dt_FA_Y, 'dt_CA_X' : dt_CA_X, 'dt_CA_Y' : dt_CA_Y, 'Chamber pressure (mbar)' : Chamber_pressure, 'FA (um)' : FA, 
                            'Entrance slit (um)' : Entr_slit, 'Contrast aperture (um)' : Cont_Ap, 'Max Area' : Max_Area, 'Raster size sputering (um)' : Raster_size_sput, 'Raster size analyses (um)' : Raster_size_analyses})
                        B = A.sort_values(by=['Time (h)'])
                        B = B[['Name', 'Comment', 'Time (h)', 'Primary current (nA)', 'R0', 'error_R0', 'R1', 'error_R1', 'R2', 'error_R2', 'R3', 'error_R3', 'X position (um)', 'Y position (um)', 'dt_FA_X', 'dt_FA_Y', 'dt_CA_X', 'dt_CA_Y', 'Chamber pressure (mbar)', 'FA (um)', 'Entrance slit (um)', 'Contrast aperture (um)', 'Max Area', 'Raster size sputering (um)', 'Raster size analyses (um)']]
                        Comment_B = np.transpose(B['Comment'].tolist())
                    Name_B = np.transpose(B['Name'].tolist())
                    Time_B = B['Time (h)'].values
                    Prim_B = B['Primary current (nA)'].values
                    R0_B = B['R0'].values
                    error_R0_B = B['error_R0'].values
                    R1_B = B['R1'].values
                    error_R1_B = B['error_R1'].values
                    R2_B = B['R2'].values
                    error_R2_B = B['error_R2'].values
                    R3_B = B['R3'].values
                    error3_B = B['error_R3'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
                    R3_B = B_section['R3'].values
                    s3_B = B_section['se R3 (%)'].values
            elif Input_Mat_mod == 1:
                if Section_value == 0:
                    Name_B = np.transpose(B_mod['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_mod['Comment'].tolist())
                    Time_B = B_mod['Time (h)'].values
                    Prim_B = B_mod['Primary current (nA)'].values
                    delta_B = B_mod['delta raw (permil)'].values
                    error_B = B_mod['error int (permil)'].values
                    R0_B = B_mod['R0'].values
                    s0_B = B_mod['se R0 (%)'].values
                    R1_B = B_mod['R1'].values
                    s1_B = B_mod['se R1 (%)'].values
                    R2_B = B_mod['R2'].values
                    s2_B = B_mod['se R2 (%)'].values
                    R3_B = B_mod['R3'].values
                    s3_B = B_mod['se R3 (%)'].values
                elif Section_value == 1:
                    Name_B = np.transpose(B_section['Name'].tolist())
                    if Name_cell == 1:
                        Comment_B = np.transpose(B_section['Comment'].tolist())
                    Time_B = B_section['Time (h)'].values
                    Prim_B = B_section['Primary current (nA)'].values
                    delta_B = B_section['delta raw (permil)'].values
                    error_B = B_section['error int (permil)'].values
                    R0_B = B_section['R0'].values
                    s0_B = B_section['se R0 (%)'].values
                    R1_B = B_section['R1'].values
                    s1_B = B_section['se R1 (%)'].values
                    R2_B = B_section['R2'].values
                    s2_B = B_section['se R2 (%)'].values
                    R3_B = B_section['R3'].values
                    s3_B = B_section['se R3 (%)'].values
        if Input_Mat_mod == 0:
            if Section_value == 0:
                X_pos_B = B['X position (um)'].values
                Y_pos_B = B['Y position (um)'].values
                dt_FA_X_B = B['dt_FA_X'].values
                dt_FA_Y_B = B['dt_FA_Y'].values
                dt_CA_X_B = B['dt_CA_X'].values
                dt_CA_Y_B = B['dt_CA_Y'].values
                Chamber_pressure_B = B['Chamber pressure (mbar)'].values
                FA_B = B['FA (um)'].values
                Entr_slit_B = B['Entrance slit (um)'].values
                Cont_Ap_B = B['Contrast aperture (um)'].values
                Max_Area_B = B['Max Area'].values
                Raster_size_sput_B = B['Raster size sputering (um)'].values
                Raster_size_analyses_B = B['Raster size analyses (um)'].values
            elif Section_value == 1:
                X_pos_B = B_section['X position (um)'].values
                Y_pos_B = B_section['Y position (um)'].values
                dt_FA_X_B = B_section['dt_FA_X'].values
                dt_FA_Y_B = B_section['dt_FA_Y'].values
                dt_CA_X_B = B_section['dt_CA_X'].values
                dt_CA_Y_B = B_section['dt_CA_Y'].values
                Chamber_pressure_B = B_section['Chamber pressure (mbar)'].values
                FA_B = B_section['FA (um)'].values
                Entr_slit_B = B_section['Entrance slit (um)'].values
                Cont_Ap_B = B_section['Contrast aperture (um)'].values
                Max_Area_B = B_section['Max Area'].values
                Raster_size_sput_B = B_section['Raster size sputering (um)'].values
                Raster_size_analyses_B = B_section['Raster size analyses (um)'].values
        elif Input_Mat_mod == 1:
            if Section_value == 0:
                X_pos_B = B_mod['X position (um)'].values
                Y_pos_B = B_mod['Y position (um)'].values
                dt_FA_X_B = B_mod['dt_FA_X'].values
                dt_FA_Y_B = B_mod['dt_FA_Y'].values
                dt_CA_X_B = B_mod['dt_CA_X'].values
                dt_CA_Y_B = B_mod['dt_CA_Y'].values
                Chamber_pressure_B = B_mod['Chamber pressure (mbar)'].values
                FA_B = B_mod['FA (um)'].values
                Entr_slit_B = B_mod['Entrance slit (um)'].values
                Cont_Ap_B = B_mod['Contrast aperture (um)'].values
                Max_Area_B = B_mod['Max Area'].values
                Raster_size_sput_B = B_mod['Raster size sputering (um)'].values
                Raster_size_analyses_B = B_mod['Raster size analyses (um)'].values
            elif Section_value == 1:
                X_pos_B = B_section['X position (um)'].values
                Y_pos_B = B_section['Y position (um)'].values
                dt_FA_X_B = B_section['dt_FA_X'].values
                dt_FA_Y_B = B_section['dt_FA_Y'].values
                dt_CA_X_B = B_section['dt_CA_X'].values
                dt_CA_Y_B = B_section['dt_CA_Y'].values
                Chamber_pressure_B = B_section['Chamber pressure (mbar)'].values
                FA_B = B_section['FA (um)'].values
                Entr_slit_B = B_section['Entrance slit (um)'].values
                Cont_Ap_B = B_section['Contrast aperture (um)'].values
                Max_Area_B = B_section['Max Area'].values
                Raster_size_sput_B = B_section['Raster size sputering (um)'].values
                Raster_size_analyses_B = B_section['Raster size analyses (um)'].values
        if Analyses_type_value == 1 and block_name == 1 and Name_cell == 0:
            Input_Mat = [Name_B, Time_B, Prim_B, delta_B, error_B, R0_B, s0_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 1 and block_name == 2 and Name_cell == 0:
            Input_Mat = [Name_B, Time_B, Prim_B, delta_B, error_B, R0_B, s0_B, R1_B, s1_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 1 and block_name == 3 and Name_cell == 0:
            Input_Mat = [Name_B, Time_B, Prim_B, delta_B, error_B, R0_B, s0_B, R1_B, s1_B, R2_B, s2_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 1 and block_name == 4 and Name_cell == 0:
            Input_Mat = [Name_B, Time_B, Prim_B, delta_B, error_B, R0_B, s0_B, R1_B, s1_B, R2_B, s2_B, R3_B, s3_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 1 and block_name == 5 and Name_cell == 0:
            Input_Mat = [Name_B, Time_B, Prim_B, delta_B, error_B, R0_B, s0_B, R1_B, s1_B, R2_B, s2_B, R3_B, s3_B, R4_B, s4_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 1 and block_name == 6 and Name_cell == 0:
            Input_Mat = [Name_B, Time_B, Prim_B, delta_B, error_B, R0_B, s0_B, R1_B, s1_B, R2_B, s2_B, R3_B, s3_B, R4_B, s4_B, R5_B, s5_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 1 and block_name == 7 and Name_cell == 0:
            Input_Mat = [Name_B, Time_B, Prim_B, delta_B, error_B, R0_B, s0_B, R1_B, s1_B, R2_B, s2_B, R3_B, s3_B, R4_B, s4_B, R5_B, s5_B, R6_B, s6_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 1 and block_name == 8 and Name_cell == 0:
            Input_Mat = [Name_B, Time_B, Prim_B, delta_B, error_B, R0_B, s0_B, R1_B, s1_B, R2_B, s2_B, R3_B, s3_B, R4_B, s4_B, R5_B, s5_B, R6_B, s6_B, R7_B, s7_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and Name_cell == 0:
            Input_Mat = [Name_B, Time_B, Prim_B, R0_B, error_R0_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and Name_cell == 0:
            Input_Mat = [Name_B, Time_B, Prim_B, R0_B, error_R0_B, R1_B, error_R1_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and Name_cell == 0:
            Input_Mat = [Name_B, Time_B, Prim_B, R0_B, error_R0_B, R1_B, error_R1_B, R2_B, error_R2_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and Name_cell == 0:
            Input_Mat = [Name_B, Time_B, Prim_B, R0_B, error_R0_B, R1_B, error_R1_B, R2_B, error_R2_B, R3_B, error3_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 1 and block_name == 1 and Name_cell == 1:
            Input_Mat = [Name_B, Comment_B, Time_B, Prim_B, delta_B, error_B, R0_B, s0_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 1 and block_name == 2 and Name_cell == 1:
            Input_Mat = [Name_B, Comment_B, Time_B, Prim_B, delta_B, error_B, R0_B, s0_B, R1_B, s1_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 1 and block_name == 3 and Name_cell == 1:
            Input_Mat = [Name_B, Comment_B, Time_B, Prim_B, delta_B, error_B, R0_B, s0_B, R1_B, s1_B, R2_B, s2_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 1 and block_name == 4 and Name_cell == 1:
            Input_Mat = [Name_B, Comment_B, Time_B, Prim_B, delta_B, error_B, R0_B, s0_B, R1_B, s1_B, R2_B, s2_B, R3_B, s3_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 1 and block_name == 5 and Name_cell == 1:
            Input_Mat = [Name_B, Comment_B, Time_B, Prim_B, delta_B, error_B, R0_B, s0_B, R1_B, s1_B, R2_B, s2_B, R3_B, s3_B, R4_B, s4_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 1 and block_name == 6 and Name_cell == 1:
            Input_Mat = [Name_B, Comment_B, Time_B, Prim_B, delta_B, error_B, R0_B, s0_B, R1_B, s1_B, R2_B, s2_B, R3_B, s3_B, R4_B, s4_B, R5_B, s5_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 1 and block_name == 7 and Name_cell == 1:
            Input_Mat = [Name_B, Comment_B, Time_B, Prim_B, delta_B, error_B, R0_B, s0_B, R1_B, s1_B, R2_B, s2_B, R3_B, s3_B, R4_B, s4_B, R5_B, s5_B, R6_B, s6_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 1 and block_name == 8 and Name_cell == 1:
            Input_Mat = [Name_B, Comment_B, Time_B, Prim_B, delta_B, error_B, R0_B, s0_B, R1_B, s1_B, R2_B, s2_B, R3_B, s3_B, R4_B, s4_B, R5_B, s5_B, R6_B, s6_B, R7_B, s7_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and Name_cell == 1:
            Input_Mat = [Name_B, Comment_B, Time_B, Prim_B, R0_B, error_R0_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and Name_cell == 1:
            Input_Mat = [Name_B, Comment_B, Time_B, Prim_B, R0_B, error_R0_B, R1_B, error_R1_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and Name_cell == 1:
            Input_Mat = [Name_B, Comment_B, Time_B, Prim_B, R0_B, error_R0_B, R1_B, error_R1_B, R2_B, error_R2_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and Name_cell == 1:
            Input_Mat = [Name_B, Comment_B, Time_B, Prim_B, R0_B, error_R0_B, R1_B, error_R1_B, R2_B, error_R2_B, R3_B, error3_B, X_pos_B, Y_pos_B, dt_FA_X, dt_FA_Y_B, dt_CA_X_B, dt_CA_Y_B, Chamber_pressure_B, FA_B, Entr_slit_B, Cont_Ap_B, Max_Area_B, Raster_size_sput_B, Raster_size_analyses_B]
        try:
            self.std_selection()
            if nb_std_iso_value == 1 or nb_std_conc_value == 1 and std1_name == None:
                raise Exception
            elif nb_std_iso_value == 2 or nb_std_conc_value == 2 and std1_name == None or std2_name == None:
                raise Exception
            elif nb_std_iso_value == 3 or nb_std_conc_value == 3 and std1_name == None or std2_name == None or std3_name == None:
                raise Exception
        except Exception as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Warning)
            msg.setText("One or more standard name is incorrect or missing")
            msg.setWindowTitle("Input standard error")
            # msg.exec_()
        else:
            self.std_selection()

    def std1_name_iso(self):
        global std1_name
        std1_name = None
        std1_name_str = self.lineEdit_std1_name_iso.text()
        std1_name = str(std1_name_str)

    def std2_name_iso(self):
        global std2_name
        std2_name = None
        std2_name_str = self.lineEdit_std2_name_iso.text()
        std2_name = str(std2_name_str)

    def std3_name_iso(self):
        global std3_name
        std3_name = None
        std3_name_str = self.lineEdit_std3_name_iso.text()
        std3_name = str(std3_name_str)

    def std1_name_conc(self):
        global std1_name
        std1_name = None
        std1_name_str = self.lineEdit_std1_name_conc.text()
        std1_name = str(std1_name_str)

    def std2_name_conc(self):
        global std2_name
        std2_name = None
        std2_name_str = self.lineEdit_std2_name_conc.text()
        std2_name = str(std2_name_str)

    def std3_name_conc(self):
        global std3_name
        std3_name = None
        std3_name_str = self.lineEdit_std3_name_conc.text()
        std3_name = str(std3_name_str)

    def std_selection(self):
        if Analyses_type_value == 1 and nb_std_iso_value == 1:
            global Name_std
            global Name_unk
            global Time_std
            global Time_unk
            global delta_std
            global delta_unk
            global error0_std
            global error_unk
            global Comment_std
            global Comment_unk
            Name_std = []
            Name_unk = []
            Comment_std = []
            Comment_unk = []
            Time_std = []
            Time_unk = []
            delta_std = []
            delta_unk = []
            error0_std = []
            error_unk = []
            if Name_cell == 0:
                for num,line in enumerate(Input_Mat[0],0):
                    if std1_name in line:
                        Name_std.append(Input_Mat[0][num])
                        Time_std.append(Input_Mat[1][num])
                        delta_std.append(Input_Mat[3][num])
                        error0_std.append(Input_Mat[4][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Time_unk.append(Input_Mat[1][num])
                        delta_unk.append(Input_Mat[3][num])
                        error_unk.append(Input_Mat[4][num])
            elif Name_cell == 1:
                for num,line in enumerate(Input_Mat[1],0):
                    if std1_name in line:
                        Name_std.append(Input_Mat[0][num])
                        Comment_std.append(Input_Mat[1][num])
                        Time_std.append(Input_Mat[2][num])
                        delta_std.append(Input_Mat[4][num])
                        error0_std.append(Input_Mat[5][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Comment_unk.append(Input_Mat[1][num])
                        Time_unk.append(Input_Mat[2][num])
                        delta_unk.append(Input_Mat[4][num])
                        error_unk.append(Input_Mat[5][num])
        elif Analyses_type_value == 1 and nb_std_iso_value == 2:
            global Name_std1
            global Name_std2
            global Comment_std1
            global Comment_std2
            global Time_std1
            global Time_std2
            global delta_std1
            global delta_std2
            global error0_std1
            global error0_std2
            Name_std1 = []
            Name_std2 = []
            Comment_std1 = []
            Comment_std2 = []
            Name_unk = []
            Time_std1 = []
            Time_std2 = []
            Time_unk = []
            delta_std1 = []
            delta_std2 = []
            delta_unk = []
            error0_std1 = []
            error0_std2 = []
            error_unk = []
            if Name_cell == 0:
                for num,line in enumerate(Input_Mat[0],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[0][num])
                        Time_std1.append(Input_Mat[1][num])
                        delta_std1.append(Input_Mat[3][num])
                        error0_std1.append(Input_Mat[4][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[0][num])
                        Time_std2.append(Input_Mat[1][num])
                        delta_std2.append(Input_Mat[3][num])
                        error0_std2.append(Input_Mat[4][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Time_unk.append(Input_Mat[1][num])
                        delta_unk.append(Input_Mat[3][num])
                        error_unk.append(Input_Mat[4][num])
            elif Name_cell == 1:
                for num,line in enumerate(Input_Mat[1],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[0][num])
                        Comment_std1.append(Input_Mat[1][num])
                        Time_std1.append(Input_Mat[2][num])
                        delta_std1.append(Input_Mat[4][num])
                        error0_std1.append(Input_Mat[5][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[0][num])
                        Comment_std1.append(Input_Mat[1][num])
                        Time_std2.append(Input_Mat[2][num])
                        delta_std2.append(Input_Mat[4][num])
                        error0_std2.append(Input_Mat[5][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Comment_unk.append(Input_Mat[1][num])
                        Time_unk.append(Input_Mat[2][num])
                        delta_unk.append(Input_Mat[4][num])
                        error_unk.append(Input_Mat[5][num])
        elif Analyses_type_value == 1 and nb_std_iso_value == 3:
            global Name_std3
            global Time_std3
            global delta_std3
            global error0_std3
            Name_std1 = []
            Name_std2 = []
            Name_std3 = []
            Name_unk = []
            Time_std1 = []
            Time_std2 = []
            Time_std3 = []
            Time_unk = []
            delta_std1 = []
            delta_std2 = []
            delta_std3 = []
            delta_unk = []
            error0_std1 = []
            error0_std2 = []
            error0_std3 = []
            error_unk = []
            if Name_cell == 0:
                for num,line in enumerate(Input_Mat[0],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[0][num])
                        Time_std1.append(Input_Mat[1][num])
                        delta_std1.append(Input_Mat[3][num])
                        error0_std1.append(Input_Mat[4][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[0][num])
                        Time_std2.append(Input_Mat[1][num])
                        delta_std2.append(Input_Mat[3][num])
                        error0_std2.append(Input_Mat[4][num])
                    elif std3_name in line:
                        Name_std3.append(Input_Mat[0][num])
                        Time_std3.append(Input_Mat[1][num])
                        delta_std3.append(Input_Mat[3][num])
                        error0_std3.append(Input_Mat[4][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Time_unk.append(Input_Mat[1][num])
                        delta_unk.append(Input_Mat[3][num])
                        error_unk.append(Input_Mat[4][num])
            elif Name_cell == 1:
                for num,line in enumerate(Input_Mat[1],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[1][num])
                        Time_std1.append(Input_Mat[2][num])
                        delta_std1.append(Input_Mat[4][num])
                        error0_std1.append(Input_Mat[5][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[1][num])
                        Time_std2.append(Input_Mat[2][num])
                        delta_std2.append(Input_Mat[4][num])
                        error0_std2.append(Input_Mat[5][num])
                    elif std3_name in line:
                        Name_std3.append(Input_Mat[1][num])
                        Time_std3.append(Input_Mat[2][num])
                        delta_std3.append(Input_Mat[4][num])
                        error0_std3.append(Input_Mat[5][num])
                    else:
                        Name_unk.append(Input_Mat[1][num])
                        Time_unk.append(Input_Mat[2][num])
                        delta_unk.append(Input_Mat[4][num])
                        error_unk.append(Input_Mat[5][num])
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1:
            global R0_std
            global R0_unk
            global error0_unk
            Name_std = []
            Name_unk = []
            Time_std = []
            Time_unk = []
            R0_std = []
            R0_unk = []
            error0_std = []
            error0_unk = []
            if Name_cell == 0:
                for num,line in enumerate(Input_Mat[0],0):
                    if std1_name in line:
                        Name_std.append(Input_Mat[0][num])
                        Time_std.append(Input_Mat[1][num])
                        R0_std.append(Input_Mat[3][num])
                        error0_std.append(Input_Mat[4][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Time_unk.append(Input_Mat[1][num])
                        R0_unk.append(Input_Mat[3][num])
                        error0_unk.append(Input_Mat[4][num])
            elif Name_cell == 1:
                for num,line in enumerate(Input_Mat[1],0):
                    if std1_name in line:
                        Name_std.append(Input_Mat[1][num])
                        Time_std.append(Input_Mat[2][num])
                        R0_std.append(Input_Mat[4][num])
                        error0_std.append(Input_Mat[5][num])
                    else:
                        Name_unk.append(Input_Mat[1][num])
                        Time_unk.append(Input_Mat[2][num])
                        R0_unk.append(Input_Mat[4][num])
                        error0_unk.append(Input_Mat[5][num])
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 2:
            global R0_std1
            global R0_std2
            Name_std1 = []
            Name_std2 = []
            Name_unk = []
            Time_std1 = []
            Time_std2 = []
            Time_unk = []
            R0_std1 = []
            R0_std2 = []
            R0_unk = []
            error0_std1 = []
            error0_std2 = []
            error0_unk = []
            if Name_cell == 0:
                for num,line in enumerate(Input_Mat[0],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[0][num])
                        Time_std1.append(Input_Mat[1][num])
                        R0_std1.append(Input_Mat[3][num])
                        error0_std1.append(Input_Mat[4][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[0][num])
                        Time_std2.append(Input_Mat[1][num])
                        R0_std2.append(Input_Mat[3][num])
                        error0_std2.append(Input_Mat[4][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Time_unk.append(Input_Mat[1][num])
                        R0_unk.append(Input_Mat[3][num])
                        error0_unk.append(Input_Mat[4][num])
            elif Name_cell == 1:
                for num,line in enumerate(Input_Mat[1],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[1][num])
                        Time_std1.append(Input_Mat[2][num])
                        R0_std1.append(Input_Mat[4][num])
                        error0_std1.append(Input_Mat[5][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[1][num])
                        Time_std2.append(Input_Mat[2][num])
                        R0_std2.append(Input_Mat[4][num])
                        error0_std2.append(Input_Mat[5][num])
                    else:
                        Name_unk.append(Input_Mat[1][num])
                        Time_unk.append(Input_Mat[2][num])
                        R0_unk.append(Input_Mat[4][num])
                        error0_unk.append(Input_Mat[5][num])
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 3:
            global R0_std3
            Name_std1 = []
            Name_std2 = []
            Name_std3 = []
            Name_unk = []
            Time_std1 = []
            Time_std2 = []
            Time_std3 = []
            Time_unk = []
            R0_std1 = []
            R0_std2 = []
            R0_std3 = []
            R0_unk = []
            error0_std1 = []
            error0_std2 = []
            error0_std3 = []
            error0_unk = []
            if Name_cell == 0:
                for num,line in enumerate(Input_Mat[0],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[0][num])
                        Time_std1.append(Input_Mat[1][num])
                        R0_std1.append(Input_Mat[3][num])
                        error0_std1.append(Input_Mat[4][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[0][num])
                        Time_std2.append(Input_Mat[1][num])
                        R0_std2.append(Input_Mat[3][num])
                        error0_std2.append(Input_Mat[4][num])
                    elif std3_name in line:
                        Name_std3.append(Input_Mat[0][num])
                        Time_std3.append(Input_Mat[1][num])
                        R0_std3.append(Input_Mat[3][num])
                        error0_std3.append(Input_Mat[4][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Time_unk.append(Input_Mat[1][num])
                        R0_unk.append(Input_Mat[3][num])
                        error0_unk.append(Input_Mat[4][num])
            elif Name_cell == 1:
                for num,line in enumerate(Input_Mat[1],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[1][num])
                        Time_std1.append(Input_Mat[2][num])
                        R0_std1.append(Input_Mat[4][num])
                        error0_std1.append(Input_Mat[5][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[1][num])
                        Time_std2.append(Input_Mat[2][num])
                        R0_std2.append(Input_Mat[4][num])
                        error0_std2.append(Input_Mat[5][num])
                    elif std3_name in line:
                        Name_std3.append(Input_Mat[1][num])
                        Time_std3.append(Input_Mat[2][num])
                        R0_std3.append(Input_Mat[4][num])
                        error0_std3.append(Input_Mat[5][num])
                    else:
                        Name_unk.append(Input_Mat[1][num])
                        Time_unk.append(Input_Mat[2][num])
                        R0_unk.append(Input_Mat[4][num])
                        error0_unk.append(Input_Mat[5][num])
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 1:
            global R1_std
            global R1_unk
            global error1_std
            global error1_unk
            Name_std = []
            Name_unk = []
            Time_std = []
            Time_unk = []
            R0_std = []
            R0_unk = []
            error0_std = []
            error0_unk = []
            R1_std = []
            R1_unk = []
            error1_std = []
            error1_unk = []
            if Name_cell == 0:
                for num,line in enumerate(Input_Mat[0],0):
                    if std1_name in line:
                        Name_std.append(Input_Mat[0][num])
                        Time_std.append(Input_Mat[1][num])
                        R0_std.append(Input_Mat[3][num])
                        error0_std.append(Input_Mat[4][num])
                        R1_std.append(Input_Mat[5][num])
                        error1_std.append(Input_Mat[6][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Time_unk.append(Input_Mat[1][num])
                        R0_unk.append(Input_Mat[3][num])
                        error0_unk.append(Input_Mat[4][num])
                        R1_unk.append(Input_Mat[5][num])
                        error1_unk.append(Input_Mat[6][num])
            elif Name_cell == 1:
                for num,line in enumerate(Input_Mat[1],0):
                    if std1_name in line:
                        Name_std.append(Input_Mat[1][num])
                        Time_std.append(Input_Mat[2][num])
                        R0_std.append(Input_Mat[4][num])
                        error0_std.append(Input_Mat[5][num])
                        R1_std.append(Input_Mat[6][num])
                        error1_std.append(Input_Mat[7][num])
                    else:
                        Name_unk.append(Input_Mat[1][num])
                        Time_unk.append(Input_Mat[2][num])
                        R0_unk.append(Input_Mat[4][num])
                        error0_unk.append(Input_Mat[5][num])
                        R1_unk.append(Input_Mat[6][num])
                        error1_unk.append(Input_Mat[7][num])
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 2:
            global R1_std1
            global error1_std1
            global R1_std2
            global error1_std2
            Name_std1 = []
            Name_std2 = []
            Name_unk = []
            Time_std1 = []
            Time_std2 = []
            Time_unk = []
            R0_std1 = []
            R0_std2 = []
            R0_unk = []
            error0_std1 = []
            error0_std2 = []
            error0_unk = []
            R1_std1 = []
            R1_std2 = []
            R1_unk = []
            error1_std1 = []
            error1_std2 = []
            error1_unk = []
            if Name_cell == 0:
                for num,line in enumerate(Input_Mat[0],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[0][num])
                        Time_std1.append(Input_Mat[1][num])
                        R0_std1.append(Input_Mat[3][num])
                        error0_std1.append(Input_Mat[4][num])
                        R1_std1.append(Input_Mat[5][num])
                        error1_std1.append(Input_Mat[6][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[0][num])
                        Time_std2.append(Input_Mat[1][num])
                        R0_std2.append(Input_Mat[3][num])
                        error0_std2.append(Input_Mat[4][num])
                        R1_std2.append(Input_Mat[5][num])
                        error1_std2.append(Input_Mat[6][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Time_unk.append(Input_Mat[1][num])
                        R0_unk.append(Input_Mat[3][num])
                        error0_unk.append(Input_Mat[4][num])
                        R1_unk.append(Input_Mat[5][num])
                        error1_unk.append(Input_Mat[6][num])
            elif Name_cell == 1:
                for num,line in enumerate(Input_Mat[1],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[1][num])
                        Time_std1.append(Input_Mat[2][num])
                        R0_std1.append(Input_Mat[4][num])
                        error0_std1.append(Input_Mat[5][num])
                        R1_std1.append(Input_Mat[6][num])
                        error1_std1.append(Input_Mat[7][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[1][num])
                        Time_std2.append(Input_Mat[2][num])
                        R0_std2.append(Input_Mat[4][num])
                        error0_std2.append(Input_Mat[5][num])
                        R1_std2.append(Input_Mat[6][num])
                        error1_std2.append(Input_Mat[7][num])
                    else:
                        Name_unk.append(Input_Mat[1][num])
                        Time_unk.append(Input_Mat[2][num])
                        R0_unk.append(Input_Mat[4][num])
                        error0_unk.append(Input_Mat[5][num])
                        R1_unk.append(Input_Mat[6][num])
                        error1_unk.append(Input_Mat[7][num])
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 3:
            global R1_std3
            global error1_std3
            Name_std1 = []
            Name_std2 = []
            Name_std3 = []
            Name_unk = []
            Time_std1 = []
            Time_std2 = []
            Time_std3 = []
            Time_unk = []
            R0_std1 = []
            R0_std2 = []
            R0_std3 = []
            R0_unk = []
            error0_std1 = []
            error0_std2 = []
            error0_std3 = []
            error0_unk = []
            R1_std1 = []
            R1_std2 = []
            R1_std3 = []
            R1_unk = []
            error1_std1 = []
            error1_std2 = []
            error1_std3 = []
            error1_unk = []
            if Name_cell == 0:
                for num,line in enumerate(Input_Mat[0],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[0][num])
                        Time_std1.append(Input_Mat[1][num])
                        R0_std1.append(Input_Mat[3][num])
                        error0_std1.append(Input_Mat[4][num])
                        R1_std1.append(Input_Mat[5][num])
                        error1_std1.append(Input_Mat[6][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[0][num])
                        Time_std2.append(Input_Mat[1][num])
                        R0_std2.append(Input_Mat[3][num])
                        error0_std2.append(Input_Mat[4][num])
                        R1_std2.append(Input_Mat[5][num])
                        error1_std2.append(Input_Mat[6][num])
                    elif std3_name in line:
                        Name_std3.append(Input_Mat[0][num])
                        Time_std3.append(Input_Mat[1][num])
                        R0_std3.append(Input_Mat[3][num])
                        error0_std3.append(Input_Mat[4][num])
                        R1_std3.append(Input_Mat[5][num])
                        error1_std3.append(Input_Mat[6][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Time_unk.append(Input_Mat[1][num])
                        R0_unk.append(Input_Mat[3][num])
                        error0_unk.append(Input_Mat[4][num])
                        R1_unk.append(Input_Mat[5][num])
                        error1_unk.append(Input_Mat[6][num])
            elif Name_cell == 1:
                for num,line in enumerate(Input_Mat[1],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[1][num])
                        Time_std1.append(Input_Mat[2][num])
                        R0_std1.append(Input_Mat[4][num])
                        error0_std1.append(Input_Mat[5][num])
                        R1_std1.append(Input_Mat[6][num])
                        error1_std1.append(Input_Mat[7][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[1][num])
                        Time_std2.append(Input_Mat[2][num])
                        R0_std2.append(Input_Mat[4][num])
                        error0_std2.append(Input_Mat[5][num])
                        R1_std2.append(Input_Mat[6][num])
                        error1_std2.append(Input_Mat[7][num])
                    elif std3_name in line:
                        Name_std3.append(Input_Mat[1][num])
                        Time_std3.append(Input_Mat[2][num])
                        R0_std3.append(Input_Mat[4][num])
                        error0_std3.append(Input_Mat[5][num])
                        R1_std3.append(Input_Mat[6][num])
                        error1_std3.append(Input_Mat[7][num])
                    else:
                        Name_unk.append(Input_Mat[1][num])
                        Time_unk.append(Input_Mat[2][num])
                        R0_unk.append(Input_Mat[4][num])
                        error0_unk.append(Input_Mat[5][num])
                        R1_unk.append(Input_Mat[6][num])
                        error1_unk.append(Input_Mat[7][num])
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 1:
            global R2_std
            global R2_unk
            global error2_std
            global error2_unk
            Name_std = []
            Name_unk = []
            Time_std = []
            Time_unk = []
            R0_std = []
            R0_unk = []
            error0_std = []
            error0_unk = []
            R1_std = []
            R1_unk = []
            error1_std = []
            error1_unk = []
            R2_std = []
            R2_unk = []
            error2_std = []
            error2_unk = []
            if Name_cell == 0:
                for num,line in enumerate(Input_Mat[0],0):
                    if std1_name in line:
                        Name_std.append(Input_Mat[0][num])
                        Time_std.append(Input_Mat[1][num])
                        R0_std.append(Input_Mat[3][num])
                        error0_std.append(Input_Mat[4][num])
                        R1_std.append(Input_Mat[5][num])
                        error1_std.append(Input_Mat[6][num])
                        R2_std.append(Input_Mat[7][num])
                        error2_std.append(Input_Mat[8][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Time_unk.append(Input_Mat[1][num])
                        R0_unk.append(Input_Mat[3][num])
                        error0_unk.append(Input_Mat[4][num])
                        R1_unk.append(Input_Mat[5][num])
                        error1_unk.append(Input_Mat[6][num])
                        R2_unk.append(Input_Mat[7][num])
                        error2_unk.append(Input_Mat[8][num])
            elif Name_cell == 1:
                for num,line in enumerate(Input_Mat[1],0):
                    if std1_name in line:
                        Name_std.append(Input_Mat[1][num])
                        Time_std.append(Input_Mat[2][num])
                        R0_std.append(Input_Mat[4][num])
                        error0_std.append(Input_Mat[5][num])
                        R1_std.append(Input_Mat[6][num])
                        error1_std.append(Input_Mat[7][num])
                        R2_std.append(Input_Mat[8][num])
                        error2_std.append(Input_Mat[9][num])
                    else:
                        Name_unk.append(Input_Mat[1][num])
                        Time_unk.append(Input_Mat[2][num])
                        R0_unk.append(Input_Mat[4][num])
                        error0_unk.append(Input_Mat[5][num])
                        R1_unk.append(Input_Mat[6][num])
                        error1_unk.append(Input_Mat[7][num])
                        R2_unk.append(Input_Mat[8][num])
                        error2_unk.append(Input_Mat[9][num])
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 2:
            global R2_std1
            global error2_std1
            global R2_std2
            global error2_std2
            Name_std1 = []
            Name_std2 = []
            Name_unk = []
            Time_std1 = []
            Time_std2 = []
            Time_unk = []
            R0_std1 = []
            R0_std2 = []
            R0_unk = []
            error0_std1 = []
            error0_std2 = []
            error0_unk = []
            R1_std1 = []
            R1_std2 = []
            R1_unk = []
            error1_std1 = []
            error1_std2 = []
            error1_unk = []
            R2_std1 = []
            R2_std2 = []
            R2_unk = []
            error2_std1 = []
            error2_std2 = []
            error2_unk = []
            if Name_cell == 0:
                for num,line in enumerate(Input_Mat[0],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[0][num])
                        Time_std1.append(Input_Mat[1][num])
                        R0_std1.append(Input_Mat[3][num])
                        error0_std1.append(Input_Mat[4][num])
                        R1_std1.append(Input_Mat[5][num])
                        error1_std1.append(Input_Mat[6][num])
                        R2_std1.append(Input_Mat[7][num])
                        error2_std1.append(Input_Mat[8][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[0][num])
                        Time_std2.append(Input_Mat[1][num])
                        R0_std2.append(Input_Mat[3][num])
                        error0_std2.append(Input_Mat[4][num])
                        R1_std2.append(Input_Mat[5][num])
                        error1_std2.append(Input_Mat[6][num])
                        R2_std2.append(Input_Mat[7][num])
                        error2_std2.append(Input_Mat[8][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Time_unk.append(Input_Mat[1][num])
                        R0_unk.append(Input_Mat[3][num])
                        error0_unk.append(Input_Mat[4][num])
                        R1_unk.append(Input_Mat[5][num])
                        error1_unk.append(Input_Mat[6][num])
                        R2_unk.append(Input_Mat[7][num])
                        error2_unk.append(Input_Mat[8][num])
            elif Name_cell == 1:
                for num,line in enumerate(Input_Mat[1],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[1][num])
                        Time_std1.append(Input_Mat[2][num])
                        R0_std1.append(Input_Mat[4][num])
                        error0_std1.append(Input_Mat[5][num])
                        R1_std1.append(Input_Mat[6][num])
                        error1_std1.append(Input_Mat[7][num])
                        R2_std1.append(Input_Mat[8][num])
                        error2_std1.append(Input_Mat[9][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[1][num])
                        Time_std2.append(Input_Mat[2][num])
                        R0_std2.append(Input_Mat[4][num])
                        error0_std2.append(Input_Mat[5][num])
                        R1_std2.append(Input_Mat[6][num])
                        error1_std2.append(Input_Mat[7][num])
                        R2_std2.append(Input_Mat[8][num])
                        error2_std2.append(Input_Mat[9][num])
                    else:
                        Name_unk.append(Input_Mat[1][num])
                        Time_unk.append(Input_Mat[2][num])
                        R0_unk.append(Input_Mat[4][num])
                        error0_unk.append(Input_Mat[5][num])
                        R1_unk.append(Input_Mat[6][num])
                        error1_unk.append(Input_Mat[7][num])
                        R2_unk.append(Input_Mat[8][num])
                        error2_unk.append(Input_Mat[9][num])
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 3:
            global R2_std3
            global error2_std3
            Name_std1 = []
            Name_std2 = []
            Name_std3 = []
            Name_unk = []
            Time_std1 = []
            Time_std2 = []
            Time_std3 = []
            Time_unk = []
            R0_std1 = []
            R0_std2 = []
            R0_std3 = []
            R0_unk = []
            error0_std1 = []
            error0_std2 = []
            error0_std3 = []
            error0_unk = []
            R1_std1 = []
            R1_std2 = []
            R1_std3 = []
            R1_unk = []
            error1_std1 = []
            error1_std2 = []
            error1_std3 = []
            error1_unk = []
            R2_std1 = []
            R2_std2 = []
            R2_std3 = []
            R2_unk = []
            error2_std1 = []
            error2_std2 = []
            error2_std3 = []
            error2_unk = []
            if Name_cell == 0:
                for num,line in enumerate(Input_Mat[0],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[0][num])
                        Time_std1.append(Input_Mat[1][num])
                        R0_std1.append(Input_Mat[3][num])
                        error0_std1.append(Input_Mat[4][num])
                        R1_std1.append(Input_Mat[5][num])
                        error1_std1.append(Input_Mat[6][num])
                        R2_std1.append(Input_Mat[7][num])
                        error2_std1.append(Input_Mat[8][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[0][num])
                        Time_std2.append(Input_Mat[1][num])
                        R0_std2.append(Input_Mat[3][num])
                        error0_std2.append(Input_Mat[4][num])
                        R1_std2.append(Input_Mat[5][num])
                        error1_std2.append(Input_Mat[6][num])
                        R2_std2.append(Input_Mat[7][num])
                        error2_std2.append(Input_Mat[8][num])
                    elif std3_name in line:
                        Name_std3.append(Input_Mat[0][num])
                        Time_std3.append(Input_Mat[1][num])
                        R0_std3.append(Input_Mat[3][num])
                        error0_std3.append(Input_Mat[4][num])
                        R1_std3.append(Input_Mat[5][num])
                        error1_std3.append(Input_Mat[6][num])
                        R2_std3.append(Input_Mat[7][num])
                        error2_std3.append(Input_Mat[8][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Time_unk.append(Input_Mat[1][num])
                        R0_unk.append(Input_Mat[3][num])
                        error0_unk.append(Input_Mat[4][num])
                        R1_unk.append(Input_Mat[5][num])
                        error1_unk.append(Input_Mat[6][num])
                        R2_unk.append(Input_Mat[7][num])
                        error2_unk.append(Input_Mat[8][num])
            elif Name_cell == 1:
                for num,line in enumerate(Input_Mat[1],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[1][num])
                        Time_std1.append(Input_Mat[2][num])
                        R0_std1.append(Input_Mat[4][num])
                        error0_std1.append(Input_Mat[5][num])
                        R1_std1.append(Input_Mat[6][num])
                        error1_std1.append(Input_Mat[7][num])
                        R2_std1.append(Input_Mat[8][num])
                        error2_std1.append(Input_Mat[9][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[1][num])
                        Time_std2.append(Input_Mat[2][num])
                        R0_std2.append(Input_Mat[4][num])
                        error0_std2.append(Input_Mat[5][num])
                        R1_std2.append(Input_Mat[6][num])
                        error1_std2.append(Input_Mat[7][num])
                        R2_std2.append(Input_Mat[8][num])
                        error2_std2.append(Input_Mat[9][num])
                    elif std3_name in line:
                        Name_std3.append(Input_Mat[1][num])
                        Time_std3.append(Input_Mat[2][num])
                        R0_std3.append(Input_Mat[4][num])
                        error0_std3.append(Input_Mat[5][num])
                        R1_std3.append(Input_Mat[6][num])
                        error1_std3.append(Input_Mat[7][num])
                        R2_std3.append(Input_Mat[8][num])
                        error2_std3.append(Input_Mat[9][num])
                    else:
                        Name_unk.append(Input_Mat[1][num])
                        Time_unk.append(Input_Mat[2][num])
                        R0_unk.append(Input_Mat[4][num])
                        error0_unk.append(Input_Mat[5][num])
                        R1_unk.append(Input_Mat[6][num])
                        error1_unk.append(Input_Mat[7][num])
                        R2_unk.append(Input_Mat[8][num])
                        error2_unk.append(Input_Mat[9][num])
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 1:
            global R3_std
            global R3_unk
            global error3_std
            global error3_unk
            Name_std = []
            Name_unk = []
            Time_std = []
            Time_unk = []
            R0_std = []
            R0_unk = []
            error0_std = []
            error0_unk = []
            R1_std = []
            R1_unk = []
            error1_std = []
            error1_unk = []
            R2_std = []
            R2_unk = []
            error2_std = []
            error2_unk = []
            R3_std = []
            R3_unk = []
            error3_std = []
            error3_unk = []
            if Name_cell == 0:
                for num,line in enumerate(Input_Mat[0],0):
                    if std1_name in line:
                        Name_std.append(Input_Mat[0][num])
                        Time_std.append(Input_Mat[1][num])
                        R0_std.append(Input_Mat[3][num])
                        error0_std.append(Input_Mat[4][num])
                        R1_std.append(Input_Mat[5][num])
                        error1_std.append(Input_Mat[6][num])
                        R2_std.append(Input_Mat[7][num])
                        error2_std.append(Input_Mat[8][num])
                        R3_std.append(Input_Mat[9][num])
                        error3_std.append(Input_Mat[10][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Time_unk.append(Input_Mat[1][num])
                        R0_unk.append(Input_Mat[3][num])
                        error0_unk.append(Input_Mat[4][num])
                        R1_unk.append(Input_Mat[5][num])
                        error1_unk.append(Input_Mat[6][num])
                        R2_unk.append(Input_Mat[7][num])
                        error2_unk.append(Input_Mat[8][num])
                        R3_unk.append(Input_Mat[9][num])
                        error3_unk.append(Input_Mat[10][num])
            elif Name_cell == 1:
                for num,line in enumerate(Input_Mat[1],0):
                    if std1_name in line:
                        Name_std.append(Input_Mat[1][num])
                        Time_std.append(Input_Mat[2][num])
                        R0_std.append(Input_Mat[4][num])
                        error0_std.append(Input_Mat[5][num])
                        R1_std.append(Input_Mat[6][num])
                        error1_std.append(Input_Mat[7][num])
                        R2_std.append(Input_Mat[8][num])
                        error2_std.append(Input_Mat[9][num])
                        R3_std.append(Input_Mat[10][num])
                        error3_std.append(Input_Mat[11][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Time_unk.append(Input_Mat[1][num])
                        R0_unk.append(Input_Mat[4][num])
                        error0_unk.append(Input_Mat[5][num])
                        R1_unk.append(Input_Mat[6][num])
                        error1_unk.append(Input_Mat[7][num])
                        R2_unk.append(Input_Mat[8][num])
                        error2_unk.append(Input_Mat[9][num])
                        R3_unk.append(Input_Mat[10][num])
                        error3_unk.append(Input_Mat[11][num])
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 2:
            global R3_std1
            global error3_std1
            global R3_std2
            global error3_std2
            Name_std1 = []
            Name_std2 = []
            Name_unk = []
            Time_std1 = []
            Time_std2 = []
            Time_unk = []
            R0_std1 = []
            R0_std2 = []
            R0_unk = []
            error0_std1 = []
            error0_std2 = []
            error0_unk = []
            R1_std1 = []
            R1_std2 = []
            R1_unk = []
            error1_std1 = []
            error1_std2 = []
            error1_unk = []
            R2_std1 = []
            R2_std2 = []
            R2_unk = []
            error2_std1 = []
            error2_std2 = []
            error2_unk = []
            R3_std1 = []
            R3_std2 = []
            R3_unk = []
            error3_std1 = []
            error3_std2 = []
            error3_unk = []
            if Name_cell == 0:
                for num,line in enumerate(Input_Mat[0],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[0][num])
                        Time_std1.append(Input_Mat[1][num])
                        R0_std1.append(Input_Mat[3][num])
                        error0_std1.append(Input_Mat[4][num])
                        R1_std1.append(Input_Mat[5][num])
                        error1_std1.append(Input_Mat[6][num])
                        R2_std1.append(Input_Mat[7][num])
                        error2_std1.append(Input_Mat[8][num])
                        R3_std1.append(Input_Mat[9][num])
                        error3_std1.append(Input_Mat[10][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[0][num])
                        Time_std2.append(Input_Mat[1][num])
                        R0_std2.append(Input_Mat[3][num])
                        error0_std2.append(Input_Mat[4][num])
                        R1_std2.append(Input_Mat[5][num])
                        error1_std2.append(Input_Mat[6][num])
                        R2_std2.append(Input_Mat[7][num])
                        error2_std2.append(Input_Mat[8][num])
                        R3_std2.append(Input_Mat[9][num])
                        error3_std2.append(Input_Mat[10][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Time_unk.append(Input_Mat[1][num])
                        R0_unk.append(Input_Mat[3][num])
                        error0_unk.append(Input_Mat[4][num])
                        R1_unk.append(Input_Mat[5][num])
                        error1_unk.append(Input_Mat[6][num])
                        R2_unk.append(Input_Mat[7][num])
                        error2_unk.append(Input_Mat[8][num])
                        R3_unk.append(Input_Mat[9][num])
                        error3_unk.append(Input_Mat[10][num])
            elif Name_cell == 1:
                for num,line in enumerate(Input_Mat[1],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[1][num])
                        Time_std1.append(Input_Mat[2][num])
                        R0_std1.append(Input_Mat[4][num])
                        error0_std1.append(Input_Mat[5][num])
                        R1_std1.append(Input_Mat[6][num])
                        error1_std1.append(Input_Mat[7][num])
                        R2_std1.append(Input_Mat[8][num])
                        error2_std1.append(Input_Mat[9][num])
                        R3_std1.append(Input_Mat[10][num])
                        error3_std1.append(Input_Mat[11][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[1][num])
                        Time_std2.append(Input_Mat[2][num])
                        R0_std2.append(Input_Mat[4][num])
                        error0_std2.append(Input_Mat[5][num])
                        R1_std2.append(Input_Mat[6][num])
                        error1_std2.append(Input_Mat[7][num])
                        R2_std2.append(Input_Mat[8][num])
                        error2_std2.append(Input_Mat[9][num])
                        R3_std2.append(Input_Mat[10][num])
                        error3_std2.append(Input_Mat[11][num])
                    else:
                        Name_unk.append(Input_Mat[1][num])
                        Time_unk.append(Input_Mat[2][num])
                        R0_unk.append(Input_Mat[4][num])
                        error0_unk.append(Input_Mat[5][num])
                        R1_unk.append(Input_Mat[6][num])
                        error1_unk.append(Input_Mat[7][num])
                        R2_unk.append(Input_Mat[8][num])
                        error2_unk.append(Input_Mat[9][num])
                        R3_unk.append(Input_Mat[10][num])
                        error3_unk.append(Input_Mat[11][num])
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 3:
            global R3_std3
            global error3_std3
            Name_std1 = []
            Name_std2 = []
            Name_std3 = []
            Name_unk = []
            Time_std1 = []
            Time_std2 = []
            Time_std3 = []
            Time_unk = []
            R0_std1 = []
            R0_std2 = []
            R0_std3 = []
            R0_unk = []
            error0_std1 = []
            error0_std2 = []
            error0_std3 = []
            error0_unk = []
            R1_std1 = []
            R1_std2 = []
            R1_std3 = []
            R1_unk = []
            error1_std1 = []
            error1_std2 = []
            error1_std3 = []
            error1_unk = []
            R2_std1 = []
            R2_std2 = []
            R2_std3 = []
            R2_unk = []
            error2_std1 = []
            error2_std2 = []
            error2_std3 = []
            error2_unk = []
            R3_std1 = []
            R3_std2 = []
            R3_std3 = []
            R3_unk = []
            error3_std1 = []
            error3_std2 = []
            error3_std3 = []
            error3_unk = []
            if Name_cell == 0:
                for num,line in enumerate(Input_Mat[0],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[0][num])
                        Time_std1.append(Input_Mat[1][num])
                        R0_std1.append(Input_Mat[3][num])
                        error0_std1.append(Input_Mat[4][num])
                        R1_std1.append(Input_Mat[5][num])
                        error1_std1.append(Input_Mat[6][num])
                        R2_std1.append(Input_Mat[7][num])
                        error2_std1.append(Input_Mat[8][num])
                        R3_std1.append(Input_Mat[9][num])
                        error3_std1.append(Input_Mat[10][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[0][num])
                        Time_std2.append(Input_Mat[1][num])
                        R0_std2.append(Input_Mat[3][num])
                        error0_std2.append(Input_Mat[4][num])
                        R1_std2.append(Input_Mat[5][num])
                        error1_std2.append(Input_Mat[6][num])
                        R2_std2.append(Input_Mat[7][num])
                        error2_std2.append(Input_Mat[8][num])
                        R3_std2.append(Input_Mat[9][num])
                        error3_std2.append(Input_Mat[10][num])
                    elif std3_name in line:
                        Name_std3.append(Input_Mat[0][num])
                        Time_std3.append(Input_Mat[1][num])
                        R0_std3.append(Input_Mat[3][num])
                        error0_std3.append(Input_Mat[4][num])
                        R1_std3.append(Input_Mat[5][num])
                        error1_std3.append(Input_Mat[6][num])
                        R2_std3.append(Input_Mat[7][num])
                        error2_std3.append(Input_Mat[8][num])
                        R3_std3.append(Input_Mat[9][num])
                        error3_std3.append(Input_Mat[10][num])
                    else:
                        Name_unk.append(Input_Mat[0][num])
                        Time_unk.append(Input_Mat[1][num])
                        R0_unk.append(Input_Mat[3][num])
                        error0_unk.append(Input_Mat[4][num])
                        R1_unk.append(Input_Mat[5][num])
                        error1_unk.append(Input_Mat[6][num])
                        R2_unk.append(Input_Mat[7][num])
                        error2_unk.append(Input_Mat[8][num])
                        R3_unk.append(Input_Mat[9][num])
                        error3_unk.append(Input_Mat[10][num])
            elif Name_cell == 1:
                for num,line in enumerate(Input_Mat[1],0):
                    if std1_name in line:
                        Name_std1.append(Input_Mat[1][num])
                        Time_std1.append(Input_Mat[2][num])
                        R0_std1.append(Input_Mat[4][num])
                        error0_std1.append(Input_Mat[5][num])
                        R1_std1.append(Input_Mat[6][num])
                        error1_std1.append(Input_Mat[7][num])
                        R2_std1.append(Input_Mat[8][num])
                        error2_std1.append(Input_Mat[9][num])
                        R3_std1.append(Input_Mat[10][num])
                        error3_std1.append(Input_Mat[11][num])
                    elif std2_name in line:
                        Name_std2.append(Input_Mat[1][num])
                        Time_std2.append(Input_Mat[2][num])
                        R0_std2.append(Input_Mat[4][num])
                        error0_std2.append(Input_Mat[5][num])
                        R1_std2.append(Input_Mat[6][num])
                        error1_std2.append(Input_Mat[7][num])
                        R2_std2.append(Input_Mat[8][num])
                        error2_std2.append(Input_Mat[9][num])
                        R3_std2.append(Input_Mat[10][num])
                        error3_std2.append(Input_Mat[11][num])
                    elif std3_name in line:
                        Name_std3.append(Input_Mat[1][num])
                        Time_std3.append(Input_Mat[2][num])
                        R0_std3.append(Input_Mat[4][num])
                        error0_std3.append(Input_Mat[5][num])
                        R1_std3.append(Input_Mat[6][num])
                        error1_std3.append(Input_Mat[7][num])
                        R2_std3.append(Input_Mat[8][num])
                        error2_std3.append(Input_Mat[9][num])
                        R3_std3.append(Input_Mat[10][num])
                        error3_std3.append(Input_Mat[11][num])
                    else:
                        Name_unk.append(Input_Mat[1][num])
                        Time_unk.append(Input_Mat[2][num])
                        R0_unk.append(Input_Mat[4][num])
                        error0_unk.append(Input_Mat[5][num])
                        R1_unk.append(Input_Mat[6][num])
                        error1_unk.append(Input_Mat[7][num])
                        R2_unk.append(Input_Mat[8][num])
                        error2_unk.append(Input_Mat[9][num])
                        R3_unk.append(Input_Mat[10][num])
                        error3_unk.append(Input_Mat[11][num])
        if (drift_order_iso_value >= 1) or (drift_order_conc_value >= 1):
            self.fit_data()
        else:
            self.stats_data()

    def fit_data(self):
        global x
        global fit_std
        global fit_std1
        global fit_std2
        global fit_std3
        global fit_R0_std
        global fit_R0_std1
        global fit_R0_std2
        global fit_R0_std3
        global fit_R1_std
        global fit_R1_std1
        global fit_R1_std2
        global fit_R1_std3
        global fit_R2_std
        global fit_R2_std1
        global fit_R2_std2
        global fit_R2_std3
        global fit_R3_std
        global fit_R3_std1
        global fit_R3_std2
        global fit_R3_std3
        global r_std
        global r_std1
        global r_std2
        global r_std3
        global r_R0_std
        global r_R0_std1
        global r_R0_std2
        global r_R0_std3
        global r_R1_std
        global r_R1_std1
        global r_R1_std2
        global r_R1_std3
        global r_R2_std
        global r_R2_std1
        global r_R2_std2
        global r_R2_std3
        global r_R3_std
        global r_R3_std1
        global r_R3_std2
        global r_R3_std3
        global delta_corr_std
        global delta_corr_std1
        global delta_corr_std2
        global delta_corr_std3
        global delta_corr_unk
        global R0_corr_std
        global R0_corr_std1
        global R0_corr_std2
        global R0_corr_std3
        global R0_corr_unk
        global R1_corr_std
        global R1_corr_std1
        global R1_corr_std2
        global R1_corr_std3
        global R1_corr_unk
        global R2_corr_std
        global R2_corr_std1
        global R2_corr_std2
        global R2_corr_std3
        global R2_corr_unk
        global R3_corr_std
        global R3_corr_std1
        global R3_corr_std2
        global R3_corr_std3
        global R3_corr_unk
        global wls_mod
        global wls_mod_std1
        global wls_mod_std2
        global wls_mod_std3
        global wls_R0_mod
        global wls_R1_mod
        global wls_R2_mod
        global wls_R3_mod
        global wls_R0_mod_std1
        global wls_R1_mod_std1
        global wls_R2_mod_std1
        global wls_R3_mod_std1
        global wls_R0_mod_std2
        global wls_R1_mod_std2
        global wls_R2_mod_std2
        global wls_R3_mod_std2
        global wls_R0_mod_std3
        global wls_R1_mod_std3
        global wls_R2_mod_std3
        global wls_R3_mod_std3
        global a0
        global a1
        global a2
        global a3
        global a4
        global a5
        global a6
        global a7
        global iv_u
        global iv_l
        global results
        global results_R0
        global results_R1
        global results_R2
        global results_R3
        global w_std
        global w_R0_std
        global w_R1_std
        global w_R2_std
        global w_R3_std
        global X
        global X_new
        global Y_new
        global Y
        global p_values_a0
        global p_values_a1
        global p_values_a2
        global results_fit
        msg_pvalues = QMessageBox()
        msg_pvalues.setIcon(QMessageBox.Warning)
        msg_pvalues.setText("One or more coefficient has a low p-value.\nOne or more coefficient is not statistically significant.\nCheck the stats.txt file.")
        msg_pvalues.setWindowTitle("Warning: fit not meaningfull")
        if Analyses_type_value == 1 and nb_std_iso_value == 1 and drift_order_iso_value == 1:
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std))
            w_std = 1 / (np.asarray(error0_std) ** 2)
            wls_model = WLS(delta_std, X, weights=w_std)
            results = wls_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            fit_std = a1 * x + a0
            wls_mod = results.predict()
            delta_corr_std = np.asarray(delta_std) - a1 * np.asarray(Time_std)
            delta_corr_unk = np.asarray(delta_unk) - a1 * np.asarray(Time_unk)
            r_std = np.asarray(delta_std) - np.asarray(wls_mod)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            # fit_r = OLS(r_std, X) 
            # results_fit_r = fit_r.fit()
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass
        elif Analyses_type_value == 1 and nb_std_iso_value == 1 and drift_order_iso_value == 2:
            Time2_std = np.asarray(Time_std) ** 2
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std))
            w_std = 1 / (np.asarray(error0_std) ** 2)
            wls_model = WLS(delta_std, X, weights=w_std)
            results = wls_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            fit_std = a2 * (x ** 2) + a1 * x + a0
            wls_mod = results.predict()
            delta_corr_std = np.asarray(delta_std) - (a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            delta_corr_unk = np.asarray(delta_unk) - (a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            r_std = np.asarray(delta_std) - np.asarray(wls_mod)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass
        elif Analyses_type_value == 1 and nb_std_iso_value == 1 and drift_order_iso_value == 3:
            Time2_std = np.asarray(Time_std) ** 2
            Time3_std = np.asarray(Time_std) ** 3
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std, Time3_std))
            w_std = 1 / (np.asarray(error0_std) ** 2)
            wls_model = WLS(delta_std, X, weights=w_std)
            results = wls_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            fit_std = a3 * (x ** 3) + a2 * (x ** 2) + a1 * x + a0
            wls_mod = results.predict()
            delta_corr_std = np.asarray(delta_std) - (a3 * np.asarray(Time_std) ** 3 + a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            delta_corr_unk = np.asarray(delta_unk) - (a3 * np.asarray(Time_unk) ** 3 + a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            r_std = np.asarray(delta_std) - np.asarray(wls_mod)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass
        elif Analyses_type_value == 1 and nb_std_iso_value == 1 and drift_order_iso_value == 4:
            Time2_std = np.asarray(Time_std) ** 2
            Time3_std = np.asarray(Time_std) ** 3
            Time4_std = np.asarray(Time_std) ** 4
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std, Time3_std, Time4_std))
            w_std = 1 / (np.asarray(error0_std) ** 2)
            wls_model = WLS(delta_std, X, weights=w_std)
            results = wls_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            fit_std = a4 * (x ** 4) + a3 * (x ** 3) + a2 * (x ** 2) + a1 * x + a0
            wls_mod = results.predict()
            delta_corr_std = np.asarray(delta_std) - (a4 * np.asarray(Time_std) ** 4 + a3 * np.asarray(Time_std) ** 3 + a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            delta_corr_unk = np.asarray(delta_unk) - (a4 * np.asarray(Time_unk) ** 4 + a3 * np.asarray(Time_unk) ** 3 + a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            r_std = np.asarray(delta_std) - np.asarray(wls_mod)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4]
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value == 1 and nb_std_iso_value == 1 and drift_order_iso_value == 5:
            Time2_std = np.asarray(Time_std) ** 2
            Time3_std = np.asarray(Time_std) ** 3
            Time4_std = np.asarray(Time_std) ** 4
            Time5_std = np.asarray(Time_std) ** 5
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std, Time3_std, Time4_std, Time5_std))
            w_std = 1 / (np.asarray(error0_std) ** 2)
            wls_model = WLS(delta_std, X, weights=w_std)
            results = wls_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            a5 = results.params[5]
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            fit_std = a5 * (x ** 5) + a4 * (x ** 4) + a3 * (x ** 3) + a2 * (x ** 2) + a1 * x + a0
            wls_mod = results.predict()
            delta_corr_std = np.asarray(delta_std) - (a5 * np.asarray(Time_std) ** 5 + a4 * np.asarray(Time_std) ** 4 + a3 * np.asarray(Time_std) ** 3 + a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            delta_corr_unk = np.asarray(delta_unk) - (a5 * np.asarray(Time_unk) ** 5 + a4 * np.asarray(Time_unk) ** 4 + a3 * np.asarray(Time_unk) ** 3 + a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            r_std = np.asarray(delta_std) - np.asarray(wls_mod)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            p_values_a5 = results.pvalues[5]
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05 or p_values_a5 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass  
        elif Analyses_type_value == 1 and nb_std_iso_value == 1 and drift_order_iso_value == 6:
            Time2_std = np.asarray(Time_std) ** 2
            Time3_std = np.asarray(Time_std) ** 3
            Time4_std = np.asarray(Time_std) ** 4
            Time5_std = np.asarray(Time_std) ** 5
            Time6_std = np.asarray(Time_std) ** 6
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std, Time3_std, Time4_std, Time5_std, Time6_std))
            w_std = 1 / (np.asarray(error0_std) ** 2)
            wls_model = WLS(delta_std, X, weights=w_std)
            results = wls_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            a5 = results.params[5]
            a6 = results.params[6]
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            fit_std = a6 * (x ** 6) + a5 * (x ** 5) + a4 * (x ** 4) + a3 * (x ** 3) + a2 * (x ** 2) + a1 * x + a0
            wls_mod = results.predict()
            delta_corr_std = np.asarray(delta_std) - (a6 * np.asarray(Time_std) ** 6 + a5 * np.asarray(Time_std) ** 5 + a4 * np.asarray(Time_std) ** 4 + a3 * np.asarray(Time_std) ** 3 + a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            delta_corr_unk = np.asarray(delta_unk) - (a6 * np.asarray(Time_unk) ** 6 + a5 * np.asarray(Time_unk) ** 5 + a4 * np.asarray(Time_unk) ** 4 + a3 * np.asarray(Time_unk) ** 3 + a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            r_std = np.asarray(delta_std) - np.asarray(wls_mod)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            p_values_a5 = results.pvalues[5] 
            p_values_a6 = results.pvalues[6]
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05 or p_values_a5 >= 0.05 or p_values_a6 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value == 1 and nb_std_iso_value == 1 and drift_order_iso_value == 7:
            Time2_std = np.asarray(Time_std) ** 2
            Time3_std = np.asarray(Time_std) ** 3
            Time4_std = np.asarray(Time_std) ** 4
            Time5_std = np.asarray(Time_std) ** 5
            Time6_std = np.asarray(Time_std) ** 6
            Time7_std = np.asarray(Time_std) ** 7
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std, Time3_std, Time4_std, Time5_std, Time6_std, Time7_std))
            w_std = 1 / (np.asarray(error0_std) ** 2)
            wls_model = WLS(delta_std, X, weights=w_std)
            results = wls_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            a5 = results.params[5]
            a6 = results.params[6]
            a7 = results.params[7]
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            fit_std = a7 *(x ** 7) + a6 * (x ** 6) + a5 * (x ** 5) + a4 * (x ** 4) + a3 * (x ** 3) + a2 * (x ** 2) + a1 * x + a0
            wls_mod = results.predict()
            delta_corr_std = np.asarray(delta_std) - (a7 * np.asarray(Time_std) ** 7 + a6 * np.asarray(Time_std) ** 6 + a5 * np.asarray(Time_std) ** 5 + a4 * np.asarray(Time_std) ** 4 + a3 * np.asarray(Time_std) ** 3 + a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            delta_corr_unk = np.asarray(delta_unk) - (a7 * np.asarray(Time_unk) ** 7 + a6 * np.asarray(Time_unk) ** 6 + a5 * np.asarray(Time_unk) ** 5 + a4 * np.asarray(Time_unk) ** 4 + a3 * np.asarray(Time_unk) ** 3 + a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            r_std = np.asarray(delta_std) - np.asarray(wls_mod)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            p_values_a5 = results.pvalues[5] 
            p_values_a6 = results.pvalues[6] 
            p_values_a7 = results.pvalues[7]
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05 or p_values_a5 >= 0.05 or p_values_a6 >= 0.05 or p_values_a7 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and drift_order_iso_value == 1:
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X = np.vstack((np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1))), np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1)))))
            Y = np.vstack((np.asarray(delta_std1).reshape(len(delta_std1),1), np.asarray(delta_std2).reshape(len(delta_std2),1)))
            w_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_std = np.vstack((w_std1.reshape(len(w_std1),1), w_std2.reshape(len(w_std2),1)))
            wls_model = WLS(Y, X, weights=w_std)
            results = wls_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_std1 = a2 * x + a0
            fit_std2 = a2 * x + a1
            wls_mod_std1 = a2 * np.asarray(Time_std1) + a0
            wls_mod_std2 = a2 * np.asarray(Time_std2) + a1
            delta_corr_std1 = np.asarray(delta_std1) - a2 * np.asarray(Time_std1)
            delta_corr_std2 = np.asarray(delta_std2) - a2 * np.asarray(Time_std2)
            delta_corr_unk = np.asarray(delta_unk) - a2 * np.asarray(Time_unk)
            r_std1 = np.asarray(delta_std1) - np.asarray(wls_mod_std1)
            r_std2 = np.asarray(delta_std2) - np.asarray(wls_mod_std2)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and drift_order_iso_value == 2:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time2_std2 = np.asarray(Time_std2) ** 2
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1)))
            X = np.vstack((X_std1, X_std2))
            Y = np.vstack((np.asarray(delta_std1).reshape(len(delta_std1),1), np.asarray(delta_std2).reshape(len(delta_std2),1)))
            w_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_std = np.vstack((w_std1.reshape(len(w_std1),1), w_std2.reshape(len(w_std2),1)))
            wls_model = WLS(Y, X, weights=w_std)
            results = wls_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_std1 = a3 * (x ** 2) + a2 * x + a0
            fit_std2 = a3 * (x ** 2) + a2 * x + a1
            wls_mod_std1 = a3 * np.asarray(Time2_std1) + a2 * np.asarray(Time_std1) + a0
            wls_mod_std2 = a3 * np.asarray(Time2_std2) + a2 * np.asarray(Time_std2) + a1
            delta_corr_std1 = np.asarray(delta_std1) - (a3 * np.asarray(Time_std1) ** 2 + a2 * np.asarray(Time_std1))
            delta_corr_std2 = np.asarray(delta_std2) - (a3 * np.asarray(Time_std2) ** 2 + a2 * np.asarray(Time_std2))
            delta_corr_unk = np.asarray(delta_unk) - (a3 * np.asarray(Time_unk) ** 2 + a2 * np.asarray(Time_unk))
            r_std1 = np.asarray(delta_std1) - np.asarray(wls_mod_std1)
            r_std2 = np.asarray(delta_std2) - np.asarray(wls_mod_std2)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3]
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass  
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and drift_order_iso_value == 3:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1)))
            X = np.vstack((X_std1, X_std2))
            Y = np.vstack((np.asarray(delta_std1).reshape(len(delta_std1),1), np.asarray(delta_std2).reshape(len(delta_std2),1)))
            w_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_std = np.vstack((w_std1.reshape(len(w_std1),1), w_std2.reshape(len(w_std2),1)))
            wls_model = WLS(Y, X, weights=w_std)
            results = wls_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_std1 = a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a0
            fit_std2 = a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a1
            wls_mod_std1 = a4 * np.asarray(Time3_std1) + a3 * np.asarray(Time2_std1) + a2 * np.asarray(Time_std1) + a0
            wls_mod_std2 = a4 * np.asarray(Time3_std2) + a3 * np.asarray(Time2_std2) + a2 * np.asarray(Time_std2) + a1
            delta_corr_std1 = np.asarray(delta_std1) - (a4 * np.asarray(Time_std1) ** 3 + a3 * np.asarray(Time_std1) ** 2 + a2 * np.asarray(Time_std1))
            delta_corr_std2 = np.asarray(delta_std2) - (a4 * np.asarray(Time_std2) ** 3 + a3 * np.asarray(Time_std2) ** 2 + a2 * np.asarray(Time_std2))
            delta_corr_unk = np.asarray(delta_unk) - (a4 * np.asarray(Time_unk) ** 3 + a3 * np.asarray(Time_unk) ** 2 + a2 * np.asarray(Time_unk))
            r_std1 = np.asarray(delta_std1) - np.asarray(wls_mod_std1)
            r_std2 = np.asarray(delta_std2) - np.asarray(wls_mod_std2)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and drift_order_iso_value == 4:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time4_std1 = np.asarray(Time_std1) ** 4
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            Time4_std2 = np.asarray(Time_std2) ** 4
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1), Time4_std1.reshape(len(Time4_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1), Time4_std2.reshape(len(Time4_std2),1)))
            X = np.vstack((X_std1, X_std2))
            Y = np.vstack((np.asarray(delta_std1).reshape(len(delta_std1),1), np.asarray(delta_std2).reshape(len(delta_std2),1)))
            w_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_std = np.vstack((w_std1.reshape(len(w_std1),1), w_std2.reshape(len(w_std2),1)))
            wls_model = WLS(Y, X, weights=w_std)
            results = wls_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            a5 = results.params[5]
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_std1 = a5 * (x ** 4) + a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a0
            fit_std2 = a5 * (x ** 4) + a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a1
            wls_mod_std1 = a5 * np.asarray(Time4_std1) + a4 * np.asarray(Time3_std1) + a3 * np.asarray(Time2_std1) + a2 * np.asarray(Time_std1) + a0
            wls_mod_std2 = a5 * np.asarray(Time4_std2) + a4 * np.asarray(Time3_std2) + a3 * np.asarray(Time2_std2) + a2 * np.asarray(Time_std2) + a1
            delta_corr_std1 = np.asarray(delta_std1) - (a5 * np.asarray(Time_std1) ** 4 + a4 * np.asarray(Time_std1) ** 3 + a3 * np.asarray(Time_std1) ** 2 + a2 * np.asarray(Time_std1))
            delta_corr_std2 = np.asarray(delta_std2) - (a5 * np.asarray(Time_std2) ** 4 + a4 * np.asarray(Time_std2) ** 3 + a3 * np.asarray(Time_std2) ** 2 + a2 * np.asarray(Time_std2))
            delta_corr_unk = np.asarray(delta_unk) - (a5 * np.asarray(Time_unk) ** 4 + a4 * np.asarray(Time_unk) ** 3 + a3 * np.asarray(Time_unk) ** 2 + a2 * np.asarray(Time_unk))
            r_std1 = np.asarray(delta_std1) - np.asarray(wls_mod_std1)
            r_std2 = np.asarray(delta_std2) - np.asarray(wls_mod_std2)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            p_values_a5 = results.pvalues[5] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05 or p_values_a5 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and drift_order_iso_value == 1:
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y = np.vstack((np.asarray(delta_std1).reshape(len(delta_std1),1), np.asarray(delta_std2).reshape(len(delta_std2),1), np.asarray(delta_std3).reshape(len(delta_std3),1)))
            w_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_std = np.vstack((w_std1.reshape(len(w_std1),1), w_std2.reshape(len(w_std2),1), w_std3.reshape(len(w_std3),1)))
            wls_model = WLS(Y, X, weights=w_std)
            results = wls_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_std1 = a3 * x + a0
            fit_std2 = a3 * x + a1
            fit_std3 = a3 * x + a2
            # std1_new = delta_std1 - a0
            # std2_new = delta_std2 - a1
            # std3_new = delta_std3 - a2
            # X_new = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            # X_new = np.hstack((np.ones((len(X_new),1)), X_new))
            # Y_new = np.vstack((np.asarray(std1_new).reshape(len(std1_new),1), np.asarray(std2_new).reshape(len(std2_new),1), np.asarray(std3_new).reshape(len(std3_new),1)))
            # wls_model_fit = WLS(Y_new, X_new, weights=w_std)
            # results_fit = wls_model_fit.fit()
            wls_mod_std1 = a3 * np.asarray(Time_std1) + a0
            wls_mod_std2 = a3 * np.asarray(Time_std2) + a1
            wls_mod_std3 = a3 * np.asarray(Time_std3) + a2
            delta_corr_std1 = np.asarray(delta_std1) - a3 * np.asarray(Time_std1)
            delta_corr_std2 = np.asarray(delta_std2) - a3 * np.asarray(Time_std2)
            delta_corr_std3 = np.asarray(delta_std3) - a3 * np.asarray(Time_std3)
            delta_corr_unk = np.asarray(delta_unk) - a3 * np.asarray(Time_unk)
            r_std1 = np.asarray(delta_std1) - np.asarray(wls_mod_std1)
            r_std2 = np.asarray(delta_std2) - np.asarray(wls_mod_std2)
            r_std3 = np.asarray(delta_std3) - np.asarray(wls_mod_std3)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and drift_order_iso_value == 2:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time2_std3 = np.asarray(Time_std3) ** 2
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1), Time2_std3.reshape(len(Time2_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y = np.vstack((np.asarray(delta_std1).reshape(len(delta_std1),1), np.asarray(delta_std2).reshape(len(delta_std2),1), np.asarray(delta_std3).reshape(len(delta_std3),1)))
            w_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_std = np.vstack((w_std1.reshape(len(w_std1),1), w_std2.reshape(len(w_std2),1), w_std3.reshape(len(w_std3),1)))
            wls_model = WLS(Y, X, weights=w_std)
            results = wls_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_std1 = a4 * (x ** 2) + a3 * x + a0
            fit_std2 = a4 * (x ** 2) + a3 * x + a1
            fit_std3 = a4 * (x ** 2) + a3 * x + a2
            wls_mod_std1 = a4 * np.asarray(Time2_std1) + a3 * np.asarray(Time_std1) + a0
            wls_mod_std2 = a4 * np.asarray(Time2_std2) + a3 * np.asarray(Time_std2) + a1
            wls_mod_std3 = a4 * np.asarray(Time2_std3) + a3 * np.asarray(Time_std3) + a2
            delta_corr_std1 = np.asarray(delta_std1) - (a4 * np.asarray(Time_std1) ** 2 + a3 * np.asarray(Time_std1))
            delta_corr_std2 = np.asarray(delta_std2) - (a4 * np.asarray(Time_std2) ** 2 + a3 * np.asarray(Time_std2))
            delta_corr_std3 = np.asarray(delta_std3) - (a4 * np.asarray(Time_std3) ** 2 + a3 * np.asarray(Time_std3))
            delta_corr_unk = np.asarray(delta_unk) - (a4 * np.asarray(Time_unk) ** 2 + a3 * np.asarray(Time_unk))
            r_std1 = np.asarray(delta_std1) - np.asarray(wls_mod_std1)
            r_std2 = np.asarray(delta_std2) - np.asarray(wls_mod_std2)
            r_std3 = np.asarray(delta_std3) - np.asarray(wls_mod_std3)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and drift_order_iso_value == 3:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            Time2_std3 = np.asarray(Time_std3) ** 2
            Time3_std3 = np.asarray(Time_std3) ** 3
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1), Time2_std3.reshape(len(Time2_std3),1), Time3_std3.reshape(len(Time3_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y = np.vstack((np.asarray(delta_std1).reshape(len(delta_std1),1), np.asarray(delta_std2).reshape(len(delta_std2),1), np.asarray(delta_std3).reshape(len(delta_std3),1)))
            w_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_std = np.vstack((w_std1.reshape(len(w_std1),1), w_std2.reshape(len(w_std2),1), w_std3.reshape(len(w_std3),1)))
            wls_model = WLS(Y, X, weights=w_std)
            results = wls_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            a5 = results.params[5]
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_std1 = a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a0
            fit_std2 = a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a1
            fit_std3 = a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a2
            wls_mod_std1 = a5 * np.asarray(Time3_std1) + a4 * np.asarray(Time2_std1) + a3 * np.asarray(Time_std1) + a0
            wls_mod_std2 = a5 * np.asarray(Time3_std2) + a4 * np.asarray(Time2_std2) + a3 * np.asarray(Time_std2) + a1
            wls_mod_std3 = a5 * np.asarray(Time3_std3) + a4 * np.asarray(Time2_std3) + a3 * np.asarray(Time_std3) + a2
            delta_corr_std1 = np.asarray(delta_std1) - (a5 * np.asarray(Time_std1) ** 3 + a4 * np.asarray(Time_std1) ** 2 + a3 * np.asarray(Time_std1))
            delta_corr_std2 = np.asarray(delta_std2) - (a5 * np.asarray(Time_std2) ** 3 + a4 * np.asarray(Time_std2) ** 2 + a3 * np.asarray(Time_std2))
            delta_corr_std3 = np.asarray(delta_std3) - (a5 * np.asarray(Time_std3) ** 3 + a4 * np.asarray(Time_std3) ** 2 + a3 * np.asarray(Time_std3))
            delta_corr_unk = np.asarray(delta_unk) - (a5 * np.asarray(Time_unk) ** 3 + a4 * np.asarray(Time_unk) ** 2 + a3 * np.asarray(Time_unk))
            r_std1 = np.asarray(delta_std1) - np.asarray(wls_mod_std1)
            r_std2 = np.asarray(delta_std2) - np.asarray(wls_mod_std2)
            r_std3 = np.asarray(delta_std3) - np.asarray(wls_mod_std3)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            p_values_a5 = results.pvalues[5] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05 or p_values_a5 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and drift_order_iso_value == 4:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time4_std1 = np.asarray(Time_std1) ** 4
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            Time4_std2 = np.asarray(Time_std2) ** 4
            Time2_std3 = np.asarray(Time_std3) ** 2
            Time3_std3 = np.asarray(Time_std3) ** 3
            Time4_std3 = np.asarray(Time_std3) ** 4
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1), Time4_std1.reshape(len(Time4_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1), Time4_std2.reshape(len(Time4_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1), Time2_std3.reshape(len(Time2_std3),1), Time3_std3.reshape(len(Time3_std3),1), Time4_std3.reshape(len(Time4_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y = np.vstack((np.asarray(delta_std1).reshape(len(delta_std1),1), np.asarray(delta_std2).reshape(len(delta_std2),1), np.asarray(delta_std3).reshape(len(delta_std3),1)))
            w_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_std = np.vstack((w_std1.reshape(len(w_std1),1), w_std2.reshape(len(w_std2),1), w_std3.reshape(len(w_std3),1)))
            wls_model = WLS(Y, X, weights=w_std)
            results = wls_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            a5 = results.params[5]
            a6 = results.params[6]
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_std1 = a6 * (x ** 4) + a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a0
            fit_std2 = a6 * (x ** 4) + a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a1
            fit_std3 = a6 * (x ** 4) + a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a2
            wls_mod_std1 = a6 * np.asarray(Time4_std1) + a5 * np.asarray(Time3_std1) + a4 * np.asarray(Time2_std1) + a3 * np.asarray(Time_std1) + a0
            wls_mod_std2 = a6 * np.asarray(Time4_std2) + a5 * np.asarray(Time3_std2) + a4 * np.asarray(Time2_std2) + a3 * np.asarray(Time_std2) + a1
            wls_mod_std3 = a6 * np.asarray(Time4_std3) + a5 * np.asarray(Time3_std3) + a4 * np.asarray(Time2_std3) + a3 * np.asarray(Time_std3) + a2
            delta_corr_std1 = np.asarray(delta_std1) - (a6 * np.asarray(Time_std1) ** 4 + a5 * np.asarray(Time_std1) ** 3 + a4 * np.asarray(Time_std1) ** 2 + a3 * np.asarray(Time_std1))
            delta_corr_std2 = np.asarray(delta_std2) - (a6 * np.asarray(Time_std2) ** 4 + a5 * np.asarray(Time_std2) ** 3 + a4 * np.asarray(Time_std2) ** 2 + a3 * np.asarray(Time_std2))
            delta_corr_std3 = np.asarray(delta_std3) - (a6 * np.asarray(Time_std3) ** 4 + a5 * np.asarray(Time_std3) ** 3 + a4 * np.asarray(Time_std3) ** 2 + a3 * np.asarray(Time_std3))
            delta_corr_unk = np.asarray(delta_unk) - (a6 * np.asarray(Time_unk) ** 4 + a5 * np.asarray(Time_unk) ** 3 + a4 * np.asarray(Time_unk) ** 2 + a3 * np.asarray(Time_unk))
            r_std1 = np.asarray(delta_std1) - np.asarray(wls_mod_std1)
            r_std2 = np.asarray(delta_std2) - np.asarray(wls_mod_std2)
            r_std3 = np.asarray(delta_std3) - np.asarray(wls_mod_std3)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            p_values_a5 = results.pvalues[5] 
            p_values_a6 = results.pvalues[6] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05 or p_values_a5 >= 0.05 or p_values_a6 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and drift_order_conc_value == 1:
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std))
            w_std = 1 / (np.asarray(error0_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_std)
            results = wls_R0_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            fit_R0_std= a1 * x + a0
            wls_R0_mod = results.predict()
            R0_corr_std = R0_std - a1 * np.asarray(Time_std)
            R0_corr_unk = R0_unk - a1 * np.asarray(Time_unk)
            r_R0_std= np.asarray(R0_std) - np.asarray(wls_R0_mod)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and drift_order_conc_value == 2:
            Time2_std = np.asarray(Time_std) ** 2
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std))
            w_std = 1 / (np.asarray(error0_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_std)
            results = wls_R0_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            fit_R0_std = a2 * (x ** 2) + a1 * x + a0
            wls_R0_mod = results.predict()
            R0_corr_std = R0_std - (a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            R0_corr_unk = R0_unk - (a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and drift_order_conc_value == 3:
            Time2_std = np.asarray(Time_std) ** 2
            Time3_std = np.asarray(Time_std) ** 3
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std, Time3_std))
            w_std = 1 / (np.asarray(error0_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_std)
            results = wls_R0_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            fit_R0_std = a3 * (x ** 3) + a2 * (x ** 2) + a1 * x + a0
            wls_R0_mod = results.predict()
            R0_corr_std = R0_std - (a3 * np.asarray(Time_std) ** 3 + a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            R0_corr_unk = R0_unk - (a3 * np.asarray(Time_unk) ** 3 + a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and drift_order_conc_value == 4:
            Time2_std = np.asarray(Time_std) ** 2
            Time3_std = np.asarray(Time_std) ** 3
            Time4_std = np.asarray(Time_std) ** 4
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std, Time3_std, Time4_std))
            w_std = 1 / (np.asarray(error0_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_std)
            results = wls_R0_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            fit_R0_std = a4 * (x ** 4) + a3 * (x ** 3) + a2 * (x ** 2) + a1 * x + a0
            wls_R0_mod = results.predict()
            R0_corr_std = R0_std - (a4 * np.asarray(Time_std) ** 4 + a3 * np.asarray(Time_std) ** 3 + a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            R0_corr_unk = R0_unk - (a4 * np.asarray(Time_unk) ** 4 + a3 * np.asarray(Time_unk) ** 3 + a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and drift_order_conc_value == 5:
            Time2_std = np.asarray(Time_std) ** 2
            Time3_std = np.asarray(Time_std) ** 3
            Time4_std = np.asarray(Time_std) ** 4
            Time5_std = np.asarray(Time_std) ** 5
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std, Time3_std, Time4_std, Time5_std))
            w_std = 1 / (np.asarray(error0_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_std)
            results = wls_R0_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            a5 = results.params[5]
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            fit_R0_std = a5 * (x ** 5) + a4 * (x ** 4) + a3 * (x ** 3) + a2 * (x ** 2) + a1 * x + a0
            wls_R0_mod = results.predict()
            R0_corr_std = R0_std - (a5 * np.asarray(Time_std) ** 5 + a4 * np.asarray(Time_std) ** 4 + a3 * np.asarray(Time_std) ** 3 + a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            R0_corr_unk = R0_unk - (a5 * np.asarray(Time_unk) ** 5 + a4 * np.asarray(Time_unk) ** 4 + a3 * np.asarray(Time_unk) ** 3 + a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            p_values_a5 = results.pvalues[5] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05 or p_values_a5 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and drift_order_conc_value == 6:
            Time2_std = np.asarray(Time_std) ** 2
            Time3_std = np.asarray(Time_std) ** 3
            Time4_std = np.asarray(Time_std) ** 4
            Time5_std = np.asarray(Time_std) ** 5
            Time6_std = np.asarray(Time_std) ** 6
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std, Time3_std, Time4_std, Time5_std, Time6_std))
            w_std = 1 / (np.asarray(error0_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_std)
            results = wls_R0_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            a5 = results.params[5]
            a6 = results.params[6]
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            fit_R0_std = a6 * (x ** 6) + a5 * (x ** 5) + a4 * (x ** 4) + a3 * (x ** 3) + a2 * (x ** 2) + a1 * x + a0
            wls_R0_mod = results.predict()
            R0_corr_std = R0_std - (a6 * np.asarray(Time_std) ** 6 + a5 * np.asarray(Time_std) ** 5 + a4 * np.asarray(Time_std) ** 4 + a3 * np.asarray(Time_std) ** 3 + a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            R0_corr_unk = R0_unk - (a6 * np.asarray(Time_unk) ** 6 + a5 * np.asarray(Time_unk) ** 5 + a4 * np.asarray(Time_unk) ** 4 + a3 * np.asarray(Time_unk) ** 3 + a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            p_values_a5 = results.pvalues[5] 
            p_values_a6 = results.pvalues[6] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05 or p_values_a5 >= 0.05 or p_values_a6 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and drift_order_conc_value == 7:
            Time2_std = np.asarray(Time_std) ** 2
            Time3_std = np.asarray(Time_std) ** 3
            Time4_std = np.asarray(Time_std) ** 4
            Time5_std = np.asarray(Time_std) ** 5
            Time6_std = np.asarray(Time_std) ** 6
            Time7_std = np.asarray(Time_std) ** 7
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std, Time3_std, Time4_std, Time5_std, Time6_std, Time7_std))
            w_std = 1 / (np.asarray(error0_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_std)
            results = wls_R0_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            a5 = results.params[5]
            a6 = results.params[6]
            a7 = results.params[7]
            x = np.linspace(min(np.asarray(Time_std)), max(np.asarray(Time_std)), 200)
            fit_R0_std = a7 *(x ** 7) + a6 * (x ** 6) + a5 * (x ** 5) + a4 * (x ** 4) + a3 * (x ** 3) + a2 * (x ** 2) + a1 * x + a0
            wls_R0_mod = results.predict()
            R0_corr_std = R0_std - (a7 * np.asarray(Time_std) ** 7 + a6 * np.asarray(Time_std) ** 6 + a5 * np.asarray(Time_std) ** 5 + a4 * np.asarray(Time_std) ** 4 + a3 * np.asarray(Time_std) ** 3 + a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            R0_corr_unk = R0_unk - (a7 * np.asarray(Time_unk) ** 7 + a6 * np.asarray(Time_unk) ** 6 + a5 * np.asarray(Time_unk) ** 5 + a4 * np.asarray(Time_unk) ** 4 + a3 * np.asarray(Time_unk) ** 3 + a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            p_values_a5 = results.pvalues[5] 
            p_values_a6 = results.pvalues[6] 
            p_values_a7 = results.pvalues[7] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05 or p_values_a5 >= 0.05 or p_values_a6 >= 0.05 or p_values_a7 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 2 and drift_order_conc_value == 1:
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X = np.vstack((np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1))), np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1)))))
            Y = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            w_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_std = np.vstack((w_std1.reshape(len(w_std1),1), w_std2.reshape(len(w_std2),1)))
            wls_R0_model = WLS(Y, X, weights=w_std)
            results = wls_R0_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_R0_std1 = a2 * x + a0
            fit_R0_std2 = a2 * x + a1
            wls_R0_mod_std1 = a2 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a2 * np.asarray(Time_std2) + a1
            R0_corr_std1 = R0_std1 - a2 * np.asarray(Time_std1)
            R0_corr_std2 = R0_std2 - a2 * np.asarray(Time_std2)
            R0_corr_unk = R0_unk - a2 * np.asarray(Time_unk)
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 2 and drift_order_conc_value == 2:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time2_std2 = np.asarray(Time_std2) ** 2
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1)))
            X = np.vstack((X_std1, X_std2))
            Y = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            w_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_std = np.vstack((w_std1.reshape(len(w_std1),1), w_std2.reshape(len(w_std2),1)))
            wls_R0_model = WLS(Y, X, weights=w_std)
            results = wls_R0_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_R0_std1 = a3 * (x ** 2) + a2 * x + a0
            fit_R0_std2 = a3 * (x ** 2) + a2 * x + a1
            wls_R0_mod_std1 = a3 * np.asarray(Time2_std1) + a2 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a3 * np.asarray(Time2_std2) + a2 * np.asarray(Time_std2) + a1
            R0_corr_std1 = R0_std1 - (a3 * np.asarray(Time_std1) ** 2 + a2 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a3 * np.asarray(Time_std2) ** 2 + a2 * np.asarray(Time_std2))
            R0_corr_unk = R0_unk - (a3 * np.asarray(Time_unk) ** 2 + a2 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 2 and drift_order_conc_value == 3:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1)))
            X = np.vstack((X_std1, X_std2))
            Y = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            w_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_std = np.vstack((w_std1.reshape(len(w_std1),1), w_std2.reshape(len(w_std2),1)))
            wls_R0_model = WLS(Y, X, weights=w_std)
            results = wls_R0_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_R0_std1 = a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a0
            fit_R0_std2 = a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a1
            wls_R0_mod_std1 = a4 * np.asarray(Time3_std1) + a3 * np.asarray(Time2_std1) + a2 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a4 * np.asarray(Time3_std2) + a3 * np.asarray(Time2_std2) + a2 * np.asarray(Time_std2) + a1
            R0_corr_std1 = R0_std1 - (a4 * np.asarray(Time_std1) ** 3 + a3 * np.asarray(Time_std1) ** 2 + a2 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a4 * np.asarray(Time_std2) ** 3 + a3 * np.asarray(Time_std2) ** 2 + a2 * np.asarray(Time_std2))
            R0_corr_unk = R0_unk - (a4 * np.asarray(Time_unk) ** 3 + a3 * np.asarray(Time_unk) ** 2 + a2 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 2 and drift_order_conc_value == 4:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time4_std1 = np.asarray(Time_std1) ** 4
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            Time4_std2 = np.asarray(Time_std2) ** 4
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1), Time4_std1.reshape(len(Time4_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1), Time4_std2.reshape(len(Time4_std2),1)))
            X = np.vstack((X_std1, X_std2))
            Y = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            w_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_std = np.vstack((w_std1.reshape(len(w_std1),1), w_std2.reshape(len(w_std2),1)))
            wls_R0_model = WLS(Y, X, weights=w_std)
            results = wls_R0_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            a5 = results.params[5]
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_R0_std1 = a5 * (x ** 4) + a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a0
            fit_R0_std2 = a5 * (x ** 4) + a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a1
            wls_R0_mod_std1 = a5 * np.asarray(Time4_std1) + a4 * np.asarray(Time3_std1) + a3 * np.asarray(Time2_std1) + a2 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a5 * np.asarray(Time4_std2) + a4 * np.asarray(Time3_std2) + a3 * np.asarray(Time2_std2) + a2 * np.asarray(Time_std2) + a1
            R0_corr_std1 = R0_std1 - (a5 * np.asarray(Time_std1) ** 4 + a4 * np.asarray(Time_std1) ** 3 + a3 * np.asarray(Time_std1) ** 2 + a2 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a5 * np.asarray(Time_std2) ** 4 + a4 * np.asarray(Time_std2) ** 3 + a3 * np.asarray(Time_std2) ** 2 + a2 * np.asarray(Time_std2))
            R0_corr_unk = R0_unk - (a5 * np.asarray(Time_unk) ** 4 + a4 * np.asarray(Time_unk) ** 3 + a3 * np.asarray(Time_unk) ** 2 + a2 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            p_values_a5 = results.pvalues[5] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05 or p_values_a5 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 3 and drift_order_conc_value == 1:
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            w_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_std = np.vstack((w_std1.reshape(len(w_std1),1), w_std2.reshape(len(w_std2),1), w_std3.reshape(len(w_std3),1)))
            wls_R0_model = WLS(Y, X, weights=w_std)
            results = wls_R0_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_R0_std1 = a3 * x + a0
            fit_R0_std2 = a3 * x + a1
            fit_R0_std3 = a3 * x + a2
            wls_R0_mod_std1 = a3 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a3 * np.asarray(Time_std2) + a1
            wls_R0_mod_std3 = a3 * np.asarray(Time_std3) + a2
            R0_corr_std1 = R0_std1 - a3 * np.asarray(Time_std1)
            R0_corr_std2 = R0_std2 - a3 * np.asarray(Time_std2)
            R0_corr_std3 = R0_std3 - a3 * np.asarray(Time_std3)
            R0_corr_unk = R0_unk - a3 * np.asarray(Time_unk)
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R0_std3 = np.asarray(R0_std3) - np.asarray(wls_R0_mod_std3)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 3 and drift_order_conc_value == 2:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time2_std3 = np.asarray(Time_std3) ** 2
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1), Time2_std3.reshape(len(Time2_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            w_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_std = np.vstack((w_std1.reshape(len(w_std1),1), w_std2.reshape(len(w_std2),1), w_std3.reshape(len(w_std3),1)))
            wls_R0_model = WLS(Y, X, weights=w_std)
            results = wls_R0_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_R0_std1 = a4 * (x ** 2) + a3 * x + a0
            fit_R0_std2 = a4 * (x ** 2) + a3 * x + a1
            fit_R0_std3 = a4 * (x ** 2) + a3 * x + a2
            wls_R0_mod_std1 = a4 * np.asarray(Time2_std1) + a3 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a4 * np.asarray(Time2_std2) + a3 * np.asarray(Time_std2) + a1
            wls_R0_mod_std3 = a4 * np.asarray(Time2_std3) + a3 * np.asarray(Time_std3) + a2
            R0_corr_std1 = R0_std1 - (a4 * np.asarray(Time_std1) ** 2 + a3 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a4 * np.asarray(Time_std2) ** 2 + a3 * np.asarray(Time_std2))
            R0_corr_std3 = R0_std3 - (a4 * np.asarray(Time_std3) ** 2 + a3 * np.asarray(Time_std3))
            R0_corr_unk = R0_unk - (a4 * np.asarray(Time_unk) ** 2 + a3 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R0_std3 = np.asarray(R0_std3) - np.asarray(wls_R0_mod_std3)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 3 and drift_order_conc_value == 3:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            Time2_std3 = np.asarray(Time_std3) ** 2
            Time3_std3 = np.asarray(Time_std3) ** 3
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1), Time2_std3.reshape(len(Time2_std3),1), Time3_std3.reshape(len(Time3_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            w_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_std = np.vstack((w_std1.reshape(len(w_std1),1), w_std2.reshape(len(w_std2),1), w_std3.reshape(len(w_std3),1)))
            wls_R0_model = WLS(Y, X, weights=w_std)
            results = wls_R0_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            a5 = results.params[5]
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_R0_std1 = a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a0
            fit_R0_std2 = a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a1
            fit_R0_std3 = a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a2
            wls_R0_mod_std1 = a5 * np.asarray(Time3_std1) + a4 * np.asarray(Time2_std1) + a3 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a5 * np.asarray(Time3_std2) + a4 * np.asarray(Time2_std2) + a3 * np.asarray(Time_std2) + a1
            wls_R0_mod_std3 = a5 * np.asarray(Time3_std3) + a4 * np.asarray(Time2_std3) + a3 * np.asarray(Time_std3) + a2
            R0_corr_std1 = R0_std1 - (a5 * np.asarray(Time_std1) ** 3 + a4 * np.asarray(Time_std1) ** 2 + a3 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a5 * np.asarray(Time_std2) ** 3 + a4 * np.asarray(Time_std2) ** 2 + a3 * np.asarray(Time_std2))
            R0_corr_std3 = R0_std3 - (a5 * np.asarray(Time_std3) ** 3 + a4 * np.asarray(Time_std3) ** 2 + a3 * np.asarray(Time_std3))
            R0_corr_unk = R0_unk - (a5 * np.asarray(Time_unk) ** 3 + a3 * np.asarray(Time_unk) ** 2 + a3 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R0_std3 = np.asarray(R0_std3) - np.asarray(wls_R0_mod_std3)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            p_values_a5 = results.pvalues[5] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05 or p_values_a5 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 3 and drift_order_conc_value == 4:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time4_std1 = np.asarray(Time_std1) ** 4
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            Time4_std2 = np.asarray(Time_std2) ** 4
            Time2_std3 = np.asarray(Time_std3) ** 2
            Time3_std3 = np.asarray(Time_std3) ** 3
            Time4_std3 = np.asarray(Time_std3) ** 4
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1), Time4_std1.reshape(len(Time4_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1), Time4_std2.reshape(len(Time4_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1), Time2_std3.reshape(len(Time2_std3),1), Time3_std3.reshape(len(Time3_std3),1), Time4_std3.reshape(len(Time4_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            w_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_std = np.vstack((w_std1.reshape(len(w_std1),1), w_std2.reshape(len(w_std2),1), w_std3.reshape(len(w_std3),1)))
            wls_R0_model = WLS(Y, X, weights=w_std)
            results = wls_R0_model.fit()
            a0 = results.params[0]
            a1 = results.params[1]
            a2 = results.params[2]
            a3 = results.params[3]
            a4 = results.params[4]
            a5 = results.params[5]
            a6 = results.params[6]
            x = np.linspace(min(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_R0_std1 = a6 * (x ** 4) + a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a0
            fit_R0_std2 = a6 * (x ** 4) + a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a1
            fit_R0_std3 = a6 * (x ** 4) + a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a2
            wls_R0_mod_std1 = a6 * np.asarray(Time4_std1) + a5 * np.asarray(Time3_std1) + a4 * np.asarray(Time2_std1) + a3 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a6 * np.asarray(Time4_std2) + a5 * np.asarray(Time3_std2) + a4 * np.asarray(Time2_std2) + a3 * np.asarray(Time_std2) + a1
            wls_R0_mod_std3 = a6 * np.asarray(Time4_std3) + a5 * np.asarray(Time3_std3) + a4 * np.asarray(Time2_std3) + a3 * np.asarray(Time_std3) + a2
            R0_corr_std1 = R0_std1 - (a6 * np.asarray(Time_std1) ** 4 + a5 * np.asarray(Time_std1) ** 3 + a4 * np.asarray(Time_std1) ** 2 + a3 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a6 * np.asarray(Time_std2) ** 4 + a5 * np.asarray(Time_std2) ** 3 + a4 * np.asarray(Time_std2) ** 2 + a3 * np.asarray(Time_std2))
            R0_corr_std3 = R0_std3 - (a6 * np.asarray(Time_std3) ** 4 + a5 * np.asarray(Time_std3) ** 3 + a4 * np.asarray(Time_std3) ** 2 + a3 * np.asarray(Time_std3))
            R0_corr_unk = R0_unk - (a6 * np.asarray(Time_unk) ** 4 + a5 * np.asarray(Time_unk) ** 3 + a3 * np.asarray(Time_unk) ** 2 + a3 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R0_std3 = np.asarray(R0_std3) - np.asarray(wls_R0_mod_std3)
            p_values_a0 = results.pvalues[0]
            p_values_a1 = results.pvalues[1]
            p_values_a2 = results.pvalues[2]
            p_values_a3 = results.pvalues[3] 
            p_values_a4 = results.pvalues[4] 
            p_values_a5 = results.pvalues[5] 
            p_values_a6 = results.pvalues[6] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_a3 >= 0.05 or p_values_a4 >= 0.05 or p_values_a5 >= 0.05 or p_values_a6 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 1 and drift_order_conc_value == 1:
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std))
            w_R0_std = 1 / (np.asarray(error0_std) ** 2)
            w_R1_std = 1 / (np.asarray(error1_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_R0_std)
            wls_R1_model = WLS(R1_std, X, weights=w_R1_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            x = np.linspace(0, max(np.asarray(Time_std)), 200)
            fit_R0_std = a1 * x + a0
            fit_R1_std = b1 * x + b0
            wls_R0_mod = a1 * np.asarray(Time_std) + a0
            wls_R1_mod = b1 * np.asarray(Time_std) + b0
            R0_corr_std = R0_std - a1 * np.asarray(Time_std)
            R1_corr_std = R1_std - b1 * np.asarray(Time_std)
            R0_corr_unk = R0_unk - a1 * np.asarray(Time_unk)
            R1_corr_unk = R1_unk - b1 * np.asarray(Time_unk)
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            r_R1_std = np.asarray(R1_std) - np.asarray(wls_R1_mod)
            p_values_a0 = results_R0.pvalues[0]
            p_values_a1 = results_R0.pvalues[1]
            p_values_b0 = results_R1.pvalues[0]
            p_values_b1 = results_R1.pvalues[1] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_b0 >= 0.05 or p_values_b1 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 1 and drift_order_conc_value == 2:
            Time2_std = np.asarray(Time_std) ** 2
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std))
            w_R0_std = 1 / (np.asarray(error0_std) ** 2)
            w_R1_std = 1 / (np.asarray(error1_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_R0_std)
            wls_R1_model = WLS(R1_std, X, weights=w_R1_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            x = np.linspace(0, max(np.asarray(Time_std)), 200)
            fit_R0_std = a2 * (x ** 2) + a1 * x + a0
            fit_R1_std = b2 * (x ** 2) + b1 * x + b0
            wls_R0_mod = a2 * np.asarray(Time2_std) + a1 * np.asarray(Time_std) + a0
            wls_R1_mod = b2 * np.asarray(Time2_std) + b1 * np.asarray(Time_std) + b0
            R0_corr_std = R0_std - (a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            R1_corr_std = R1_std - (b2 * np.asarray(Time_std) ** 2 + b1 * np.asarray(Time_std))
            R0_corr_unk = R0_unk - (a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b2 * np.asarray(Time_unk) ** 2 + b1 * np.asarray(Time_unk))
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            r_R1_std = np.asarray(R1_std) - np.asarray(wls_R1_mod)
            p_values_a0 = results_R0.pvalues[0]
            p_values_a1 = results_R0.pvalues[1]
            p_values_a2 = results_R0.pvalues[2]
            p_values_b0 = results_R1.pvalues[0]
            p_values_b1 = results_R1.pvalues[1] 
            p_values_b2 = results_R1.pvalues[2] 
            if p_values_a0 >= 0.05 or p_values_a1 >= 0.05 or p_values_a2 >= 0.05 or p_values_b0 >= 0.05 or p_values_b1 >= 0.05 or p_values_b2 >= 0.05:
                msg_pvalues.exec_()
            else:
                pass 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 1 and drift_order_conc_value == 3:
            Time2_std = np.asarray(Time_std) ** 2
            Time3_std = np.asarray(Time_std) ** 3
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std, Time3_std))
            w_R0_std = 1 / (np.asarray(error0_std) ** 2)
            w_R1_std = 1 / (np.asarray(error1_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_R0_std)
            wls_R1_model = WLS(R1_std, X, weights=w_R1_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            x = np.linspace(0, max(np.asarray(Time_std)), 200)
            fit_R0_std = a3 * (x ** 3) + a2 * (x ** 2) + a1 * x + a0
            fit_R1_std = b3 * (x ** 3) + b2 * (x ** 2) + b1 * x + b0
            wls_R0_mod = a3 * np.asarray(Time3_std) + a2 * np.asarray(Time2_std) + a1 * np.asarray(Time_std) + a0
            wls_R1_mod = b3 * np.asarray(Time3_std) + b2 * np.asarray(Time2_std) + b1 * np.asarray(Time_std) + b0
            R0_corr_std = R0_std - (a3 * np.asarray(Time_std) ** 3 + a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            R1_corr_std = R1_std - (b3 * np.asarray(Time_std) ** 3 + b2 * np.asarray(Time_std) ** 2 + b1 * np.asarray(Time_std))
            R0_corr_unk = R0_unk - (a3 * np.asarray(Time_unk) ** 3 + a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b3 * np.asarray(Time_unk) ** 3 + b2 * np.asarray(Time_unk) ** 2 + b1 * np.asarray(Time_unk))
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            r_R1_std = np.asarray(R1_std) - np.asarray(wls_R1_mod)
            p_values_a0 = results_R0.pvalues[0]
            p_values_a1 = results_R0.pvalues[1]
            p_values_a2 = results_R0.pvalues[2]
            p_values_a3 = results_R0.pvalues[3]
            p_values_b0 = results_R1.pvalues[0]
            p_values_b1 = results_R1.pvalues[1] 
            p_values_b2 = results_R1.pvalues[2] 
            p_values_b3 = results_R1.pvalues[3] 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 1 and drift_order_conc_value == 4:
            Time2_std = np.asarray(Time_std) ** 2
            Time3_std = np.asarray(Time_std) ** 3
            Time4_std = np.asarray(Time_std) ** 4
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std, Time3_std, Time4_std))
            w_R0_std = 1 / (np.asarray(error0_std) ** 2)
            w_R1_std = 1 / (np.asarray(error1_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_R0_std)
            wls_R1_model = WLS(R1_std, X, weights=w_R1_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            x = np.linspace(0, max(np.asarray(Time_std)), 200)
            fit_R0_std = a4 * (x ** 4) + a3 * (x ** 3) + a2 * (x ** 2) + a1 * x + a0
            fit_R1_std = b4 * (x ** 4) + b3 * (x ** 3) + b2 * (x ** 2) + b1 * x + b0
            wls_R0_mod = a4 * np.asarray(Time4_std) + a3 * np.asarray(Time3_std) + a2 * np.asarray(Time2_std) + a1 * np.asarray(Time_std) + a0
            wls_R1_mod = b4 * np.asarray(Time4_std) + b3 * np.asarray(Time3_std) + b2 * np.asarray(Time2_std) + b1 * np.asarray(Time_std) + b0
            R0_corr_std = R0_std - (a4 * np.asarray(Time_std) ** 4 + a3 * np.asarray(Time_std) ** 3 + a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            R1_corr_std = R1_std - (b4 * np.asarray(Time_std) ** 4 + b3 * np.asarray(Time_std) ** 3 + b2 * np.asarray(Time_std) ** 2 + b1 * np.asarray(Time_std))
            R0_corr_unk = R0_unk - (a4 * np.asarray(Time_unk) ** 4 + a3 * np.asarray(Time_unk) ** 3 + a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b4 * np.asarray(Time_unk) ** 4 + b3 * np.asarray(Time_unk) ** 3 + b2 * np.asarray(Time_unk) ** 2 + b1 * np.asarray(Time_unk))
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            r_R1_std = np.asarray(R1_std) - np.asarray(wls_R1_mod)
            p_values_a0 = results_R0.pvalues[0]
            p_values_a1 = results_R0.pvalues[1]
            p_values_a2 = results_R0.pvalues[2]
            p_values_a3 = results_R0.pvalues[3]
            p_values_a4 = results_R0.pvalues[4]
            p_values_b0 = results_R1.pvalues[0]
            p_values_b1 = results_R1.pvalues[1] 
            p_values_b2 = results_R1.pvalues[2] 
            p_values_b3 = results_R1.pvalues[3] 
            p_values_b4 = results_R1.pvalues[4] 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 2 and drift_order_conc_value == 1:
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X = np.vstack((np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1))), np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1)))))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_R0_std1 = a2 * x + a0
            fit_R0_std2 = a2 * x + a1
            fit_R1_std1 = b2 * x + b0
            fit_R1_std2 = b2 * x + b1
            wls_R0_mod_std1 = a2 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a2 * np.asarray(Time_std2) + a1
            wls_R1_mod_std1 = b2 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b2 * np.asarray(Time_std2) + b1
            R0_corr_std1 = R0_std1 - a2 * np.asarray(Time_std1)
            R1_corr_std1 = R1_std1 - b2 * np.asarray(Time_std1)
            R0_corr_std2 = R0_std2 - a2 * np.asarray(Time_std2)
            R1_corr_std2 = R1_std2 - b2 * np.asarray(Time_std2)
            R0_corr_unk = R0_unk - a2 * np.asarray(Time_unk)
            R1_corr_unk = R1_unk - b2 * np.asarray(Time_unk)
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            p_values_a0 = results_R0.pvalues[0]
            p_values_a1 = results_R0.pvalues[1]
            p_values_a2 = results_R0.pvalues[2]
            p_values_b0 = results_R1.pvalues[0]
            p_values_b1 = results_R1.pvalues[1] 
            p_values_b2 = results_R1.pvalues[2] 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 2 and drift_order_conc_value == 2:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time2_std2 = np.asarray(Time_std2) ** 2
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1)))
            X = np.vstack((X_std1, X_std2))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_R0_std1 = a3 * (x ** 2) + a2 * x + a0
            fit_R0_std2 = a3 * (x ** 2) + a2 * x + a1
            fit_R1_std1 = b3 * (x ** 2) + b2 * x + b0
            fit_R1_std2 = b3 * (x ** 2) + b2 * x + b1
            wls_R0_mod_std1 = a3 * np.asarray(Time2_std1) + a2 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a3 * np.asarray(Time2_std2) + a2 * np.asarray(Time_std2) + a1
            wls_R1_mod_std1 = b3 * np.asarray(Time2_std1) + b2 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b3 * np.asarray(Time2_std2) + b2 * np.asarray(Time_std2) + b1
            R0_corr_std1 = R0_std1 - (a3 * np.asarray(Time_std1) ** 2 + a2 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b3 * np.asarray(Time_std1) ** 2 + b2 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a3 * np.asarray(Time_std2) ** 2 + a2 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b3 * np.asarray(Time_std2) ** 2 + b2 * np.asarray(Time_std2))
            R0_corr_unk = R0_unk - (a3 * np.asarray(Time_unk) ** 2 + a2 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b3 * np.asarray(Time_unk) ** 2 + b2 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            p_values_a0 = results_R0.pvalues[0]
            p_values_a1 = results_R0.pvalues[1]
            p_values_a2 = results_R0.pvalues[2]
            p_values_a3 = results_R0.pvalues[3]
            p_values_b0 = results_R1.pvalues[0]
            p_values_b1 = results_R1.pvalues[1] 
            p_values_b2 = results_R1.pvalues[2] 
            p_values_b3 = results_R1.pvalues[3] 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 2 and drift_order_conc_value == 3:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1)))
            X = np.vstack((X_std1, X_std2))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_R0_std1 = a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a0
            fit_R0_std2 = a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a1
            fit_R1_std1 = b4 * (x ** 3) + b3 * (x ** 2) + b2 * x + b0
            fit_R1_std2 = b4 * (x ** 3) + b3 * (x ** 2) + b2 * x + b1
            wls_R0_mod_std1 = a4 * np.asarray(Time3_std1) + a3 * np.asarray(Time2_std1) + a2 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a4 * np.asarray(Time3_std2) + a3 * np.asarray(Time2_std2) + a2 * np.asarray(Time_std2) + a1
            wls_R1_mod_std1 = b4 * np.asarray(Time3_std1) + b3 * np.asarray(Time2_std1) + b2 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b4 * np.asarray(Time3_std2) + b3 * np.asarray(Time2_std2) + b2 * np.asarray(Time_std2) + b1
            R0_corr_std1 = R0_std1 - (a4 * np.asarray(Time_std1) ** 3 + a3 * np.asarray(Time_std1) ** 2 + a2 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b4 * np.asarray(Time_std1) ** 3 + b3 * np.asarray(Time_std1) ** 2 + b2 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a4 * np.asarray(Time_std2) ** 3 + a3 * np.asarray(Time_std2) ** 2 + a2 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b4 * np.asarray(Time_std2) ** 3 + b3 * np.asarray(Time_std2) ** 2 + b2 * np.asarray(Time_std2))
            R0_corr_unk = R0_unk - (a4 * np.asarray(Time_unk) ** 3 + a3 * np.asarray(Time_unk) ** 2 + a2 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b4 * np.asarray(Time_unk) ** 3 + b3 * np.asarray(Time_unk) ** 2 + b2 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            p_values_a0 = results_R0.pvalues[0]
            p_values_a1 = results_R0.pvalues[1]
            p_values_a2 = results_R0.pvalues[2]
            p_values_a3 = results_R0.pvalues[3]
            p_values_a4 = results_R0.pvalues[4]
            p_values_b0 = results_R1.pvalues[0]
            p_values_b1 = results_R1.pvalues[1] 
            p_values_b2 = results_R1.pvalues[2] 
            p_values_b3 = results_R1.pvalues[3] 
            p_values_b4 = results_R1.pvalues[4] 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 2 and drift_order_conc_value == 4:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time4_std1 = np.asarray(Time_std1) ** 4
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            Time4_std2 = np.asarray(Time_std2) ** 4
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1), Time4_std1.reshape(len(Time4_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1), Time4_std2.reshape(len(Time4_std2),1)))
            X = np.vstack((X_std1, X_std2))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            a5 = results_R0.params[5]
            b0 = results_R0.params[0]
            b1 = results_R0.params[1]
            b2 = results_R0.params[2]
            b3 = results_R0.params[3]
            b4 = results_R0.params[4]
            b5 = results_R0.params[5]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_R0_std1 = a5 * (x ** 4) + a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a0
            fit_R0_std2 = a5 * (x ** 4) + a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a1
            fit_R1_std1 = b5 * (x ** 4) + b4 * (x ** 3) + b3 * (x ** 2) + b2 * x + b0
            fit_R1_std2 = b5 * (x ** 4) + b4 * (x ** 3) + b3 * (x ** 2) + b2 * x + b1
            wls_R0_mod_std1 = a5 * np.asarray(Time4_std1) + a4 * np.asarray(Time3_std1) + a3 * np.asarray(Time2_std1) + a2 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a5 * np.asarray(Time4_std2) + a4 * np.asarray(Time3_std2) + a3 * np.asarray(Time2_std2) + a2 * np.asarray(Time_std2) + a1
            wls_R1_mod_std1 = b5 * np.asarray(Time4_std1) + b4 * np.asarray(Time3_std1) + b3 * np.asarray(Time2_std1) + b2 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b5 * np.asarray(Time4_std2) + b4 * np.asarray(Time3_std2) + b3 * np.asarray(Time2_std2) + b2 * np.asarray(Time_std2) + b1
            R0_corr_std1 = R0_std1 - (a5 * np.asarray(Time_std1) ** 4 + a4 * np.asarray(Time_std1) ** 3 + a3 * np.asarray(Time_std1) ** 2 + a2 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b5 * np.asarray(Time_std1) ** 4 + b4 * np.asarray(Time_std1) ** 3 + b3 * np.asarray(Time_std1) ** 2 + b2 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a5 * np.asarray(Time_std2) ** 4 + a4 * np.asarray(Time_std2) ** 3 + a3 * np.asarray(Time_std2) ** 2 + a2 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b5 * np.asarray(Time_std2) ** 4 + b4 * np.asarray(Time_std2) ** 3 + b3 * np.asarray(Time_std2) ** 2 + b2 * np.asarray(Time_std2))
            R0_corr_unk = R0_unk - (a5 * np.asarray(Time_unk) ** 4 + a4 * np.asarray(Time_unk) ** 3 + a3 * np.asarray(Time_unk) ** 2 + a2 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b5 * np.asarray(Time_unk) ** 4 + b4 * np.asarray(Time_unk) ** 3 + b3 * np.asarray(Time_unk) ** 2 + b2 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            p_values_a0 = results_R0.pvalues[0]
            p_values_a1 = results_R0.pvalues[1]
            p_values_a2 = results_R0.pvalues[2]
            p_values_a3 = results_R0.pvalues[3]
            p_values_a4 = results_R0.pvalues[4]
            p_values_a5 = results_R0.pvalues[5]
            p_values_b0 = results_R1.pvalues[0]
            p_values_b1 = results_R1.pvalues[1] 
            p_values_b2 = results_R1.pvalues[2] 
            p_values_b3 = results_R1.pvalues[3] 
            p_values_b4 = results_R1.pvalues[4] 
            p_values_b5 = results_R1.pvalues[5] 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 3 and drift_order_conc_value == 1:
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1), np.asarray(R1_std3).reshape(len(R1_std3),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R0_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R1_std3 = 1 / (np.asarray(error1_std3) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1), w_R0_std3.reshape(len(w_R0_std3),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1), w_R1_std3.reshape(len(w_R1_std3),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_R0_std1 = a3 * x + a0
            fit_R0_std2 = a3 * x + a1
            fit_R0_std3 = a3 * x + a2
            fit_R1_std1 = b3 * x + b0
            fit_R1_std2 = b3 * x + b1
            fit_R1_std3 = b3 * x + b2
            wls_R0_mod_std1 = a3 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a3 * np.asarray(Time_std2) + a1
            wls_R0_mod_std3 = a3 * np.asarray(Time_std3) + a2
            wls_R1_mod_std1 = b3 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b3 * np.asarray(Time_std2) + b1
            wls_R1_mod_std3 = b3 * np.asarray(Time_std3) + b2
            R0_corr_std1 = R0_std1 - a3 * np.asarray(Time_std1)
            R1_corr_std1 = R1_std1 - b3 * np.asarray(Time_std1)
            R0_corr_std2 = R0_std2 - a3 * np.asarray(Time_std2)
            R1_corr_std2 = R1_std2 - b3 * np.asarray(Time_std2)
            R0_corr_std3 = R0_std3 - a3 * np.asarray(Time_std3)
            R1_corr_std3 = R1_std3 - b3 * np.asarray(Time_std3)
            R0_corr_unk = R0_unk - a3 * np.asarray(Time_unk)
            R1_corr_unk = R1_unk - b3 * np.asarray(Time_unk)
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R0_std3 = np.asarray(R0_std3) - np.asarray(wls_R0_mod_std3)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R1_std3 = np.asarray(R1_std3) - np.asarray(wls_R1_mod_std3)
            p_values_a0 = results_R0.pvalues[0]
            p_values_a1 = results_R0.pvalues[1]
            p_values_a2 = results_R0.pvalues[2]
            p_values_a3 = results_R0.pvalues[3]
            p_values_b0 = results_R1.pvalues[0]
            p_values_b1 = results_R1.pvalues[1] 
            p_values_b2 = results_R1.pvalues[2] 
            p_values_b3 = results_R1.pvalues[3] 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 3 and drift_order_conc_value == 2:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time2_std3 = np.asarray(Time_std3) ** 2
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1), Time2_std3.reshape(len(Time2_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1), np.asarray(R1_std3).reshape(len(R1_std3),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R0_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R1_std3 = 1 / (np.asarray(error1_std3) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1), w_R0_std3.reshape(len(w_R0_std3),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1), w_R1_std3.reshape(len(w_R1_std3),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_R0_std1 = a4 * (x ** 2) + a3 * x + a0
            fit_R0_std2 = a4 * (x ** 2) + a3 * x + a1
            fit_R0_std3 = a4 * (x ** 2) + a3 * x + a2
            fit_R1_std1 = b4 * (x ** 2) + b3 * x + b0
            fit_R1_std2 = b4 * (x ** 2) + b3 * x + b1
            fit_R1_std3 = b4 * (x ** 2) + b3 * x + b2
            wls_R0_mod_std1 = a4 * np.asarray(Time2_std1) + a3 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a4 * np.asarray(Time2_std2) + a3 * np.asarray(Time_std2) + a1
            wls_R0_mod_std3 = a4 * np.asarray(Time2_std3) + a3 * np.asarray(Time_std3) + a2
            wls_R1_mod_std1 = b4 * np.asarray(Time2_std1) + b3 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b4 * np.asarray(Time2_std2) + b3 * np.asarray(Time_std2) + b1
            wls_R1_mod_std3 = b4 * np.asarray(Time2_std3) + b3 * np.asarray(Time_std3) + b2
            R0_corr_std1 = R0_std1 - (a4 * np.asarray(Time_std1) ** 2 + a3 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b4 * np.asarray(Time_std1) ** 2 + b3 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a4 * np.asarray(Time_std2) ** 2 + a3 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b4 * np.asarray(Time_std2) ** 2 + b3 * np.asarray(Time_std2))
            R0_corr_std3 = R0_std3 - (a4 * np.asarray(Time_std3) ** 2 + a3 * np.asarray(Time_std3))
            R1_corr_std3 = R1_std3 - (b4 * np.asarray(Time_std3) ** 2 + b3 * np.asarray(Time_std3))
            R0_corr_unk = R0_unk - (a4 * np.asarray(Time_unk) ** 2 + a3 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b4 * np.asarray(Time_unk) ** 2 + b3 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R0_std3 = np.asarray(R0_std3) - np.asarray(wls_R0_mod_std3)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R1_std3 = np.asarray(R1_std3) - np.asarray(wls_R1_mod_std3)
            p_values_a0 = results_R0.pvalues[0]
            p_values_a1 = results_R0.pvalues[1]
            p_values_a2 = results_R0.pvalues[2]
            p_values_a3 = results_R0.pvalues[3]
            p_values_a4 = results_R0.pvalues[4]
            p_values_b0 = results_R1.pvalues[0]
            p_values_b1 = results_R1.pvalues[1] 
            p_values_b2 = results_R1.pvalues[2] 
            p_values_b3 = results_R1.pvalues[3] 
            p_values_b4 = results_R1.pvalues[4] 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 3 and drift_order_conc_value == 3:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            Time2_std3 = np.asarray(Time_std3) ** 2
            Time3_std3 = np.asarray(Time_std3) ** 3
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1), Time2_std3.reshape(len(Time2_std3),1), Time3_std3.reshape(len(Time3_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1), np.asarray(R1_std3).reshape(len(R1_std3),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R0_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R1_std3 = 1 / (np.asarray(error1_std3) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1), w_R0_std3.reshape(len(w_R0_std3),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1), w_R1_std3.reshape(len(w_R1_std3),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            a5 = results_R0.params[5]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            b5 = results_R1.params[5]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_R0_std1 = a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a0
            fit_R0_std2 = a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a1
            fit_R0_std3 = a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a2
            fit_R1_std1 = b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b0
            fit_R1_std2 = b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b1
            fit_R1_std3 = b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b2
            wls_R0_mod_std1 = a5 * np.asarray(Time3_std1) + a4 * np.asarray(Time2_std1) + a3 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a5 * np.asarray(Time3_std2) + a4 * np.asarray(Time2_std2) + a3 * np.asarray(Time_std2) + a1
            wls_R0_mod_std3 = a5 * np.asarray(Time3_std3) + a4 * np.asarray(Time2_std3) + a3 * np.asarray(Time_std3) + a2
            wls_R1_mod_std1 = b5 * np.asarray(Time3_std1) + b4 * np.asarray(Time2_std1) + b3 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b5 * np.asarray(Time3_std2) + b4 * np.asarray(Time2_std2) + b3 * np.asarray(Time_std2) + b1
            wls_R1_mod_std3 = b5 * np.asarray(Time3_std3) + b4 * np.asarray(Time2_std3) + b3 * np.asarray(Time_std3) + b2
            R0_corr_std1 = R0_std1 - (a5 * np.asarray(Time_std1) ** 3 + a4 * np.asarray(Time_std1) ** 2 + a3 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b5 * np.asarray(Time_std1) ** 3 + b4 * np.asarray(Time_std1) ** 2 + b3 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a5 * np.asarray(Time_std2) ** 3 + a4 * np.asarray(Time_std2) ** 2 + a3 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b5 * np.asarray(Time_std2) ** 3 + b4 * np.asarray(Time_std2) ** 2 + b3 * np.asarray(Time_std2))
            R0_corr_std3 = R0_std3 - (a5 * np.asarray(Time_std3) ** 3 + a4 * np.asarray(Time_std3) ** 2 + a3 * np.asarray(Time_std3))
            R1_corr_std3 = R1_std3 - (b5 * np.asarray(Time_std3) ** 3 + b4 * np.asarray(Time_std3) ** 2 + b3 * np.asarray(Time_std3))
            R0_corr_unk = R0_unk - (a4 * np.asarray(Time_unk) ** 3 + a4 * np.asarray(Time_unk) ** 2 + a3 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b4 * np.asarray(Time_unk) ** 3 + b4 * np.asarray(Time_unk) ** 2 + b3 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R0_std3 = np.asarray(R0_std3) - np.asarray(wls_R0_mod_std3)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R1_std3 = np.asarray(R1_std3) - np.asarray(wls_R1_mod_std3)
            p_values_a0 = results_R0.pvalues[0]
            p_values_a1 = results_R0.pvalues[1]
            p_values_a2 = results_R0.pvalues[2]
            p_values_a3 = results_R0.pvalues[3]
            p_values_a4 = results_R0.pvalues[4]
            p_values_a5 = results_R0.pvalues[5]
            p_values_b0 = results_R1.pvalues[0]
            p_values_b1 = results_R1.pvalues[1] 
            p_values_b2 = results_R1.pvalues[2] 
            p_values_b3 = results_R1.pvalues[3] 
            p_values_b4 = results_R1.pvalues[4] 
            p_values_b5 = results_R1.pvalues[5] 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 3 and drift_order_conc_value == 4:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time4_std1 = np.asarray(Time_std1) ** 4
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            Time4_std2 = np.asarray(Time_std2) ** 4
            Time2_std3 = np.asarray(Time_std3) ** 2
            Time3_std3 = np.asarray(Time_std3) ** 3
            Time4_std3 = np.asarray(Time_std3) ** 4
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1), Time4_std1.reshape(len(Time4_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1), Time4_std2.reshape(len(Time4_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1), Time2_std3.reshape(len(Time2_std3),1), Time3_std3.reshape(len(Time3_std3),1), Time4_std3.reshape(len(Time4_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1), np.asarray(R1_std3).reshape(len(R1_std3),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R0_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R1_std3 = 1 / (np.asarray(error1_std3) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1), w_R0_std3.reshape(len(w_R0_std3),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1), w_R1_std3.reshape(len(w_R1_std3),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            a5 = results_R0.params[5]
            a6 = results_R0.params[6]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            b5 = results_R1.params[5]
            b6 = results_R1.params[6]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_R0_std1 = a6 * (x ** 4) + a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a0
            fit_R0_std2 = a6 * (x ** 4) + a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a1
            fit_R0_std3 = a6 * (x ** 4) + a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a2
            fit_R1_std1 = b6 * (x ** 4) + b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b0
            fit_R1_std2 = b6 * (x ** 4) + b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b1
            fit_R1_std3 = b6 * (x ** 4) + b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b2
            wls_R0_mod_std1 = a6 * np.asarray(Time4_std1) + a5 * np.asarray(Time3_std1) + a4 * np.asarray(Time2_std1) + a3 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a6 * np.asarray(Time4_std2) + a5 * np.asarray(Time3_std2) + a4 * np.asarray(Time2_std2) + a3 * np.asarray(Time_std2) + a1
            wls_R0_mod_std3 = a6 * np.asarray(Time4_std3) + a5 * np.asarray(Time3_std3) + a4 * np.asarray(Time2_std3) + a3 * np.asarray(Time_std3) + a2
            wls_R1_mod_std1 = b6 * np.asarray(Time4_std1) + b5 * np.asarray(Time3_std1) + b4 * np.asarray(Time2_std1) + b3 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b6 * np.asarray(Time4_std2) + b5 * np.asarray(Time3_std2) + b4 * np.asarray(Time2_std2) + b3 * np.asarray(Time_std2) + b1
            wls_R1_mod_std3 = b6 * np.asarray(Time4_std3) + b5 * np.asarray(Time3_std3) + b4 * np.asarray(Time2_std3) + b3 * np.asarray(Time_std3) + b2
            R0_corr_std1 = R0_std1 - (a6 * np.asarray(Time_std1) ** 4 + a5 * np.asarray(Time_std1) ** 3 + a4 * np.asarray(Time_std1) ** 2 + a3 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b6 * np.asarray(Time_std1) ** 4 + b5 * np.asarray(Time_std1) ** 3 + b4 * np.asarray(Time_std1) ** 2 + b3 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a6 * np.asarray(Time_std2) ** 4 + a5 * np.asarray(Time_std2) ** 3 + a4 * np.asarray(Time_std2) ** 2 + a3 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b6 * np.asarray(Time_std2) ** 4 + b5 * np.asarray(Time_std2) ** 3 + b4 * np.asarray(Time_std2) ** 2 + b3 * np.asarray(Time_std2))
            R0_corr_std3 = R0_std3 - (a6 * np.asarray(Time_std3) ** 4 + a5 * np.asarray(Time_std3) ** 3 + a4 * np.asarray(Time_std3) ** 2 + a3 * np.asarray(Time_std3))
            R1_corr_std3 = R1_std3 - (b6 * np.asarray(Time_std3) ** 4 + b5 * np.asarray(Time_std3) ** 3 + b4 * np.asarray(Time_std3) ** 2 + b3 * np.asarray(Time_std3))
            R0_corr_unk = R0_unk - (a6 * np.asarray(Time_unk) ** 4 + a4 * np.asarray(Time_unk) ** 3 + a4 * np.asarray(Time_unk) ** 2 + a3 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b6 * np.asarray(Time_unk) ** 4 + b4 * np.asarray(Time_unk) ** 3 + b4 * np.asarray(Time_unk) ** 2 + b3 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R0_std3 = np.asarray(R0_std3) - np.asarray(wls_R0_mod_std3)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R1_std3 = np.asarray(R1_std3) - np.asarray(wls_R1_mod_std3)
            p_values_a0 = results_R0.pvalues[0]
            p_values_a1 = results_R0.pvalues[1]
            p_values_a2 = results_R0.pvalues[2]
            p_values_a3 = results_R0.pvalues[3]
            p_values_a4 = results_R0.pvalues[4]
            p_values_a5 = results_R0.pvalues[5]
            p_values_a6 = results_R0.pvalues[6]
            p_values_b0 = results_R1.pvalues[0]
            p_values_b1 = results_R1.pvalues[1] 
            p_values_b2 = results_R1.pvalues[2] 
            p_values_b3 = results_R1.pvalues[3] 
            p_values_b4 = results_R1.pvalues[4] 
            p_values_b5 = results_R1.pvalues[5] 
            p_values_b6 = results_R1.pvalues[6] 
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 1 and drift_order_conc_value == 1:
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std))
            w_R0_std = 1 / (np.asarray(error0_std) ** 2)
            w_R1_std = 1 / (np.asarray(error1_std) ** 2)
            w_R2_std = 1 / (np.asarray(error2_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_R0_std)
            wls_R1_model = WLS(R1_std, X, weights=w_R1_std)
            wls_R2_model = WLS(R2_std, X, weights=w_R2_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            x = np.linspace(0, max(np.asarray(Time_std)), 200)
            fit_R0_std = a1 * x + a0
            fit_R1_std = b1 * x + b0
            fit_R2_std = c1 * x + c0
            wls_R0_mod = a1 * np.asarray(Time_std) + a0
            wls_R1_mod = b1 * np.asarray(Time_std) + b0
            wls_R2_mod = c1 * np.asarray(Time_std) + c0
            R0_corr_std = R0_std - a1 * np.asarray(Time_std)
            R1_corr_std = R1_std - b1 * np.asarray(Time_std)
            R2_corr_std = R2_std - c1 * np.asarray(Time_std)
            R0_corr_unk = R0_unk - a1 * np.asarray(Time_unk)
            R1_corr_unk = R1_unk - b1 * np.asarray(Time_unk)
            R2_corr_unk = R2_unk - c1 * np.asarray(Time_unk)
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            r_R1_std = np.asarray(R1_std) - np.asarray(wls_R1_mod)
            r_R2_std = np.asarray(R2_std) - np.asarray(wls_R2_mod)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 1 and drift_order_conc_value == 2:
            Time2_std = np.asarray(Time_std) ** 2
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std))
            w_R0_std = 1 / (np.asarray(error0_std) ** 2)
            w_R1_std = 1 / (np.asarray(error1_std) ** 2)
            w_R2_std = 1 / (np.asarray(error2_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_R0_std)
            wls_R1_model = WLS(R1_std, X, weights=w_R1_std)
            wls_R2_model = WLS(R2_std, X, weights=w_R2_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            x = np.linspace(0, max(np.asarray(Time_std)), 200)
            fit_R0_std = a2 * (x ** 2) + a1 * x + a0
            fit_R1_std = b2 * (x ** 2) + b1 * x + b0
            fit_R2_std = c2 * (x ** 2) + c1 * x + c0
            wls_R0_mod = a2 * np.asarray(Time2_std) + a1 * np.asarray(Time_std) + a0
            wls_R1_mod = b2 * np.asarray(Time2_std) + b1 * np.asarray(Time_std) + b0
            wls_R2_mod = c2 * np.asarray(Time2_std) + c1 * np.asarray(Time_std) + c0
            R0_corr_std = R0_std - (a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            R1_corr_std = R1_std - (b2 * np.asarray(Time_std) ** 2 + b1 * np.asarray(Time_std))
            R2_corr_std = R2_std - (c2 * np.asarray(Time_std) ** 2 + c1 * np.asarray(Time_std))
            R0_corr_unk = R0_unk - (a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b2 * np.asarray(Time_unk) ** 2 + b1 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c2 * np.asarray(Time_unk) ** 2 + c1 * np.asarray(Time_unk))
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            r_R1_std = np.asarray(R1_std) - np.asarray(wls_R1_mod)
            r_R2_std = np.asarray(R2_std) - np.asarray(wls_R2_mod)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 1 and drift_order_conc_value == 3:
            Time2_std = np.asarray(Time_std) ** 2
            Time3_std = np.asarray(Time_std) ** 3
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std, Time3_std))
            w_R0_std = 1 / (np.asarray(error0_std) ** 2)
            w_R1_std = 1 / (np.asarray(error1_std) ** 2)
            w_R2_std = 1 / (np.asarray(error2_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_R0_std)
            wls_R1_model = WLS(R1_std, X, weights=w_R1_std)
            wls_R2_model = WLS(R2_std, X, weights=w_R2_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            x = np.linspace(0, max(np.asarray(Time_std)), 200)
            fit_R0_std = a3 * (x ** 3) + a2 * (x ** 2) + a1 * x + a0
            fit_R1_std = b3 * (x ** 3) + b2 * (x ** 2) + b1 * x + b0
            fit_R2_std = c3 * (x ** 3) + c2 * (x ** 2) + c1 * x + c0
            wls_R0_mod = a3 * np.asarray(Time3_std) + a2 * np.asarray(Time2_std) + a1 * np.asarray(Time_std) + a0
            wls_R1_mod = b3 * np.asarray(Time3_std) + b2 * np.asarray(Time2_std) + b1 * np.asarray(Time_std) + b0
            wls_R2_mod = c3 * np.asarray(Time3_std) + c2 * np.asarray(Time2_std) + c1 * np.asarray(Time_std) + c0
            R0_corr_std = R0_std - (a3 * np.asarray(Time_std) ** 3 + a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            R1_corr_std = R1_std - (b3 * np.asarray(Time_std) ** 3 + b2 * np.asarray(Time_std) ** 2 + b1 * np.asarray(Time_std))
            R2_corr_std = R2_std - (c3 * np.asarray(Time_std) ** 3 + c2 * np.asarray(Time_std) ** 2 + c1 * np.asarray(Time_std))
            R0_corr_unk = R0_unk - (a3 * np.asarray(Time_unk) ** 3 + a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b3 * np.asarray(Time_unk) ** 3 + b2 * np.asarray(Time_unk) ** 2 + b1 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c3 * np.asarray(Time_unk) ** 3 + c2 * np.asarray(Time_unk) ** 2 + c1 * np.asarray(Time_unk))
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            r_R1_std = np.asarray(R1_std) - np.asarray(wls_R1_mod)
            r_R2_std = np.asarray(R2_std) - np.asarray(wls_R2_mod)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 1 and drift_order_conc_value == 4:
            Time2_std = np.asarray(Time_std) ** 2
            Time3_std = np.asarray(Time_std) ** 3
            Time4_std = np.asarray(Time_std) ** 4
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std, Time3_std, Time4_std))
            w_R0_std = 1 / (np.asarray(error0_std) ** 2)
            w_R1_std = 1 / (np.asarray(error1_std) ** 2)
            w_R2_std = 1 / (np.asarray(error2_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_R0_std)
            wls_R1_model = WLS(R1_std, X, weights=w_R1_std)
            wls_R2_model = WLS(R2_std, X, weights=w_R2_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            c4 = results_R2.params[4]
            x = np.linspace(0, max(np.asarray(Time_std)), 200)
            fit_R0_std = a4 * (x ** 4) + a3 * (x ** 3) + a2 * (x ** 2) + a1 * x + a0
            fit_R1_std = b4 * (x ** 4) + b3 * (x ** 3) + b2 * (x ** 2) + b1 * x + b0
            fit_R2_std = c4 * (x ** 4) + c3 * (x ** 3) + c2 * (x ** 2) + c1 * x + c0
            wls_R0_mod = a4 * np.asarray(Time4_std) + a3 * np.asarray(Time3_std) + a2 * np.asarray(Time2_std) + a1 * np.asarray(Time_std) + a0
            wls_R1_mod = b4 * np.asarray(Time4_std) + b3 * np.asarray(Time3_std) + b2 * np.asarray(Time2_std) + b1 * np.asarray(Time_std) + b0
            wls_R2_mod = c4 * np.asarray(Time4_std) + c3 * np.asarray(Time3_std) + c2 * np.asarray(Time2_std) + c1 * np.asarray(Time_std) + c0
            R0_corr_std = R0_std - (a4 * np.asarray(Time_std) ** 4 + a3 * np.asarray(Time_std) ** 3 + a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            R1_corr_std = R1_std - (b4 * np.asarray(Time_std) ** 4 + b3 * np.asarray(Time_std) ** 3 + b2 * np.asarray(Time_std) ** 2 + b1 * np.asarray(Time_std))
            R2_corr_std = R2_std - (c4 * np.asarray(Time_std) ** 4 + c3 * np.asarray(Time_std) ** 3 + c2 * np.asarray(Time_std) ** 2 + c1 * np.asarray(Time_std))
            R0_corr_unk = R0_unk - (a4 * np.asarray(Time_unk) ** 4 + a3 * np.asarray(Time_unk) ** 3 + a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b4 * np.asarray(Time_unk) ** 4 + b3 * np.asarray(Time_unk) ** 3 + b2 * np.asarray(Time_unk) ** 2 + b1 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c4 * np.asarray(Time_unk) ** 4 + c3 * np.asarray(Time_unk) ** 3 + c2 * np.asarray(Time_unk) ** 2 + c1 * np.asarray(Time_unk))
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            r_R1_std = np.asarray(R1_std) - np.asarray(wls_R1_mod)
            r_R2_std = np.asarray(R2_std) - np.asarray(wls_R2_mod)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 2 and drift_order_conc_value == 1:
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X = np.vstack((np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1))), np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1)))))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1)))
            Y_R2 = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R2_std1 = 1 / (np.asarray(error2_std1) ** 2)
            w_R2_std2 = 1 / (np.asarray(error2_std2) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1)))
            w_R2_std = np.vstack((w_R2_std1.reshape(len(w_R2_std1),1), w_R2_std2.reshape(len(w_R2_std2),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            wls_R2_model = WLS(Y_R2, X, weights=w_R2_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_R0_std1 = a2 * x + a0
            fit_R0_std2 = a2 * x + a1
            fit_R1_std1 = b2 * x + b0
            fit_R1_std2 = b2 * x + b1
            fit_R2_std1 = c2 * x + c0
            fit_R2_std2 = c2 * x + c1
            wls_R0_mod_std1 = a2 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a2 * np.asarray(Time_std2) + a1
            wls_R1_mod_std1 = b2 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b2 * np.asarray(Time_std2) + b1
            wls_R2_mod_std1 = c2 * np.asarray(Time_std1) + c0
            wls_R2_mod_std2 = c2 * np.asarray(Time_std2) + c1
            R0_corr_std1 = R0_std1 - a2 * np.asarray(Time_std1)
            R1_corr_std1 = R1_std1 - b2 * np.asarray(Time_std1)
            R2_corr_std1 = R2_std1 - c2 * np.asarray(Time_std1)
            R0_corr_std2 = R0_std2 - a2 * np.asarray(Time_std2)
            R1_corr_std2 = R1_std2 - b2 * np.asarray(Time_std2)
            R2_corr_std2 = R2_std2 - c2 * np.asarray(Time_std2)
            R0_corr_unk = R0_unk - a2 * np.asarray(Time_unk)
            R1_corr_unk = R1_unk - b2 * np.asarray(Time_unk)
            R2_corr_unk = R2_unk - c2 * np.asarray(Time_unk)
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R2_std1 = np.asarray(R2_std1) - np.asarray(wls_R2_mod_std1)
            r_R2_std2 = np.asarray(R2_std2) - np.asarray(wls_R2_mod_std2)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 2 and drift_order_conc_value == 2:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time2_std2 = np.asarray(Time_std2) ** 2
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1)))
            X = np.vstack((X_std1, X_std2))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1)))
            Y_R2 = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R2_std1 = 1 / (np.asarray(error2_std1) ** 2)
            w_R2_std2 = 1 / (np.asarray(error2_std2) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1)))
            w_R2_std = np.vstack((w_R2_std1.reshape(len(w_R2_std1),1), w_R2_std2.reshape(len(w_R2_std2),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            wls_R2_model = WLS(Y_R2, X, weights=w_R2_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_R0_std1 = a3 * (x ** 2) + a2 * x + a0
            fit_R0_std2 = a3 * (x ** 2) + a2 * x + a1
            fit_R1_std1 = b3 * (x ** 2) + b2 * x + b0
            fit_R1_std2 = b3 * (x ** 2) + b2 * x + b1
            fit_R2_std1 = c3 * (x ** 2) + c2 * x + c0
            fit_R2_std2 = c3 * (x ** 2) + c2 * x + c1
            wls_R0_mod_std1 = a3 * np.asarray(Time2_std1) + a2 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a3 * np.asarray(Time2_std2) + a2 * np.asarray(Time_std2) + a1
            wls_R1_mod_std1 = b3 * np.asarray(Time2_std1) + b2 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b3 * np.asarray(Time2_std2) + b2 * np.asarray(Time_std2) + b1
            wls_R2_mod_std1 = c3 * np.asarray(Time2_std1) + c2 * np.asarray(Time_std1) + c0
            wls_R2_mod_std2 = c3 * np.asarray(Time2_std2) + c2 * np.asarray(Time_std2) + c1
            R0_corr_std1 = R0_std1 - (a3 * np.asarray(Time_std1) ** 2 + a2 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b3 * np.asarray(Time_std1) ** 2 + b2 * np.asarray(Time_std1))
            R2_corr_std1 = R2_std1 - (c3 * np.asarray(Time_std1) ** 2 + c2 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a3 * np.asarray(Time_std2) ** 2 + a2 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b3 * np.asarray(Time_std2) ** 2 + b2 * np.asarray(Time_std2))
            R2_corr_std2 = R2_std2 - (c3 * np.asarray(Time_std2) ** 2 + c2 * np.asarray(Time_std2))
            R0_corr_unk = R0_unk - (a3 * np.asarray(Time_unk) ** 2 + a2 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b3 * np.asarray(Time_unk) ** 2 + b2 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c3 * np.asarray(Time_unk) ** 2 + c2 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R2_std1 = np.asarray(R2_std1) - np.asarray(wls_R2_mod_std1)
            r_R2_std2 = np.asarray(R2_std2) - np.asarray(wls_R2_mod_std2)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 2 and drift_order_conc_value == 3:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1)))
            X = np.vstack((X_std1, X_std2))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1)))
            Y_R2 = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R2_std1 = 1 / (np.asarray(error2_std1) ** 2)
            w_R2_std2 = 1 / (np.asarray(error2_std2) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1)))
            w_R2_std = np.vstack((w_R2_std1.reshape(len(w_R2_std1),1), w_R2_std2.reshape(len(w_R2_std2),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            wls_R2_model = WLS(Y_R2, X, weights=w_R2_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            c4 = results_R2.params[4]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_R0_std1 = a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a0
            fit_R0_std2 = a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a1
            fit_R1_std1 = b4 * (x ** 3) + b3 * (x ** 2) + b2 * x + b0
            fit_R1_std2 = b4 * (x ** 3) + b3 * (x ** 2) + b2 * x + b1
            fit_R2_std1 = c4 * (x ** 3) + c3 * (x ** 2) + c2 * x + c0
            fit_R2_std2 = c4 * (x ** 3) + c3 * (x ** 2) + c2 * x + c1
            wls_R0_mod_std1 = a4 * np.asarray(Time3_std1) + a3 * np.asarray(Time2_std1) + a2 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a4 * np.asarray(Time3_std2) + a3 * np.asarray(Time2_std2) + a2 * np.asarray(Time_std2) + a1
            wls_R1_mod_std1 = b4 * np.asarray(Time3_std1) + b3 * np.asarray(Time2_std1) + b2 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b4 * np.asarray(Time3_std2) + b3 * np.asarray(Time2_std2) + b2 * np.asarray(Time_std2) + b1
            wls_R2_mod_std1 = c4 * np.asarray(Time3_std1) + c3 * np.asarray(Time2_std1) + c2 * np.asarray(Time_std1) + c0
            wls_R2_mod_std2 = c4 * np.asarray(Time3_std2) + c3 * np.asarray(Time2_std2) + c2 * np.asarray(Time_std2) + c1
            R0_corr_std1 = R0_std1 - (a4 * np.asarray(Time_std1) ** 3 + a3 * np.asarray(Time_std1) ** 2 + a2 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b4 * np.asarray(Time_std1) ** 3 + b3 * np.asarray(Time_std1) ** 2 + b2 * np.asarray(Time_std1))
            R2_corr_std1 = R2_std1 - (c4 * np.asarray(Time_std1) ** 3 + c3 * np.asarray(Time_std1) ** 2 + c2 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a4 * np.asarray(Time_std2) ** 3 + a3 * np.asarray(Time_std2) ** 2 + a2 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b4 * np.asarray(Time_std2) ** 3 + b3 * np.asarray(Time_std2) ** 2 + b2 * np.asarray(Time_std2))
            R2_corr_std2 = R2_std2 - (c4 * np.asarray(Time_std2) ** 3 + c3 * np.asarray(Time_std2) ** 2 + c2 * np.asarray(Time_std2))
            R0_corr_unk = R0_unk - (a4 * np.asarray(Time_unk) ** 3 + a3 * np.asarray(Time_unk) ** 2 + a2 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b4 * np.asarray(Time_unk) ** 3 + b3 * np.asarray(Time_unk) ** 2 + b2 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c4 * np.asarray(Time_unk) ** 3 + c3 * np.asarray(Time_unk) ** 2 + c2 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R2_std1 = np.asarray(R2_std1) - np.asarray(wls_R2_mod_std1)
            r_R2_std2 = np.asarray(R2_std2) - np.asarray(wls_R2_mod_std2)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 2 and drift_order_conc_value == 4:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time4_std1 = np.asarray(Time_std1) ** 4
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            Time4_std2 = np.asarray(Time_std2) ** 4
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1), Time4_std1.reshape(len(Time4_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1), Time4_std2.reshape(len(Time4_std2),1)))
            X = np.vstack((X_std1, X_std2))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1)))
            Y_R2 = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R2_std1 = 1 / (np.asarray(error2_std1) ** 2)
            w_R2_std2 = 1 / (np.asarray(error2_std2) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1)))
            w_R2_std = np.vstack((w_R2_std1.reshape(len(w_R2_std1),1), w_R2_std2.reshape(len(w_R2_std2),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            wls_R2_model = WLS(Y_R2, X, weights=w_R2_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            a5 = results_R0.params[5]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            b5 = results_R1.params[5]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            c4 = results_R2.params[4]
            c5 = results_R2.params[5]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_R0_std1 = a5 * (x ** 4) + a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a0
            fit_R0_std2 = a5 * (x ** 4) + a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a1
            fit_R1_std1 = b5 * (x ** 4) + b4 * (x ** 3) + b3 * (x ** 2) + b2 * x + b0
            fit_R1_std2 = b5 * (x ** 4) + b4 * (x ** 3) + b3 * (x ** 2) + b2 * x + b1
            fit_R2_std1 = c5 * (x ** 4) + c4 * (x ** 3) + c3 * (x ** 2) + c2 * x + c0
            fit_R2_std2 = c5 * (x ** 4) + c4 * (x ** 3) + c3 * (x ** 2) + c2 * x + c1
            wls_R0_mod_std1 = a5 * np.asarray(Time4_std1) + a4 * np.asarray(Time3_std1) + a3 * np.asarray(Time2_std1) + a2 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a5 * np.asarray(Time4_std2) + a4 * np.asarray(Time3_std2) + a3 * np.asarray(Time2_std2) + a2 * np.asarray(Time_std2) + a1
            wls_R1_mod_std1 = b5 * np.asarray(Time4_std1) + b4 * np.asarray(Time3_std1) + b3 * np.asarray(Time2_std1) + b2 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b5 * np.asarray(Time4_std2) + b4 * np.asarray(Time3_std2) + b3 * np.asarray(Time2_std2) + b2 * np.asarray(Time_std2) + b1
            wls_R2_mod_std1 = c5 * np.asarray(Time4_std1) + c4 * np.asarray(Time3_std1) + c3 * np.asarray(Time2_std1) + c2 * np.asarray(Time_std1) + c0
            wls_R2_mod_std2 = c5 * np.asarray(Time4_std2) + c4 * np.asarray(Time3_std2) + c3 * np.asarray(Time2_std2) + c2 * np.asarray(Time_std2) + c1
            R0_corr_std1 = R0_std1 - (a5 * np.asarray(Time_std1) ** 4 + a4 * np.asarray(Time_std1) ** 3 + a3 * np.asarray(Time_std1) ** 2 + a2 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b5 * np.asarray(Time_std1) ** 4 + b4 * np.asarray(Time_std1) ** 3 + b3 * np.asarray(Time_std1) ** 2 + b2 * np.asarray(Time_std1))
            R2_corr_std1 = R2_std1 - (c5 * np.asarray(Time_std1) ** 4 + c4 * np.asarray(Time_std1) ** 3 + c3 * np.asarray(Time_std1) ** 2 + c2 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a5 * np.asarray(Time_std2) ** 4 + a4 * np.asarray(Time_std2) ** 3 + a3 * np.asarray(Time_std2) ** 2 + a2 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b5 * np.asarray(Time_std2) ** 4 + b4 * np.asarray(Time_std2) ** 3 + b3 * np.asarray(Time_std2) ** 2 + b2 * np.asarray(Time_std2))
            R2_corr_std2 = R2_std2 - (c5 * np.asarray(Time_std2) ** 4 + c4 * np.asarray(Time_std2) ** 3 + c3 * np.asarray(Time_std2) ** 2 + c2 * np.asarray(Time_std2))
            R0_corr_unk = R0_unk - (a5 * np.asarray(Time_unk) ** 4 + a4 * np.asarray(Time_unk) ** 3 + a3 * np.asarray(Time_unk) ** 2 + a2 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b5 * np.asarray(Time_unk) ** 4 + b4 * np.asarray(Time_unk) ** 3 + b3 * np.asarray(Time_unk) ** 2 + b2 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c5 * np.asarray(Time_unk) ** 4 + c4 * np.asarray(Time_unk) ** 3 + c3 * np.asarray(Time_unk) ** 2 + c2 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R2_std1 = np.asarray(R2_std1) - np.asarray(wls_R2_mod_std1)
            r_R2_std2 = np.asarray(R2_std2) - np.asarray(wls_R2_mod_std2)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 3 and drift_order_conc_value == 1:
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1), np.asarray(R1_std3).reshape(len(R1_std3),1)))
            Y_R2 = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1), np.asarray(R2_std3).reshape(len(R2_std3),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R0_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R1_std3 = 1 / (np.asarray(error1_std3) ** 2)
            w_R2_std1 = 1 / (np.asarray(error2_std1) ** 2)
            w_R2_std2 = 1 / (np.asarray(error2_std2) ** 2)
            w_R2_std3 = 1 / (np.asarray(error2_std3) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1), w_R0_std3.reshape(len(w_R0_std3),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1), w_R1_std3.reshape(len(w_R1_std3),1)))
            w_R2_std = np.vstack((w_R2_std1.reshape(len(w_R2_std1),1), w_R2_std2.reshape(len(w_R2_std2),1), w_R2_std3.reshape(len(w_R2_std3),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            wls_R2_model = WLS(Y_R2, X, weights=w_R2_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_R0_std1 = a3 * x + a0
            fit_R0_std2 = a3 * x + a1
            fit_R0_std3 = a3 * x + a2
            fit_R1_std1 = b3 * x + b0
            fit_R1_std2 = b3 * x + b1
            fit_R1_std3 = b3 * x + b2
            fit_R2_std1 = c3 * x + c0
            fit_R2_std2 = c3 * x + c1
            fit_R2_std3 = c3 * x + c2
            wls_R0_mod_std1 = a3 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a3 * np.asarray(Time_std2) + a1
            wls_R0_mod_std3 = a3 * np.asarray(Time_std3) + a2
            wls_R1_mod_std1 = b3 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b3 * np.asarray(Time_std2) + b1
            wls_R1_mod_std3 = b3 * np.asarray(Time_std3) + b2
            wls_R2_mod_std1 = c3 * np.asarray(Time_std1) + c0
            wls_R2_mod_std2 = c3 * np.asarray(Time_std2) + c1
            wls_R2_mod_std3 = c3 * np.asarray(Time_std3) + c2
            R0_corr_std1 = R0_std1 - a3 * np.asarray(Time_std1)
            R1_corr_std1 = R1_std1 - b3 * np.asarray(Time_std1)
            R2_corr_std1 = R2_std1 - c3 * np.asarray(Time_std1)
            R0_corr_std2 = R0_std2 - a3 * np.asarray(Time_std2)
            R1_corr_std2 = R1_std2 - b3 * np.asarray(Time_std2)
            R2_corr_std2 = R2_std2 - c3 * np.asarray(Time_std2)
            R0_corr_std3 = R0_std3 - a3 * np.asarray(Time_std3)
            R1_corr_std3 = R1_std3 - b3 * np.asarray(Time_std3)
            R2_corr_std3 = R2_std3 - c3 * np.asarray(Time_std3)
            R0_corr_unk = R0_unk - a3 * np.asarray(Time_unk)
            R1_corr_unk = R1_unk - b3 * np.asarray(Time_unk)
            R2_corr_unk = R2_unk - c3 * np.asarray(Time_unk)
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R0_std3 = np.asarray(R0_std3) - np.asarray(wls_R0_mod_std3)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R1_std3 = np.asarray(R1_std3) - np.asarray(wls_R1_mod_std3)
            r_R2_std1 = np.asarray(R2_std1) - np.asarray(wls_R2_mod_std1)
            r_R2_std2 = np.asarray(R2_std2) - np.asarray(wls_R2_mod_std2)
            r_R2_std3 = np.asarray(R2_std3) - np.asarray(wls_R2_mod_std3)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 3 and drift_order_conc_value == 2:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time2_std3 = np.asarray(Time_std3) ** 2
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1), Time2_std3.reshape(len(Time2_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1), np.asarray(R1_std3).reshape(len(R1_std3),1)))
            Y_R2 = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1), np.asarray(R2_std3).reshape(len(R2_std3),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R0_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R1_std3 = 1 / (np.asarray(error1_std3) ** 2)
            w_R2_std1 = 1 / (np.asarray(error2_std1) ** 2)
            w_R2_std2 = 1 / (np.asarray(error2_std2) ** 2)
            w_R2_std3 = 1 / (np.asarray(error2_std3) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1), w_R0_std3.reshape(len(w_R0_std3),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1), w_R1_std3.reshape(len(w_R1_std3),1)))
            w_R2_std = np.vstack((w_R2_std1.reshape(len(w_R2_std1),1), w_R2_std2.reshape(len(w_R2_std2),1), w_R2_std3.reshape(len(w_R2_std3),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            wls_R2_model = WLS(Y_R2, X, weights=w_R2_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            c4 = results_R2.params[4]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_R0_std1 = a4 * (x ** 2) + a3 * x + a0
            fit_R0_std2 = a4 * (x ** 2) + a3 * x + a1
            fit_R0_std3 = a4 * (x ** 2) + a3 * x + a2
            fit_R1_std1 = b4 * (x ** 2) + b3 * x + b0
            fit_R1_std2 = b4 * (x ** 2) + b3 * x + b1
            fit_R1_std3 = b4 * (x ** 2) + b3 * x + b2
            fit_R2_std1 = c4 * (x ** 2) + c3 * x + c0
            fit_R2_std2 = c4 * (x ** 2) + c3 * x + c1
            fit_R2_std3 = c4 * (x ** 2) + c3 * x + c2
            wls_R0_mod_std1 = a4 * np.asarray(Time2_std1) + a3 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a4 * np.asarray(Time2_std2) + a3 * np.asarray(Time_std2) + a1
            wls_R0_mod_std3 = a4 * np.asarray(Time2_std3) + a3 * np.asarray(Time_std3) + a2
            wls_R1_mod_std1 = b4 * np.asarray(Time2_std1) + b3 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b4 * np.asarray(Time2_std2) + b3 * np.asarray(Time_std2) + b1
            wls_R1_mod_std3 = b4 * np.asarray(Time2_std3) + b3 * np.asarray(Time_std3) + b2
            wls_R2_mod_std1 = c4 * np.asarray(Time2_std1) + c3 * np.asarray(Time_std1) + c0
            wls_R2_mod_std2 = c4 * np.asarray(Time2_std2) + c3 * np.asarray(Time_std2) + c1
            wls_R2_mod_std3 = c4 * np.asarray(Time2_std3) + c3 * np.asarray(Time_std3) + c2
            R0_corr_std1 = R0_std1 - (a4 * np.asarray(Time_std1) ** 2 + a3 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b4 * np.asarray(Time_std1) ** 2 + b3 * np.asarray(Time_std1))
            R2_corr_std1 = R2_std1 - (c4 * np.asarray(Time_std1) ** 2 + c3 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a4 * np.asarray(Time_std2) ** 2 + a3 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b4 * np.asarray(Time_std2) ** 2 + b3 * np.asarray(Time_std2))
            R2_corr_std2 = R2_std2 - (c4 * np.asarray(Time_std2) ** 2 + c3 * np.asarray(Time_std2))
            R0_corr_std3 = R0_std3 - (a4 * np.asarray(Time_std3) ** 2 + a3 * np.asarray(Time_std3))
            R1_corr_std3 = R1_std3 - (b4 * np.asarray(Time_std3) ** 2 + b3 * np.asarray(Time_std3))
            R2_corr_std3 = R2_std3 - (c4 * np.asarray(Time_std3) ** 2 + c3 * np.asarray(Time_std3))
            R0_corr_unk = R0_unk - (a4 * np.asarray(Time_unk) ** 2 + a3 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b4 * np.asarray(Time_unk) ** 2 + b3 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c4 * np.asarray(Time_unk) ** 2 + c3 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R0_std3 = np.asarray(R0_std3) - np.asarray(wls_R0_mod_std3)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R1_std3 = np.asarray(R1_std3) - np.asarray(wls_R1_mod_std3)
            r_R2_std1 = np.asarray(R2_std1) - np.asarray(wls_R2_mod_std1)
            r_R2_std2 = np.asarray(R2_std2) - np.asarray(wls_R2_mod_std2)
            r_R2_std3 = np.asarray(R2_std3) - np.asarray(wls_R2_mod_std3)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 3 and drift_order_conc_value == 3:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            Time2_std3 = np.asarray(Time_std3) ** 2
            Time3_std3 = np.asarray(Time_std3) ** 3
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1), Time2_std3.reshape(len(Time2_std3),1), Time3_std3.reshape(len(Time3_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1), np.asarray(R1_std3).reshape(len(R1_std3),1)))
            Y_R2 = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1), np.asarray(R2_std3).reshape(len(R2_std3),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R0_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R1_std3 = 1 / (np.asarray(error1_std3) ** 2)
            w_R2_std1 = 1 / (np.asarray(error2_std1) ** 2)
            w_R2_std2 = 1 / (np.asarray(error2_std2) ** 2)
            w_R2_std3 = 1 / (np.asarray(error2_std3) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1), w_R0_std3.reshape(len(w_R0_std3),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1), w_R1_std3.reshape(len(w_R1_std3),1)))
            w_R2_std = np.vstack((w_R2_std1.reshape(len(w_R2_std1),1), w_R2_std2.reshape(len(w_R2_std2),1), w_R2_std3.reshape(len(w_R2_std3),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            wls_R2_model = WLS(Y_R2, X, weights=w_R2_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            a5 = results_R0.params[5]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            b5 = results_R1.params[5]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            c4 = results_R2.params[4]
            c5 = results_R2.params[5]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_R0_std1 = a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a0
            fit_R0_std2 = a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a1
            fit_R0_std3 = a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a2
            fit_R1_std1 = b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b0
            fit_R1_std2 = b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b1
            fit_R1_std3 = b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b2
            fit_R2_std1 = c5 * (x ** 3) + c4 * (x ** 2) + c3 * x + c0
            fit_R2_std2 = c5 * (x ** 3) + c4 * (x ** 2) + c3 * x + c1
            fit_R2_std3 = c5 * (x ** 3) + c4 * (x ** 2) + c3 * x + c2
            wls_R0_mod_std1 = a5 * np.asarray(Time3_std1) + a4 * np.asarray(Time2_std1) + a3 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a5 * np.asarray(Time3_std2) + a4 * np.asarray(Time2_std2) + a3 * np.asarray(Time_std2) + a1
            wls_R0_mod_std3 = a5 * np.asarray(Time3_std3) + a4 * np.asarray(Time2_std3) + a3 * np.asarray(Time_std3) + a2
            wls_R1_mod_std1 = b5 * np.asarray(Time3_std1) + b4 * np.asarray(Time2_std1) + b3 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b5 * np.asarray(Time3_std2) + b4 * np.asarray(Time2_std2) + b3 * np.asarray(Time_std2) + b1
            wls_R1_mod_std3 = b5 * np.asarray(Time3_std3) + b4 * np.asarray(Time2_std3) + b3 * np.asarray(Time_std3) + b2
            wls_R2_mod_std1 = c5 * np.asarray(Time3_std1) + c4 * np.asarray(Time2_std1) + c3 * np.asarray(Time_std1) + c0
            wls_R2_mod_std2 = c5 * np.asarray(Time3_std2) + c4 * np.asarray(Time2_std2) + c3 * np.asarray(Time_std2) + c1
            wls_R2_mod_std3 = c5 * np.asarray(Time3_std3) + c4 * np.asarray(Time2_std3) + c3 * np.asarray(Time_std3) + c2
            R0_corr_std1 = R0_std1 - (a5 * np.asarray(Time_std1) ** 3 + a4 * np.asarray(Time_std1) ** 2 + a3 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b5 * np.asarray(Time_std1) ** 3 + b4 * np.asarray(Time_std1) ** 2 + b3 * np.asarray(Time_std1))
            R2_corr_std1 = R2_std1 - (c5 * np.asarray(Time_std1) ** 3 + c4 * np.asarray(Time_std1) ** 2 + c3 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a5 * np.asarray(Time_std2) ** 3 + a4 * np.asarray(Time_std2) ** 2 + a3 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b5 * np.asarray(Time_std2) ** 3 + b4 * np.asarray(Time_std2) ** 2 + b3 * np.asarray(Time_std2))
            R2_corr_std2 = R2_std2 - (c5 * np.asarray(Time_std2) ** 3 + c4 * np.asarray(Time_std2) ** 2 + c3 * np.asarray(Time_std2))
            R0_corr_std3 = R0_std3 - (a5 * np.asarray(Time_std3) ** 3 + a4 * np.asarray(Time_std3) ** 2 + a3 * np.asarray(Time_std3))
            R1_corr_std3 = R1_std3 - (b5 * np.asarray(Time_std3) ** 3 + b4 * np.asarray(Time_std3) ** 2 + b3 * np.asarray(Time_std3))
            R2_corr_std3 = R2_std3 - (c5 * np.asarray(Time_std3) ** 3 + c4 * np.asarray(Time_std3) ** 2 + c3 * np.asarray(Time_std3))
            R0_corr_unk = R0_unk - (a5 * np.asarray(Time_unk) ** 3 + a4 * np.asarray(Time_unk) ** 2 + a3 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b5 * np.asarray(Time_unk) ** 3 + b4 * np.asarray(Time_unk) ** 2 + b3 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c5 * np.asarray(Time_unk) ** 3 + c4 * np.asarray(Time_unk) ** 2 + c3 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R0_std3 = np.asarray(R0_std3) - np.asarray(wls_R0_mod_std3)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R1_std3 = np.asarray(R1_std3) - np.asarray(wls_R1_mod_std3)
            r_R2_std1 = np.asarray(R2_std1) - np.asarray(wls_R2_mod_std1)
            r_R2_std2 = np.asarray(R2_std2) - np.asarray(wls_R2_mod_std2)
            r_R2_std3 = np.asarray(R2_std3) - np.asarray(wls_R2_mod_std3)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 3 and drift_order_conc_value == 4:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time4_std1 = np.asarray(Time_std1) ** 4
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            Time4_std2 = np.asarray(Time_std2) ** 4
            Time2_std3 = np.asarray(Time_std3) ** 2
            Time3_std3 = np.asarray(Time_std3) ** 3
            Time4_std3 = np.asarray(Time_std3) ** 4
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1), Time4_std1.reshape(len(Time4_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1), Time4_std2.reshape(len(Time4_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1), Time2_std3.reshape(len(Time2_std3),1), Time3_std3.reshape(len(Time3_std3),1), Time4_std3.reshape(len(Time4_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1), np.asarray(R1_std3).reshape(len(R1_std3),1)))
            Y_R2 = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1), np.asarray(R2_std3).reshape(len(R2_std3),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R0_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R1_std3 = 1 / (np.asarray(error1_std3) ** 2)
            w_R2_std1 = 1 / (np.asarray(error2_std1) ** 2)
            w_R2_std2 = 1 / (np.asarray(error2_std2) ** 2)
            w_R2_std3 = 1 / (np.asarray(error2_std3) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1), w_R0_std3.reshape(len(w_R0_std3),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1), w_R1_std3.reshape(len(w_R1_std3),1)))
            w_R2_std = np.vstack((w_R2_std1.reshape(len(w_R2_std1),1), w_R2_std2.reshape(len(w_R2_std2),1), w_R2_std3.reshape(len(w_R2_std3),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            wls_R2_model = WLS(Y_R2, X, weights=w_R2_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            a5 = results_R0.params[5]
            a6 = results_R0.params[6]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            b5 = results_R1.params[5]
            b6 = results_R1.params[6]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            c4 = results_R2.params[4]
            c5 = results_R2.params[5]
            c6 = results_R2.params[6]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_R0_std1 = a6 * (x ** 4) + a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a0
            fit_R0_std2 = a6 * (x ** 4) + a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a1
            fit_R0_std3 = a6 * (x ** 4) + a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a2
            fit_R1_std1 = b6 * (x ** 4) + b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b0
            fit_R1_std2 = b6 * (x ** 4) + b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b1
            fit_R1_std3 = b6 * (x ** 4) + b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b2
            fit_R2_std1 = c6 * (x ** 4) + c5 * (x ** 3) + c4 * (x ** 2) + c3 * x + c0
            fit_R2_std2 = c6 * (x ** 4) + c5 * (x ** 3) + c4 * (x ** 2) + c3 * x + c1
            fit_R2_std3 = c6 * (x ** 4) + c5 * (x ** 3) + c4 * (x ** 2) + c3 * x + c2
            wls_R0_mod_std1 = a6 * np.asarray(Time4_std1) + a5 * np.asarray(Time3_std1) + a4 * np.asarray(Time2_std1) + a3 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a6 * np.asarray(Time4_std2) + a5 * np.asarray(Time3_std2) + a4 * np.asarray(Time2_std2) + a3 * np.asarray(Time_std2) + a1
            wls_R0_mod_std3 = a6 * np.asarray(Time4_std3) + a5 * np.asarray(Time3_std3) + a4 * np.asarray(Time2_std3) + a3 * np.asarray(Time_std3) + a2
            wls_R1_mod_std1 = b6 * np.asarray(Time4_std1) + b5 * np.asarray(Time3_std1) + b4 * np.asarray(Time2_std1) + b3 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b6 * np.asarray(Time4_std2) + b5 * np.asarray(Time3_std2) + b4 * np.asarray(Time2_std2) + b3 * np.asarray(Time_std2) + b1
            wls_R1_mod_std3 = b6 * np.asarray(Time4_std3) + b5 * np.asarray(Time3_std3) + b4 * np.asarray(Time2_std3) + b3 * np.asarray(Time_std3) + b2
            wls_R2_mod_std1 = c6 * np.asarray(Time4_std1) + c5 * np.asarray(Time3_std1) + c4 * np.asarray(Time2_std1) + c3 * np.asarray(Time_std1) + c0
            wls_R2_mod_std2 = c6 * np.asarray(Time4_std2) + c5 * np.asarray(Time3_std2) + c4 * np.asarray(Time2_std2) + c3 * np.asarray(Time_std2) + c1
            wls_R2_mod_std3 = c6 * np.asarray(Time4_std3) + c5 * np.asarray(Time3_std3) + c4 * np.asarray(Time2_std3) + c3 * np.asarray(Time_std3) + c2
            R0_corr_std1 = R0_std1 - (a6 * np.asarray(Time_std1) ** 4 + a5 * np.asarray(Time_std1) ** 3 + a4 * np.asarray(Time_std1) ** 2 + a3 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b6 * np.asarray(Time_std1) ** 4 + b5 * np.asarray(Time_std1) ** 3 + b4 * np.asarray(Time_std1) ** 2 + b3 * np.asarray(Time_std1))
            R2_corr_std1 = R2_std1 - (c6 * np.asarray(Time_std1) ** 4 + c5 * np.asarray(Time_std1) ** 3 + c4 * np.asarray(Time_std1) ** 2 + c3 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a6 * np.asarray(Time_std2) ** 4 + a5 * np.asarray(Time_std2) ** 3 + a4 * np.asarray(Time_std2) ** 2 + a3 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b6 * np.asarray(Time_std2) ** 4 + b5 * np.asarray(Time_std2) ** 3 + b4 * np.asarray(Time_std2) ** 2 + b3 * np.asarray(Time_std2))
            R2_corr_std2 = R2_std2 - (c6 * np.asarray(Time_std2) ** 4 + c5 * np.asarray(Time_std2) ** 3 + c4 * np.asarray(Time_std2) ** 2 + c3 * np.asarray(Time_std2))
            R0_corr_std3 = R0_std3 - (a6 * np.asarray(Time_std3) ** 4 + a5 * np.asarray(Time_std3) ** 3 + a4 * np.asarray(Time_std3) ** 2 + a3 * np.asarray(Time_std3))
            R1_corr_std3 = R1_std3 - (b6 * np.asarray(Time_std3) ** 4 + b5 * np.asarray(Time_std3) ** 3 + b4 * np.asarray(Time_std3) ** 2 + b3 * np.asarray(Time_std3))
            R2_corr_std3 = R2_std3 - (c6 * np.asarray(Time_std3) ** 4 + c5 * np.asarray(Time_std3) ** 3 + c4 * np.asarray(Time_std3) ** 2 + c3 * np.asarray(Time_std3))
            R0_corr_unk = R0_unk - (a6 * np.asarray(Time_unk) ** 4 + a5 * np.asarray(Time_unk) ** 3 + a4 * np.asarray(Time_unk) ** 2 + a3 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b6 * np.asarray(Time_unk) ** 4 + b5 * np.asarray(Time_unk) ** 3 + b4 * np.asarray(Time_unk) ** 2 + b3 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c6 * np.asarray(Time_unk) ** 4 + c5 * np.asarray(Time_unk) ** 3 + c4 * np.asarray(Time_unk) ** 2 + c3 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R0_std3 = np.asarray(R0_std3) - np.asarray(wls_R0_mod_std3)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R1_std3 = np.asarray(R1_std3) - np.asarray(wls_R1_mod_std3)
            r_R2_std1 = np.asarray(R2_std1) - np.asarray(wls_R2_mod_std1)
            r_R2_std2 = np.asarray(R2_std2) - np.asarray(wls_R2_mod_std2)
            r_R2_std3 = np.asarray(R2_std3) - np.asarray(wls_R2_mod_std3)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 1 and drift_order_conc_value == 1:
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std))
            w_R0_std = 1 / (np.asarray(error0_std) ** 2)
            w_R1_std = 1 / (np.asarray(error1_std) ** 2)
            w_R2_std = 1 / (np.asarray(error2_std) ** 2)
            w_R3_std = 1 / (np.asarray(error3_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_R0_std)
            wls_R1_model = WLS(R1_std, X, weights=w_R1_std)
            wls_R2_model = WLS(R2_std, X, weights=w_R2_std)
            wls_R3_model = WLS(R3_std, X, weights=w_R3_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            results_R3 = wls_R3_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            d0 = results_R3.params[0]
            d1 = results_R3.params[1]
            x = np.linspace(0, max(np.asarray(Time_std)), 200)
            fit_R0_std = a1 * x + a0
            fit_R1_std = b1 * x + b0
            fit_R2_std = c1 * x + c0
            fit_R3_std = d1 * x + d0
            wls_R0_mod = a1 * np.asarray(Time_std) + a0
            wls_R1_mod = b1 * np.asarray(Time_std) + b0
            wls_R2_mod = c1 * np.asarray(Time_std) + c0
            wls_R3_mod = d1 * np.asarray(Time_std) + d0
            R0_corr_std = R0_std - a1 * np.asarray(Time_std)
            R1_corr_std = R1_std - b1 * np.asarray(Time_std)
            R2_corr_std = R2_std - c1 * np.asarray(Time_std)
            R3_corr_std = R3_std - d1 * np.asarray(Time_std)
            R0_corr_unk = R0_unk - a1 * np.asarray(Time_unk)
            R1_corr_unk = R1_unk - b1 * np.asarray(Time_unk)
            R2_corr_unk = R2_unk - c1 * np.asarray(Time_unk)
            R3_corr_unk = R3_unk - d1 * np.asarray(Time_unk)
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            r_R1_std = np.asarray(R1_std) - np.asarray(wls_R1_mod)
            r_R2_std = np.asarray(R2_std) - np.asarray(wls_R2_mod)
            r_R3_std = np.asarray(R3_std) - np.asarray(wls_R3_mod)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 1 and drift_order_conc_value == 2:
            Time2_std = np.asarray(Time_std) ** 2
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std))
            w_R0_std = 1 / (np.asarray(error0_std) ** 2)
            w_R1_std = 1 / (np.asarray(error1_std) ** 2)
            w_R2_std = 1 / (np.asarray(error2_std) ** 2)
            w_R3_std = 1 / (np.asarray(error3_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_R0_std)
            wls_R1_model = WLS(R1_std, X, weights=w_R1_std)
            wls_R2_model = WLS(R2_std, X, weights=w_R2_std)
            wls_R3_model = WLS(R3_std, X, weights=w_R3_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            results_R3 = wls_R3_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            d0 = results_R3.params[0]
            d1 = results_R3.params[1]
            d2 = results_R3.params[2]
            x = np.linspace(0, max(np.asarray(Time_std)), 200)
            fit_R0_std = a2 * (x ** 2) + a1 * x + a0
            fit_R1_std = b2 * (x ** 2) + b1 * x + b0
            fit_R2_std = c2 * (x ** 2) + c1 * x + c0
            fit_R3_std = d2 * (x ** 2) + d1 * x + d0
            wls_R0_mod = a2 * np.asarray(Time2_std) + a1 * np.asarray(Time_std) + a0
            wls_R1_mod = b2 * np.asarray(Time2_std) + b1 * np.asarray(Time_std) + b0
            wls_R2_mod = c2 * np.asarray(Time2_std) + c1 * np.asarray(Time_std) + c0
            wls_R3_mod = d2 * np.asarray(Time2_std) + d1 * np.asarray(Time_std) + d0
            R0_corr_std = R0_std - (a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            R1_corr_std = R1_std - (b2 * np.asarray(Time_std) ** 2 + b1 * np.asarray(Time_std))
            R2_corr_std = R2_std - (c2 * np.asarray(Time_std) ** 2 + c1 * np.asarray(Time_std))
            R3_corr_std = R3_std - (d2 * np.asarray(Time_std) ** 2 + d1 * np.asarray(Time_std))
            R0_corr_unk = R0_unk - (a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b2 * np.asarray(Time_unk) ** 2 + b1 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c2 * np.asarray(Time_unk) ** 2 + c1 * np.asarray(Time_unk))
            R3_corr_unk = R3_unk - (d2 * np.asarray(Time_unk) ** 2 + d1 * np.asarray(Time_unk))
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            r_R1_std = np.asarray(R1_std) - np.asarray(wls_R1_mod)
            r_R2_std = np.asarray(R2_std) - np.asarray(wls_R2_mod)
            r_R3_std = np.asarray(R3_std) - np.asarray(wls_R3_mod)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 1 and drift_order_conc_value == 3:
            Time2_std = np.asarray(Time_std) ** 2
            Time3_std = np.asarray(Time_std) ** 3
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std, Time3_std))
            w_R0_std = 1 / (np.asarray(error0_std) ** 2)
            w_R1_std = 1 / (np.asarray(error1_std) ** 2)
            w_R2_std = 1 / (np.asarray(error2_std) ** 2)
            w_R3_std = 1 / (np.asarray(error3_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_R0_std)
            wls_R1_model = WLS(R1_std, X, weights=w_R1_std)
            wls_R2_model = WLS(R2_std, X, weights=w_R2_std)
            wls_R3_model = WLS(R3_std, X, weights=w_R3_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            results_R3 = wls_R3_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            d0 = results_R3.params[0]
            d1 = results_R3.params[1]
            d2 = results_R3.params[2]
            d3 = results_R3.params[3]
            x = np.linspace(0, max(np.asarray(Time_std)), 200)
            fit_R0_std = a3 * (x ** 3) + a2 * (x ** 2) + a1 * x + a0
            fit_R1_std = b3 * (x ** 3) + b2 * (x ** 2) + b1 * x + b0
            fit_R2_std = c3 * (x ** 3) + c2 * (x ** 2) + c1 * x + c0
            fit_R3_std = d3 * (x ** 3) + d2 * (x ** 2) + d1 * x + d0
            wls_R0_mod = a3 * np.asarray(Time3_std) + a2 * np.asarray(Time2_std) + a1 * np.asarray(Time_std) + a0
            wls_R1_mod = b3 * np.asarray(Time3_std) + b2 * np.asarray(Time2_std) + b1 * np.asarray(Time_std) + b0
            wls_R2_mod = c3 * np.asarray(Time3_std) + c2 * np.asarray(Time2_std) + c1 * np.asarray(Time_std) + c0
            wls_R3_mod = d3 * np.asarray(Time3_std) + d2 * np.asarray(Time2_std) + d1 * np.asarray(Time_std) + d0
            R0_corr_std = R0_std - (a3 * np.asarray(Time_std) ** 3 + a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            R1_corr_std = R1_std - (b3 * np.asarray(Time_std) ** 3 + b2 * np.asarray(Time_std) ** 2 + b1 * np.asarray(Time_std))
            R2_corr_std = R2_std - (c3 * np.asarray(Time_std) ** 3 + c2 * np.asarray(Time_std) ** 2 + c1 * np.asarray(Time_std))
            R3_corr_std = R3_std - (d3 * np.asarray(Time_std) ** 3 + d2 * np.asarray(Time_std) ** 2 + d1 * np.asarray(Time_std))
            R0_corr_unk = R0_unk - (a3 * np.asarray(Time_unk) ** 3 + a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b3 * np.asarray(Time_unk) ** 3 + b2 * np.asarray(Time_unk) ** 2 + b1 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c3 * np.asarray(Time_unk) ** 3 + c2 * np.asarray(Time_unk) ** 2 + c1 * np.asarray(Time_unk))
            R3_corr_unk = R3_unk - (d3 * np.asarray(Time_unk) ** 3 + d2 * np.asarray(Time_unk) ** 2 + d1 * np.asarray(Time_unk))
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            r_R1_std = np.asarray(R1_std) - np.asarray(wls_R1_mod)
            r_R2_std = np.asarray(R2_std) - np.asarray(wls_R2_mod)
            r_R3_std = np.asarray(R3_std) - np.asarray(wls_R3_mod)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 1 and drift_order_conc_value == 4:
            Time2_std = np.asarray(Time_std) ** 2
            Time3_std = np.asarray(Time_std) ** 3
            Time4_std = np.asarray(Time_std) ** 4
            X = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time2_std, Time3_std, Time4_std))
            w_R0_std = 1 / (np.asarray(error0_std) ** 2)
            w_R1_std = 1 / (np.asarray(error1_std) ** 2)
            w_R2_std = 1 / (np.asarray(error2_std) ** 2)
            w_R3_std = 1 / (np.asarray(error3_std) ** 2)
            wls_R0_model = WLS(R0_std, X, weights=w_R0_std)
            wls_R1_model = WLS(R1_std, X, weights=w_R1_std)
            wls_R2_model = WLS(R2_std, X, weights=w_R2_std)
            wls_R3_model = WLS(R3_std, X, weights=w_R3_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            results_R3 = wls_R3_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            c4 = results_R2.params[4]
            d0 = results_R3.params[0]
            d1 = results_R3.params[1]
            d2 = results_R3.params[2]
            d3 = results_R3.params[3]
            d4 = results_R3.params[4]
            x = np.linspace(0, max(np.asarray(Time_std)), 200)
            fit_R0_std = a4 * (x ** 4) + a3 * (x ** 3) + a2 * (x ** 2) + a1 * x + a0
            fit_R1_std = b4 * (x ** 4) + b3 * (x ** 3) + b2 * (x ** 2) + b1 * x + b0
            fit_R2_std = c4 * (x ** 4) + c3 * (x ** 3) + c2 * (x ** 2) + c1 * x + c0
            fit_R3_std = d4 * (x ** 4) + d3 * (x ** 3) + d2 * (x ** 2) + d1 * x + d0
            wls_R0_mod = a4 * np.asarray(Time4_std) + a3 * np.asarray(Time3_std) + a2 * np.asarray(Time2_std) + a1 * np.asarray(Time_std) + a0
            wls_R1_mod = b4 * np.asarray(Time4_std) + b3 * np.asarray(Time3_std) + b2 * np.asarray(Time2_std) + b1 * np.asarray(Time_std) + b0
            wls_R2_mod = c4 * np.asarray(Time4_std) + c3 * np.asarray(Time3_std) + c2 * np.asarray(Time2_std) + c1 * np.asarray(Time_std) + c0
            wls_R3_mod = d4 * np.asarray(Time4_std) + d3 * np.asarray(Time3_std) + d2 * np.asarray(Time2_std) + d1 * np.asarray(Time_std) + d0
            R0_corr_std = R0_std - (a4 * np.asarray(Time_std) ** 4 + a3 * np.asarray(Time_std) ** 3 + a2 * np.asarray(Time_std) ** 2 + a1 * np.asarray(Time_std))
            R1_corr_std = R1_std - (b4 * np.asarray(Time_std) ** 4 + b3 * np.asarray(Time_std) ** 3 + b2 * np.asarray(Time_std) ** 2 + b1 * np.asarray(Time_std))
            R2_corr_std = R2_std - (c4 * np.asarray(Time_std) ** 4 + c3 * np.asarray(Time_std) ** 3 + c2 * np.asarray(Time_std) ** 2 + c1 * np.asarray(Time_std))
            R3_corr_std = R3_std - (d4 * np.asarray(Time_std) ** 4 + d3 * np.asarray(Time_std) ** 3 + d2 * np.asarray(Time_std) ** 2 + d1 * np.asarray(Time_std))
            R0_corr_unk = R0_unk - (a4 * np.asarray(Time_unk) ** 4 + a3 * np.asarray(Time_unk) ** 3 + a2 * np.asarray(Time_unk) ** 2 + a1 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b4 * np.asarray(Time_unk) ** 4 + b3 * np.asarray(Time_unk) ** 3 + b2 * np.asarray(Time_unk) ** 2 + b1 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c4 * np.asarray(Time_unk) ** 4 + c3 * np.asarray(Time_unk) ** 3 + c2 * np.asarray(Time_unk) ** 2 + c1 * np.asarray(Time_unk))
            R3_corr_unk = R3_unk - (d4 * np.asarray(Time_unk) ** 4 + d3 * np.asarray(Time_unk) ** 3 + d2 * np.asarray(Time_unk) ** 2 + d1 * np.asarray(Time_unk))
            r_R0_std = np.asarray(R0_std) - np.asarray(wls_R0_mod)
            r_R1_std = np.asarray(R1_std) - np.asarray(wls_R1_mod)
            r_R2_std = np.asarray(R2_std) - np.asarray(wls_R2_mod)
            r_R3_std = np.asarray(R3_std) - np.asarray(wls_R3_mod)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 2 and drift_order_conc_value == 1:
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X = np.vstack((np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1))), np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1)))))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1)))
            Y_R2 = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1)))
            Y_R3 = np.vstack((np.asarray(R3_std1).reshape(len(R3_std1),1), np.asarray(R3_std2).reshape(len(R3_std2),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R2_std1 = 1 / (np.asarray(error2_std1) ** 2)
            w_R2_std2 = 1 / (np.asarray(error2_std2) ** 2)
            w_R3_std1 = 1 / (np.asarray(error3_std1) ** 2)
            w_R3_std2 = 1 / (np.asarray(error3_std2) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1)))
            w_R2_std = np.vstack((w_R2_std1.reshape(len(w_R2_std1),1), w_R2_std2.reshape(len(w_R2_std2),1)))
            w_R3_std = np.vstack((w_R3_std1.reshape(len(w_R3_std1),1), w_R3_std2.reshape(len(w_R3_std2),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            wls_R2_model = WLS(Y_R2, X, weights=w_R2_std)
            wls_R3_model = WLS(R3_std, X, weights=w_R3_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            results_R3 = wls_R3_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            d0 = results_R3.params[0]
            d1 = results_R3.params[1]
            d2 = results_R3.params[2]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_R0_std1 = a2 * x + a0
            fit_R0_std2 = a2 * x + a1
            fit_R1_std1 = b2 * x + b0
            fit_R1_std2 = b2 * x + b1
            fit_R2_std1 = c2 * x + c0
            fit_R2_std2 = c2 * x + c1
            fit_R3_std1 = d2 * x + d0
            fit_R3_std2 = d2 * x + d1
            wls_R0_mod_std1 = a2 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a2 * np.asarray(Time_std2) + a1
            wls_R1_mod_std1 = b2 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b2 * np.asarray(Time_std2) + b1
            wls_R2_mod_std1 = c2 * np.asarray(Time_std1) + c0
            wls_R2_mod_std2 = c2 * np.asarray(Time_std2) + c1
            wls_R3_mod_std1 = d2 * np.asarray(Time_std1) + d0
            wls_R3_mod_std2 = d2 * np.asarray(Time_std2) + d1
            R0_corr_std1 = R0_std1 - a2 * np.asarray(Time_std1)
            R1_corr_std1 = R1_std1 - b2 * np.asarray(Time_std1)
            R2_corr_std1 = R2_std1 - c2 * np.asarray(Time_std1)
            R3_corr_std1 = R3_std1 - d2 * np.asarray(Time_std1)
            R0_corr_std2 = R0_std2 - a2 * np.asarray(Time_std2)
            R1_corr_std2 = R1_std2 - b2 * np.asarray(Time_std2)
            R2_corr_std2 = R2_std2 - c2 * np.asarray(Time_std2)
            R3_corr_std2 = R3_std2 - d2 * np.asarray(Time_std2)
            R0_corr_unk = R0_unk - a2 * np.asarray(Time_unk)
            R1_corr_unk = R1_unk - b2 * np.asarray(Time_unk)
            R2_corr_unk = R2_unk - c2 * np.asarray(Time_unk)
            R3_corr_unk = R3_unk - d2 * np.asarray(Time_unk)
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R2_std1 = np.asarray(R2_std1) - np.asarray(wls_R2_mod_std1)
            r_R2_std2 = np.asarray(R2_std2) - np.asarray(wls_R2_mod_std2)
            r_R3_std1 = np.asarray(R3_std1) - np.asarray(wls_R3_mod_std1)
            r_R3_std2 = np.asarray(R3_std2) - np.asarray(wls_R3_mod_std2)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 2 and drift_order_conc_value == 2:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time2_std2 = np.asarray(Time_std2) ** 2
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1)))
            X = np.vstack((X_std1, X_std2))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1)))
            Y_R2 = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1)))
            Y_R3 = np.vstack((np.asarray(R3_std1).reshape(len(R3_std1),1), np.asarray(R3_std2).reshape(len(R3_std2),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R2_std1 = 1 / (np.asarray(error2_std1) ** 2)
            w_R2_std2 = 1 / (np.asarray(error2_std2) ** 2)
            w_R3_std1 = 1 / (np.asarray(error3_std1) ** 2)
            w_R3_std2 = 1 / (np.asarray(error3_std2) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1)))
            w_R2_std = np.vstack((w_R2_std1.reshape(len(w_R2_std1),1), w_R2_std2.reshape(len(w_R2_std2),1)))
            w_R3_std = np.vstack((w_R3_std1.reshape(len(w_R3_std1),1), w_R3_std2.reshape(len(w_R3_std2),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            wls_R2_model = WLS(Y_R2, X, weights=w_R2_std)
            wls_R3_model = WLS(R3_std, X, weights=w_R3_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            results_R3 = wls_R3_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            d0 = results_R3.params[0]
            d1 = results_R3.params[1]
            d2 = results_R3.params[2]
            d3 = results_R3.params[3]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_R0_std1 = a3 * (x ** 2) + a2 * x + a0
            fit_R0_std2 = a3 * (x ** 2) + a2 * x + a1
            fit_R1_std1 = b3 * (x ** 2) + b2 * x + b0
            fit_R1_std2 = b3 * (x ** 2) + b2 * x + b1
            fit_R2_std1 = c3 * (x ** 2) + c2 * x + c0
            fit_R2_std2 = c3 * (x ** 2) + c2 * x + c1
            fit_R3_std1 = d3 * (x ** 2) + d2 * x + d0
            fit_R3_std2 = d3 * (x ** 2) + d2 * x + d1
            wls_R0_mod_std1 = a3 * np.asarray(Time2_std1) + a2 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a3 * np.asarray(Time2_std2) + a2 * np.asarray(Time_std2) + a1
            wls_R1_mod_std1 = b3 * np.asarray(Time2_std1) + b2 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b3 * np.asarray(Time2_std2) + b2 * np.asarray(Time_std2) + b1
            wls_R2_mod_std1 = c3 * np.asarray(Time2_std1) + c2 * np.asarray(Time_std1) + c0
            wls_R2_mod_std2 = c3 * np.asarray(Time2_std2) + c2 * np.asarray(Time_std2) + c1
            wls_R3_mod_std1 = d3 * np.asarray(Time2_std1) + d2 * np.asarray(Time_std1) + d0
            wls_R3_mod_std2 = d3 * np.asarray(Time2_std2) + d2 * np.asarray(Time_std2) + d1
            R0_corr_std1 = R0_std1 - (a3 * np.asarray(Time_std1) ** 2 + a2 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b3 * np.asarray(Time_std1) ** 2 + b2 * np.asarray(Time_std1))
            R2_corr_std1 = R2_std1 - (c3 * np.asarray(Time_std1) ** 2 + c2 * np.asarray(Time_std1))
            R3_corr_std1 = R3_std1 - (d3 * np.asarray(Time_std1) ** 2 + d2 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a3 * np.asarray(Time_std2) ** 2 + a2 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b3 * np.asarray(Time_std2) ** 2 + b2 * np.asarray(Time_std2))
            R2_corr_std2 = R2_std2 - (c3 * np.asarray(Time_std2) ** 2 + c2 * np.asarray(Time_std2))
            R3_corr_std2 = R3_std2 - (d3 * np.asarray(Time_std2) ** 2 + d2 * np.asarray(Time_std2))
            R0_corr_unk = R0_unk - (a3 * np.asarray(Time_unk) ** 2 + a2 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b3 * np.asarray(Time_unk) ** 2 + b2 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c3 * np.asarray(Time_unk) ** 2 + c2 * np.asarray(Time_unk))
            R3_corr_unk = R3_unk - (d3 * np.asarray(Time_unk) ** 2 + d2 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R2_std1 = np.asarray(R2_std1) - np.asarray(wls_R2_mod_std1)
            r_R2_std2 = np.asarray(R2_std2) - np.asarray(wls_R2_mod_std2)
            r_R3_std1 = np.asarray(R3_std1) - np.asarray(wls_R3_mod_std1)
            r_R3_std2 = np.asarray(R3_std2) - np.asarray(wls_R3_mod_std2)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 2 and drift_order_conc_value == 3:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1)))
            X = np.vstack((X_std1, X_std2))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1)))
            Y_R2 = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1)))
            Y_R3 = np.vstack((np.asarray(R3_std1).reshape(len(R3_std1),1), np.asarray(R3_std2).reshape(len(R3_std2),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R2_std1 = 1 / (np.asarray(error2_std1) ** 2)
            w_R2_std2 = 1 / (np.asarray(error2_std2) ** 2)
            w_R3_std1 = 1 / (np.asarray(error3_std1) ** 2)
            w_R3_std2 = 1 / (np.asarray(error3_std2) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1)))
            w_R2_std = np.vstack((w_R2_std1.reshape(len(w_R2_std1),1), w_R2_std2.reshape(len(w_R2_std2),1)))
            w_R3_std = np.vstack((w_R3_std1.reshape(len(w_R3_std1),1), w_R3_std2.reshape(len(w_R3_std2),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            wls_R2_model = WLS(Y_R2, X, weights=w_R2_std)
            wls_R3_model = WLS(R3_std, X, weights=w_R3_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            results_R3 = wls_R3_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            c4 = results_R2.params[4]
            d0 = results_R3.params[0]
            d1 = results_R3.params[1]
            d2 = results_R3.params[2]
            d3 = results_R3.params[3]
            d4 = results_R3.params[4]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_R0_std1 = a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a0
            fit_R0_std2 = a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a1
            fit_R1_std1 = b4 * (x ** 3) + b3 * (x ** 2) + b2 * x + b0
            fit_R1_std2 = b4 * (x ** 3) + b3 * (x ** 2) + b2 * x + b1
            fit_R2_std1 = c4 * (x ** 3) + c3 * (x ** 2) + c2 * x + c0
            fit_R2_std2 = c4 * (x ** 3) + c3 * (x ** 2) + c2 * x + c1
            fit_R3_std1 = d4 * (x ** 3) + d3 * (x ** 2) + d2 * x + d0
            fit_R3_std2 = d4 * (x ** 3) + d3 * (x ** 2) + d2 * x + d1
            wls_R0_mod_std1 = a4 * np.asarray(Time3_std1) + a3 * np.asarray(Time2_std1) + a2 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a4 * np.asarray(Time3_std2) + a3 * np.asarray(Time2_std2) + a2 * np.asarray(Time_std2) + a1
            wls_R1_mod_std1 = b4 * np.asarray(Time3_std1) + b3 * np.asarray(Time2_std1) + b2 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b4 * np.asarray(Time3_std2) + b3 * np.asarray(Time2_std2) + b2 * np.asarray(Time_std2) + b1
            wls_R2_mod_std1 = c4 * np.asarray(Time3_std1) + c3 * np.asarray(Time2_std1) + c2 * np.asarray(Time_std1) + c0
            wls_R2_mod_std2 = c4 * np.asarray(Time3_std2) + c3 * np.asarray(Time2_std2) + c2 * np.asarray(Time_std2) + c1
            wls_R3_mod_std1 = d4 * np.asarray(Time3_std1) + d3 * np.asarray(Time2_std1) + d2 * np.asarray(Time_std1) + d0
            wls_R3_mod_std2 = d4 * np.asarray(Time3_std2) + d3 * np.asarray(Time2_std2) + d2 * np.asarray(Time_std2) + d1
            R0_corr_std1 = R0_std1 - (a4 * np.asarray(Time_std1) ** 3 + a3 * np.asarray(Time_std1) ** 2 + a2 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b4 * np.asarray(Time_std1) ** 3 + b3 * np.asarray(Time_std1) ** 2 + b2 * np.asarray(Time_std1))
            R2_corr_std1 = R2_std1 - (c4 * np.asarray(Time_std1) ** 3 + c3 * np.asarray(Time_std1) ** 2 + c2 * np.asarray(Time_std1))
            R3_corr_std1 = R3_std1 - (d4 * np.asarray(Time_std1) ** 3 + d3 * np.asarray(Time_std1) ** 2 + d2 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a4 * np.asarray(Time_std2) ** 3 + a3 * np.asarray(Time_std2) ** 2 + a2 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b4 * np.asarray(Time_std2) ** 3 + b3 * np.asarray(Time_std2) ** 2 + b2 * np.asarray(Time_std2))
            R2_corr_std2 = R2_std2 - (c4 * np.asarray(Time_std2) ** 3 + c3 * np.asarray(Time_std2) ** 2 + c2 * np.asarray(Time_std2))
            R3_corr_std2 = R3_std2 - (d4 * np.asarray(Time_std2) ** 3 + d3 * np.asarray(Time_std2) ** 2 + d2 * np.asarray(Time_std2))
            R0_corr_unk = R0_unk - (a4 * np.asarray(Time_unk) ** 3 + a3 * np.asarray(Time_unk) ** 2 + a2 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b4 * np.asarray(Time_unk) ** 3 + b3 * np.asarray(Time_unk) ** 2 + b2 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c4 * np.asarray(Time_unk) ** 3 + c3 * np.asarray(Time_unk) ** 2 + c2 * np.asarray(Time_unk))
            R3_corr_unk = R3_unk - (d4 * np.asarray(Time_unk) ** 3 + d3 * np.asarray(Time_unk) ** 2 + d2 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R2_std1 = np.asarray(R2_std1) - np.asarray(wls_R2_mod_std1)
            r_R2_std2 = np.asarray(R2_std2) - np.asarray(wls_R2_mod_std2)
            r_R3_std1 = np.asarray(R3_std1) - np.asarray(wls_R3_mod_std1)
            r_R3_std2 = np.asarray(R3_std2) - np.asarray(wls_R3_mod_std2)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 2 and drift_order_conc_value == 4:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time4_std1 = np.asarray(Time_std1) ** 4
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            Time4_std2 = np.asarray(Time_std2) ** 4
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),2), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1), Time4_std1.reshape(len(Time4_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),2), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1), Time4_std2.reshape(len(Time4_std2),1)))
            X = np.vstack((X_std1, X_std2))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1)))
            Y_R2 = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1)))
            Y_R3 = np.vstack((np.asarray(R3_std1).reshape(len(R3_std1),1), np.asarray(R3_std2).reshape(len(R3_std2),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R2_std1 = 1 / (np.asarray(error2_std1) ** 2)
            w_R2_std2 = 1 / (np.asarray(error2_std2) ** 2)
            w_R3_std1 = 1 / (np.asarray(error3_std1) ** 2)
            w_R3_std2 = 1 / (np.asarray(error3_std2) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1)))
            w_R2_std = np.vstack((w_R2_std1.reshape(len(w_R2_std1),1), w_R2_std2.reshape(len(w_R2_std2),1)))
            w_R3_std = np.vstack((w_R3_std1.reshape(len(w_R3_std1),1), w_R3_std2.reshape(len(w_R3_std2),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            wls_R2_model = WLS(Y_R2, X, weights=w_R2_std)
            wls_R3_model = WLS(R3_std, X, weights=w_R3_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            results_R3 = wls_R3_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            a5 = results_R0.params[5]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            b5 = results_R1.params[5]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            c4 = results_R2.params[4]
            c5 = results_R2.params[5]
            d0 = results_R3.params[0]
            d1 = results_R3.params[1]
            d2 = results_R3.params[2]
            d3 = results_R3.params[3]
            d4 = results_R3.params[4]
            d5 = results_R3.params[5]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1))))), 200)
            fit_R0_std1 = a5 * (x ** 4) + a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a0
            fit_R0_std2 = a5 * (x ** 4) + a4 * (x ** 3) + a3 * (x ** 2) + a2 * x + a1
            fit_R1_std1 = b5 * (x ** 4) + b4 * (x ** 3) + b3 * (x ** 2) + b2 * x + b0
            fit_R1_std2 = b5 * (x ** 4) + b4 * (x ** 3) + b3 * (x ** 2) + b2 * x + b1
            fit_R2_std1 = c5 * (x ** 4) + c4 * (x ** 3) + c3 * (x ** 2) + c2 * x + c0
            fit_R2_std2 = c5 * (x ** 4) + c4 * (x ** 3) + c3 * (x ** 2) + c2 * x + c1
            fit_R3_std1 = d5 * (x ** 4) + d4 * (x ** 3) + d3 * (x ** 2) + d2 * x + d0
            fit_R3_std2 = d5 * (x ** 4) + d4 * (x ** 3) + d3 * (x ** 2) + d2 * x + d1
            wls_R0_mod_std1 = a5 * np.asarray(Time4_std1) + a4 * np.asarray(Time3_std1) + a3 * np.asarray(Time2_std1) + a2 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a5 * np.asarray(Time4_std2) + a4 * np.asarray(Time3_std2) + a3 * np.asarray(Time2_std2) + a2 * np.asarray(Time_std2) + a1
            wls_R1_mod_std1 = b5 * np.asarray(Time4_std1) + b4 * np.asarray(Time3_std1) + b3 * np.asarray(Time2_std1) + b2 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b5 * np.asarray(Time4_std2) + b4 * np.asarray(Time3_std2) + b3 * np.asarray(Time2_std2) + b2 * np.asarray(Time_std2) + b1
            wls_R2_mod_std1 = c5 * np.asarray(Time4_std1) + c4 * np.asarray(Time3_std1) + c3 * np.asarray(Time2_std1) + c2 * np.asarray(Time_std1) + c0
            wls_R2_mod_std2 = c5 * np.asarray(Time4_std2) + c4 * np.asarray(Time3_std2) + c3 * np.asarray(Time2_std2) + c2 * np.asarray(Time_std2) + c1
            R0_corr_std1 = R0_std1 - (a5 * np.asarray(Time_std1) ** 4 + a4 * np.asarray(Time_std1) ** 3 + a3 * np.asarray(Time_std1) ** 2 + a2 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b5 * np.asarray(Time_std1) ** 4 + b4 * np.asarray(Time_std1) ** 3 + b3 * np.asarray(Time_std1) ** 2 + b2 * np.asarray(Time_std1))
            R2_corr_std1 = R2_std1 - (c5 * np.asarray(Time_std1) ** 4 + c4 * np.asarray(Time_std1) ** 3 + c3 * np.asarray(Time_std1) ** 2 + c2 * np.asarray(Time_std1))
            R3_corr_std1 = R3_std1 - (d5 * np.asarray(Time_std1) ** 4 + d4 * np.asarray(Time_std1) ** 3 + d3 * np.asarray(Time_std1) ** 2 + d2 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a5 * np.asarray(Time_std2) ** 4 + a4 * np.asarray(Time_std2) ** 3 + a3 * np.asarray(Time_std2) ** 2 + a2 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b5 * np.asarray(Time_std2) ** 4 + b4 * np.asarray(Time_std2) ** 3 + b3 * np.asarray(Time_std2) ** 2 + b2 * np.asarray(Time_std2))
            R2_corr_std2 = R2_std2 - (c5 * np.asarray(Time_std2) ** 4 + c4 * np.asarray(Time_std2) ** 3 + c3 * np.asarray(Time_std2) ** 2 + c2 * np.asarray(Time_std2))
            R3_corr_std2 = R3_std2 - (d5 * np.asarray(Time_std2) ** 4 + d4 * np.asarray(Time_std2) ** 3 + d3 * np.asarray(Time_std2) ** 2 + d2 * np.asarray(Time_std2))
            R0_corr_unk = R0_unk - (a5 * np.asarray(Time_unk) ** 4 + a4 * np.asarray(Time_unk) ** 3 + a3 * np.asarray(Time_unk) ** 2 + a2 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b5 * np.asarray(Time_unk) ** 4 + b4 * np.asarray(Time_unk) ** 3 + b3 * np.asarray(Time_unk) ** 2 + b2 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c5 * np.asarray(Time_unk) ** 4 + c4 * np.asarray(Time_unk) ** 3 + c3 * np.asarray(Time_unk) ** 2 + c2 * np.asarray(Time_unk))
            R3_corr_unk = R3_unk - (d5 * np.asarray(Time_unk) ** 4 + d4 * np.asarray(Time_unk) ** 3 + d3 * np.asarray(Time_unk) ** 2 + d2 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R2_std1 = np.asarray(R2_std1) - np.asarray(wls_R2_mod_std1)
            r_R2_std2 = np.asarray(R2_std2) - np.asarray(wls_R2_mod_std2)
            r_R3_std1 = np.asarray(R3_std1) - np.asarray(wls_R3_mod_std1)
            r_R3_std2 = np.asarray(R3_std2) - np.asarray(wls_R3_mod_std2)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 3 and drift_order_conc_value == 1:
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1), np.asarray(R1_std3).reshape(len(R1_std3),1)))
            Y_R2 = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1), np.asarray(R2_std3).reshape(len(R2_std3),1)))
            Y_R3 = np.vstack((np.asarray(R3_std1).reshape(len(R3_std1),1), np.asarray(R3_std2).reshape(len(R3_std2),1), np.asarray(R3_std3).reshape(len(R3_std3),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R0_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R1_std3 = 1 / (np.asarray(error1_std3) ** 2)
            w_R2_std1 = 1 / (np.asarray(error2_std1) ** 2)
            w_R2_std2 = 1 / (np.asarray(error2_std2) ** 2)
            w_R2_std3 = 1 / (np.asarray(error2_std3) ** 2)
            w_R3_std1 = 1 / (np.asarray(error3_std1) ** 2)
            w_R3_std2 = 1 / (np.asarray(error3_std2) ** 2)
            w_R3_std3 = 1 / (np.asarray(error3_std3) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1), w_R0_std3.reshape(len(w_R0_std3),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1), w_R1_std3.reshape(len(w_R1_std3),1)))
            w_R2_std = np.vstack((w_R2_std1.reshape(len(w_R2_std1),1), w_R2_std2.reshape(len(w_R2_std2),1), w_R2_std3.reshape(len(w_R2_std3),1)))
            w_R3_std = np.vstack((w_R3_std1.reshape(len(w_R3_std1),1), w_R3_std2.reshape(len(w_R3_std2),1), w_R3_std3.reshape(len(w_R3_std3),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            wls_R2_model = WLS(Y_R2, X, weights=w_R2_std)
            wls_R3_model = WLS(Y_R3, X, weights=w_R3_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            results_R3 = wls_R3_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            d0 = results_R3.params[0]
            d1 = results_R3.params[1]
            d2 = results_R3.params[2]
            d3 = results_R3.params[3]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_R0_std1 = a3 * x + a0
            fit_R0_std2 = a3 * x + a1
            fit_R0_std3 = a3 * x + a2
            fit_R1_std1 = b3 * x + b0
            fit_R1_std2 = b3 * x + b1
            fit_R1_std3 = b3 * x + b2
            fit_R2_std1 = c3 * x + c0
            fit_R2_std2 = c3 * x + c1
            fit_R2_std3 = c3 * x + c2
            fit_R3_std1 = d3 * x + d0
            fit_R3_std2 = d3 * x + d1
            fit_R3_std3 = d3 * x + d2
            wls_R0_mod_std1 = a3 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a3 * np.asarray(Time_std2) + a1
            wls_R0_mod_std3 = a3 * np.asarray(Time_std3) + a2
            wls_R1_mod_std1 = b3 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b3 * np.asarray(Time_std2) + b1
            wls_R1_mod_std3 = b3 * np.asarray(Time_std3) + b2
            wls_R2_mod_std1 = c3 * np.asarray(Time_std1) + c0
            wls_R2_mod_std2 = c3 * np.asarray(Time_std2) + c1
            wls_R2_mod_std3 = c3 * np.asarray(Time_std3) + c2
            wls_R3_mod_std1 = d3 * np.asarray(Time_std1) + d0
            wls_R3_mod_std2 = d3 * np.asarray(Time_std2) + d1
            wls_R3_mod_std3 = d3 * np.asarray(Time_std3) + d2
            R0_corr_std1 = R0_std1 - a3 * np.asarray(Time_std1)
            R1_corr_std1 = R1_std1 - b3 * np.asarray(Time_std1)
            R2_corr_std1 = R2_std1 - c3 * np.asarray(Time_std1)
            R3_corr_std1 = R3_std1 - d3 * np.asarray(Time_std1)
            R0_corr_std2 = R0_std2 - a3 * np.asarray(Time_std2)
            R1_corr_std2 = R1_std2 - b3 * np.asarray(Time_std2)
            R2_corr_std2 = R2_std2 - c3 * np.asarray(Time_std2)
            R3_corr_std2 = R3_std2 - d3 * np.asarray(Time_std2)
            R0_corr_std3 = R0_std3 - a3 * np.asarray(Time_std3)
            R1_corr_std3 = R1_std3 - b3 * np.asarray(Time_std3)
            R2_corr_std3 = R2_std3 - c3 * np.asarray(Time_std3)
            R3_corr_std3 = R3_std3 - d3 * np.asarray(Time_std3)
            R0_corr_unk = R0_unk - a3 * np.asarray(Time_unk)
            R1_corr_unk = R1_unk - b3 * np.asarray(Time_unk)
            R2_corr_unk = R2_unk - c3 * np.asarray(Time_unk)
            R3_corr_unk = R3_unk - d3 * np.asarray(Time_unk)
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R0_std3 = np.asarray(R0_std3) - np.asarray(wls_R0_mod_std3)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R1_std3 = np.asarray(R1_std3) - np.asarray(wls_R1_mod_std3)
            r_R2_std1 = np.asarray(R2_std1) - np.asarray(wls_R2_mod_std1)
            r_R2_std2 = np.asarray(R2_std2) - np.asarray(wls_R2_mod_std2)
            r_R2_std3 = np.asarray(R2_std3) - np.asarray(wls_R2_mod_std3)
            r_R3_std1 = np.asarray(R3_std1) - np.asarray(wls_R3_mod_std1)
            r_R3_std2 = np.asarray(R3_std2) - np.asarray(wls_R3_mod_std2)
            r_R3_std3 = np.asarray(R3_std3) - np.asarray(wls_R3_mod_std3)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 3 and drift_order_conc_value == 2:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time2_std3 = np.asarray(Time_std3) ** 2
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1), Time2_std3.reshape(len(Time2_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1), np.asarray(R1_std3).reshape(len(R1_std3),1)))
            Y_R2 = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1), np.asarray(R2_std3).reshape(len(R2_std3),1)))
            Y_R3 = np.vstack((np.asarray(R3_std1).reshape(len(R3_std1),1), np.asarray(R3_std2).reshape(len(R3_std2),1), np.asarray(R3_std3).reshape(len(R3_std3),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R0_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R1_std3 = 1 / (np.asarray(error1_std3) ** 2)
            w_R2_std1 = 1 / (np.asarray(error2_std1) ** 2)
            w_R2_std2 = 1 / (np.asarray(error2_std2) ** 2)
            w_R2_std3 = 1 / (np.asarray(error2_std3) ** 2)
            w_R3_std1 = 1 / (np.asarray(error3_std1) ** 2)
            w_R3_std2 = 1 / (np.asarray(error3_std2) ** 2)
            w_R3_std3 = 1 / (np.asarray(error3_std3) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1), w_R0_std3.reshape(len(w_R0_std3),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1), w_R1_std3.reshape(len(w_R1_std3),1)))
            w_R2_std = np.vstack((w_R2_std1.reshape(len(w_R2_std1),1), w_R2_std2.reshape(len(w_R2_std2),1), w_R2_std3.reshape(len(w_R2_std3),1)))
            w_R3_std = np.vstack((w_R3_std1.reshape(len(w_R3_std1),1), w_R3_std2.reshape(len(w_R3_std2),1), w_R3_std3.reshape(len(w_R3_std3),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            wls_R2_model = WLS(Y_R2, X, weights=w_R2_std)
            wls_R3_model = WLS(Y_R3, X, weights=w_R3_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            results_R3 = wls_R3_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            c4 = results_R2.params[4]
            d0 = results_R3.params[0]
            d1 = results_R3.params[1]
            d2 = results_R3.params[2]
            d3 = results_R3.params[3]
            d4 = results_R3.params[4]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_R0_std1 = a4 * (x ** 2) + a3 * x + a0
            fit_R0_std2 = a4 * (x ** 2) + a3 * x + a1
            fit_R0_std3 = a4 * (x ** 2) + a3 * x + a2
            fit_R1_std1 = b4 * (x ** 2) + b3 * x + b0
            fit_R1_std2 = b4 * (x ** 2) + b3 * x + b1
            fit_R1_std3 = b4 * (x ** 2) + b3 * x + b2
            fit_R2_std1 = c4 * (x ** 2) + c3 * x + c0
            fit_R2_std2 = c4 * (x ** 2) + c3 * x + c1
            fit_R2_std3 = c4 * (x ** 2) + c3 * x + c2
            fit_R3_std1 = d4 * (x ** 2) + d3 * x + d0
            fit_R3_std2 = d4 * (x ** 2) + d3 * x + d1
            fit_R3_std3 = d4 * (x ** 2) + d3 * x + d2
            wls_R0_mod_std1 = a4 * np.asarray(Time2_std1) + a3 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a4 * np.asarray(Time2_std2) + a3 * np.asarray(Time_std2) + a1
            wls_R0_mod_std3 = a4 * np.asarray(Time2_std3) + a3 * np.asarray(Time_std3) + a2
            wls_R1_mod_std1 = b4 * np.asarray(Time2_std1) + b3 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b4 * np.asarray(Time2_std2) + b3 * np.asarray(Time_std2) + b1
            wls_R1_mod_std3 = b4 * np.asarray(Time2_std3) + b3 * np.asarray(Time_std3) + b2
            wls_R2_mod_std1 = c4 * np.asarray(Time2_std1) + c3 * np.asarray(Time_std1) + c0
            wls_R2_mod_std2 = c4 * np.asarray(Time2_std2) + c3 * np.asarray(Time_std2) + c1
            wls_R2_mod_std3 = c4 * np.asarray(Time2_std3) + c3 * np.asarray(Time_std3) + c2
            wls_R3_mod_std1 = d4 * np.asarray(Time2_std1) + d3 * np.asarray(Time_std1) + d0
            wls_R3_mod_std2 = d4 * np.asarray(Time2_std2) + d3 * np.asarray(Time_std2) + d1
            wls_R3_mod_std3 = d4 * np.asarray(Time2_std3) + d3 * np.asarray(Time_std3) + d2
            R0_corr_std1 = R0_std1 - (a4 * np.asarray(Time_std1) ** 2 + a3 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b4 * np.asarray(Time_std1) ** 2 + b3 * np.asarray(Time_std1))
            R2_corr_std1 = R2_std1 - (c4 * np.asarray(Time_std1) ** 2 + c3 * np.asarray(Time_std1))
            R3_corr_std1 = R3_std1 - (d4 * np.asarray(Time_std1) ** 2 + d3 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a4 * np.asarray(Time_std2) ** 2 + a3 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b4 * np.asarray(Time_std2) ** 2 + b3 * np.asarray(Time_std2))
            R2_corr_std2 = R2_std2 - (c4 * np.asarray(Time_std2) ** 2 + c3 * np.asarray(Time_std2))
            R3_corr_std2 = R3_std2 - (d4 * np.asarray(Time_std2) ** 2 + d3 * np.asarray(Time_std2))
            R0_corr_std3 = R0_std3 - (a4 * np.asarray(Time_std3) ** 2 + a3 * np.asarray(Time_std3))
            R1_corr_std3 = R1_std3 - (b4 * np.asarray(Time_std3) ** 2 + b3 * np.asarray(Time_std3))
            R2_corr_std3 = R2_std3 - (c4 * np.asarray(Time_std3) ** 2 + c3 * np.asarray(Time_std3))
            R3_corr_std3 = R3_std3 - (d4 * np.asarray(Time_std3) ** 2 + d3 * np.asarray(Time_std3))
            R0_corr_unk = R0_unk - (a4 * np.asarray(Time_unk) ** 2 + a3 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b4 * np.asarray(Time_unk) ** 2 + b3 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c4 * np.asarray(Time_unk) ** 2 + c3 * np.asarray(Time_unk))
            R3_corr_unk = R3_unk - (d4 * np.asarray(Time_unk) ** 2 + d3 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R0_std3 = np.asarray(R0_std3) - np.asarray(wls_R0_mod_std3)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R1_std3 = np.asarray(R1_std3) - np.asarray(wls_R1_mod_std3)
            r_R2_std1 = np.asarray(R2_std1) - np.asarray(wls_R2_mod_std1)
            r_R2_std2 = np.asarray(R2_std2) - np.asarray(wls_R2_mod_std2)
            r_R2_std3 = np.asarray(R2_std3) - np.asarray(wls_R2_mod_std3)
            r_R3_std1 = np.asarray(R3_std1) - np.asarray(wls_R3_mod_std1)
            r_R3_std2 = np.asarray(R3_std2) - np.asarray(wls_R3_mod_std2)
            r_R3_std3 = np.asarray(R3_std3) - np.asarray(wls_R3_mod_std3)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 3 and drift_order_conc_value == 3:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            Time2_std3 = np.asarray(Time_std3) ** 2
            Time3_std3 = np.asarray(Time_std3) ** 3
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1), Time2_std3.reshape(len(Time2_std3),1), Time3_std3.reshape(len(Time3_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1), np.asarray(R1_std3).reshape(len(R1_std3),1)))
            Y_R2 = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1), np.asarray(R2_std3).reshape(len(R2_std3),1)))
            Y_R3 = np.vstack((np.asarray(R3_std1).reshape(len(R3_std1),1), np.asarray(R3_std2).reshape(len(R3_std2),1), np.asarray(R3_std3).reshape(len(R3_std3),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R0_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R1_std3 = 1 / (np.asarray(error1_std3) ** 2)
            w_R2_std1 = 1 / (np.asarray(error2_std1) ** 2)
            w_R2_std2 = 1 / (np.asarray(error2_std2) ** 2)
            w_R2_std3 = 1 / (np.asarray(error2_std3) ** 2)
            w_R3_std1 = 1 / (np.asarray(error3_std1) ** 2)
            w_R3_std2 = 1 / (np.asarray(error3_std2) ** 2)
            w_R3_std3 = 1 / (np.asarray(error3_std3) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1), w_R0_std3.reshape(len(w_R0_std3),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1), w_R1_std3.reshape(len(w_R1_std3),1)))
            w_R2_std = np.vstack((w_R2_std1.reshape(len(w_R2_std1),1), w_R2_std2.reshape(len(w_R2_std2),1), w_R2_std3.reshape(len(w_R2_std3),1)))
            w_R3_std = np.vstack((w_R3_std1.reshape(len(w_R3_std1),1), w_R3_std2.reshape(len(w_R3_std2),1), w_R3_std3.reshape(len(w_R3_std3),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            wls_R2_model = WLS(Y_R2, X, weights=w_R2_std)
            wls_R3_model = WLS(Y_R3, X, weights=w_R3_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            results_R3 = wls_R3_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            a5 = results_R0.params[5]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            b5 = results_R1.params[5]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            c4 = results_R2.params[4]
            c5 = results_R2.params[5]
            d0 = results_R3.params[0]
            d1 = results_R3.params[1]
            d2 = results_R3.params[2]
            d3 = results_R3.params[3]
            d4 = results_R3.params[4]
            d5 = results_R3.params[5]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_R0_std1 = a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a0
            fit_R0_std2 = a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a1
            fit_R0_std3 = a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a2
            fit_R1_std1 = b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b0
            fit_R1_std2 = b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b1
            fit_R1_std3 = b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b2
            fit_R2_std1 = c5 * (x ** 3) + c4 * (x ** 2) + c3 * x + c0
            fit_R2_std2 = c5 * (x ** 3) + c4 * (x ** 2) + c3 * x + c1
            fit_R2_std3 = c5 * (x ** 3) + c4 * (x ** 2) + c3 * x + c2
            fit_R3_std1 = d5 * (x ** 3) + d4 * (x ** 2) + d3 * x + d0
            fit_R3_std2 = d5 * (x ** 3) + d4 * (x ** 2) + d3 * x + d1
            fit_R3_std3 = d5 * (x ** 3) + d4 * (x ** 2) + d3 * x + d2
            wls_R0_mod_std1 = a5 * np.asarray(Time3_std1) + a4 * np.asarray(Time2_std1) + a3 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a5 * np.asarray(Time3_std2) + a4 * np.asarray(Time2_std2) + a3 * np.asarray(Time_std2) + a1
            wls_R0_mod_std3 = a5 * np.asarray(Time3_std3) + a4 * np.asarray(Time2_std3) + a3 * np.asarray(Time_std3) + a2
            wls_R1_mod_std1 = b5 * np.asarray(Time3_std1) + b4 * np.asarray(Time2_std1) + b3 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b5 * np.asarray(Time3_std2) + b4 * np.asarray(Time2_std2) + b3 * np.asarray(Time_std2) + b1
            wls_R1_mod_std3 = b5 * np.asarray(Time3_std3) + b4 * np.asarray(Time2_std3) + b3 * np.asarray(Time_std3) + b2
            wls_R2_mod_std1 = c5 * np.asarray(Time3_std1) + c4 * np.asarray(Time2_std1) + c3 * np.asarray(Time_std1) + c0
            wls_R2_mod_std2 = c5 * np.asarray(Time3_std2) + c4 * np.asarray(Time2_std2) + c3 * np.asarray(Time_std2) + c1
            wls_R2_mod_std3 = c5 * np.asarray(Time3_std3) + c4 * np.asarray(Time2_std3) + c3 * np.asarray(Time_std3) + c2
            wls_R3_mod_std1 = d5 * np.asarray(Time3_std1) + d4 * np.asarray(Time2_std1) + d3 * np.asarray(Time_std1) + d0
            wls_R3_mod_std2 = d5 * np.asarray(Time3_std2) + d4 * np.asarray(Time2_std2) + d3 * np.asarray(Time_std2) + d1
            wls_R3_mod_std3 = d5 * np.asarray(Time3_std3) + d4 * np.asarray(Time2_std3) + d3 * np.asarray(Time_std3) + d2
            R0_corr_std1 = R0_std1 - (a5 * np.asarray(Time_std1) ** 3 + a4 * np.asarray(Time_std1) ** 2 + a3 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b5 * np.asarray(Time_std1) ** 3 + b4 * np.asarray(Time_std1) ** 2 + b3 * np.asarray(Time_std1))
            R2_corr_std1 = R2_std1 - (c5 * np.asarray(Time_std1) ** 3 + c4 * np.asarray(Time_std1) ** 2 + c3 * np.asarray(Time_std1))
            R3_corr_std1 = R3_std1 - (d5 * np.asarray(Time_std1) ** 3 + d4 * np.asarray(Time_std1) ** 2 + d3 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a5 * np.asarray(Time_std2) ** 3 + a4 * np.asarray(Time_std2) ** 2 + a3 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b5 * np.asarray(Time_std2) ** 3 + b4 * np.asarray(Time_std2) ** 2 + b3 * np.asarray(Time_std2))
            R2_corr_std2 = R2_std2 - (c5 * np.asarray(Time_std2) ** 3 + c4 * np.asarray(Time_std2) ** 2 + c3 * np.asarray(Time_std2))
            R3_corr_std2 = R3_std2 - (d5 * np.asarray(Time_std2) ** 3 + d4 * np.asarray(Time_std2) ** 2 + d3 * np.asarray(Time_std2))
            R0_corr_std3 = R0_std3 - (a5 * np.asarray(Time_std3) ** 3 + a4 * np.asarray(Time_std3) ** 2 + a3 * np.asarray(Time_std3))
            R1_corr_std3 = R1_std3 - (b5 * np.asarray(Time_std3) ** 3 + b4 * np.asarray(Time_std3) ** 2 + b3 * np.asarray(Time_std3))
            R2_corr_std3 = R2_std3 - (c5 * np.asarray(Time_std3) ** 3 + c4 * np.asarray(Time_std3) ** 2 + c3 * np.asarray(Time_std3))
            R3_corr_std3 = R3_std3 - (d5 * np.asarray(Time_std3) ** 3 + d4 * np.asarray(Time_std3) ** 2 + d3 * np.asarray(Time_std3))
            R0_corr_unk = R0_unk - (a5 * np.asarray(Time_unk) ** 3 + a4 * np.asarray(Time_unk) ** 2 + a3 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b5 * np.asarray(Time_unk) ** 3 + b4 * np.asarray(Time_unk) ** 2 + b3 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c5 * np.asarray(Time_unk) ** 3 + c4 * np.asarray(Time_unk) ** 2 + c3 * np.asarray(Time_unk))
            R3_corr_unk = R3_unk - (d5 * np.asarray(Time_unk) ** 3 + d4 * np.asarray(Time_unk) ** 2 + d3 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R0_std3 = np.asarray(R0_std3) - np.asarray(wls_R0_mod_std3)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R1_std3 = np.asarray(R1_std3) - np.asarray(wls_R1_mod_std3)
            r_R2_std1 = np.asarray(R2_std1) - np.asarray(wls_R2_mod_std1)
            r_R2_std2 = np.asarray(R2_std2) - np.asarray(wls_R2_mod_std2)
            r_R2_std3 = np.asarray(R2_std3) - np.asarray(wls_R2_mod_std3)
            r_R3_std1 = np.asarray(R3_std1) - np.asarray(wls_R3_mod_std1)
            r_R3_std2 = np.asarray(R3_std2) - np.asarray(wls_R3_mod_std2)
            r_R3_std3 = np.asarray(R3_std3) - np.asarray(wls_R3_mod_std3)
        elif Analyses_type_value >= 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 3 and drift_order_conc_value == 4:
            Time2_std1 = np.asarray(Time_std1) ** 2
            Time3_std1 = np.asarray(Time_std1) ** 3
            Time4_std1 = np.asarray(Time_std1) ** 4
            Time2_std2 = np.asarray(Time_std2) ** 2
            Time3_std2 = np.asarray(Time_std2) ** 3
            Time4_std2 = np.asarray(Time_std2) ** 4
            Time2_std3 = np.asarray(Time_std3) ** 2
            Time3_std3 = np.asarray(Time_std3) ** 3
            Time4_std3 = np.asarray(Time_std3) ** 4
            std1 = np.hstack((np.ones((len(Time_std1), 1)), np.zeros((len(Time_std1), 1)), np.zeros((len(Time_std1), 1))))
            std2 = np.hstack((np.zeros((len(Time_std2), 1)), np.ones((len(Time_std2), 1)), np.zeros((len(Time_std2), 1))))
            std3 = np.hstack((np.zeros((len(Time_std3), 1)), np.zeros((len(Time_std3), 1)), np.ones((len(Time_std3), 1))))
            X_std1 = np.hstack((np.asarray(std1).reshape(len(std1),3), np.asarray(Time_std1).reshape(len(Time_std1),1), Time2_std1.reshape(len(Time2_std1),1), Time3_std1.reshape(len(Time3_std1),1), Time4_std1.reshape(len(Time4_std1),1)))
            X_std2 = np.hstack((np.asarray(std2).reshape(len(std2),3), np.asarray(Time_std2).reshape(len(Time_std2),1), Time2_std2.reshape(len(Time2_std2),1), Time3_std2.reshape(len(Time3_std2),1), Time4_std2.reshape(len(Time4_std2),1)))
            X_std3 = np.hstack((np.asarray(std3).reshape(len(std3),3), np.asarray(Time_std3).reshape(len(Time_std3),1), Time2_std3.reshape(len(Time2_std3),1), Time3_std3.reshape(len(Time3_std3),1), Time4_std3.reshape(len(Time4_std3),1)))
            X = np.vstack((X_std1, X_std2, X_std3))
            Y_R0 = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            Y_R1 = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1), np.asarray(R1_std3).reshape(len(R1_std3),1)))
            Y_R2 = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1), np.asarray(R2_std3).reshape(len(R2_std3),1)))
            Y_R3 = np.vstack((np.asarray(R3_std1).reshape(len(R3_std1),1), np.asarray(R3_std2).reshape(len(R3_std2),1), np.asarray(R3_std3).reshape(len(R3_std3),1)))
            w_R0_std1 = 1 / (np.asarray(error0_std1) ** 2)
            w_R0_std2 = 1 / (np.asarray(error0_std2) ** 2)
            w_R0_std3 = 1 / (np.asarray(error0_std3) ** 2)
            w_R1_std1 = 1 / (np.asarray(error1_std1) ** 2)
            w_R1_std2 = 1 / (np.asarray(error1_std2) ** 2)
            w_R1_std3 = 1 / (np.asarray(error1_std3) ** 2)
            w_R2_std1 = 1 / (np.asarray(error2_std1) ** 2)
            w_R2_std2 = 1 / (np.asarray(error2_std2) ** 2)
            w_R2_std3 = 1 / (np.asarray(error2_std3) ** 2)
            w_R3_std1 = 1 / (np.asarray(error3_std1) ** 2)
            w_R3_std2 = 1 / (np.asarray(error3_std2) ** 2)
            w_R3_std3 = 1 / (np.asarray(error3_std3) ** 2)
            w_R0_std = np.vstack((w_R0_std1.reshape(len(w_R0_std1),1), w_R0_std2.reshape(len(w_R0_std2),1), w_R0_std3.reshape(len(w_R0_std3),1)))
            w_R1_std = np.vstack((w_R1_std1.reshape(len(w_R1_std1),1), w_R1_std2.reshape(len(w_R1_std2),1), w_R1_std3.reshape(len(w_R1_std3),1)))
            w_R2_std = np.vstack((w_R2_std1.reshape(len(w_R2_std1),1), w_R2_std2.reshape(len(w_R2_std2),1), w_R2_std3.reshape(len(w_R2_std3),1)))
            w_R3_std = np.vstack((w_R3_std1.reshape(len(w_R3_std1),1), w_R3_std2.reshape(len(w_R3_std2),1), w_R3_std3.reshape(len(w_R3_std3),1)))
            wls_R0_model = WLS(Y_R0, X, weights=w_R0_std)
            wls_R1_model = WLS(Y_R1, X, weights=w_R1_std)
            wls_R2_model = WLS(Y_R2, X, weights=w_R2_std)
            wls_R3_model = WLS(Y_R3, X, weights=w_R3_std)
            results_R0 = wls_R0_model.fit()
            results_R1 = wls_R1_model.fit()
            results_R2 = wls_R2_model.fit()
            results_R3 = wls_R3_model.fit()
            a0 = results_R0.params[0]
            a1 = results_R0.params[1]
            a2 = results_R0.params[2]
            a3 = results_R0.params[3]
            a4 = results_R0.params[4]
            a5 = results_R0.params[5]
            a6 = results_R0.params[6]
            b0 = results_R1.params[0]
            b1 = results_R1.params[1]
            b2 = results_R1.params[2]
            b3 = results_R1.params[3]
            b4 = results_R1.params[4]
            b5 = results_R1.params[5]
            b6 = results_R1.params[6]
            c0 = results_R2.params[0]
            c1 = results_R2.params[1]
            c2 = results_R2.params[2]
            c3 = results_R2.params[3]
            c4 = results_R2.params[4]
            c5 = results_R2.params[5]
            c6 = results_R2.params[6]
            d0 = results_R3.params[0]
            d1 = results_R3.params[1]
            d2 = results_R3.params[2]
            d3 = results_R3.params[3]
            d4 = results_R3.params[4]
            d5 = results_R3.params[5]
            d6 = results_R3.params[6]
            x = np.linspace(0, max(np.asarray(np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1))))), 200)
            fit_R0_std1 = a6 * (x ** 4) + a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a0
            fit_R0_std2 = a6 * (x ** 4) + a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a1
            fit_R0_std3 = a6 * (x ** 4) + a5 * (x ** 3) + a4 * (x ** 2) + a3 * x + a2
            fit_R1_std1 = b6 * (x ** 4) + b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b0
            fit_R1_std2 = b6 * (x ** 4) + b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b1
            fit_R1_std3 = b6 * (x ** 4) + b5 * (x ** 3) + b4 * (x ** 2) + b3 * x + b2
            fit_R2_std1 = c6 * (x ** 4) + c5 * (x ** 3) + c4 * (x ** 2) + c3 * x + c0
            fit_R2_std2 = c6 * (x ** 4) + c5 * (x ** 3) + c4 * (x ** 2) + c3 * x + c1
            fit_R2_std3 = c6 * (x ** 4) + c5 * (x ** 3) + c4 * (x ** 2) + c3 * x + c2
            fit_R3_std1 = d6 * (x ** 4) + d5 * (x ** 3) + d4 * (x ** 2) + d3 * x + d0
            fit_R3_std2 = d6 * (x ** 4) + d5 * (x ** 3) + d4 * (x ** 2) + d3 * x + d1
            fit_R3_std3 = d6 * (x ** 4) + d5 * (x ** 3) + d4 * (x ** 2) + d3 * x + d2
            wls_R0_mod_std1 = a6 * np.asarray(Time4_std1) + a5 * np.asarray(Time3_std1) + a4 * np.asarray(Time2_std1) + a3 * np.asarray(Time_std1) + a0
            wls_R0_mod_std2 = a6 * np.asarray(Time4_std2) + a5 * np.asarray(Time3_std2) + a4 * np.asarray(Time2_std2) + a3 * np.asarray(Time_std2) + a1
            wls_R0_mod_std3 = a6 * np.asarray(Time4_std3) + a5 * np.asarray(Time3_std3) + a4 * np.asarray(Time2_std3) + a3 * np.asarray(Time_std3) + a2
            wls_R1_mod_std1 = b6 * np.asarray(Time4_std1) + b5 * np.asarray(Time3_std1) + b4 * np.asarray(Time2_std1) + b3 * np.asarray(Time_std1) + b0
            wls_R1_mod_std2 = b6 * np.asarray(Time4_std2) + b5 * np.asarray(Time3_std2) + b4 * np.asarray(Time2_std2) + b3 * np.asarray(Time_std2) + b1
            wls_R1_mod_std3 = b6 * np.asarray(Time4_std3) + b5 * np.asarray(Time3_std3) + b4 * np.asarray(Time2_std3) + b3 * np.asarray(Time_std3) + b2
            wls_R2_mod_std1 = c6 * np.asarray(Time4_std1) + c5 * np.asarray(Time3_std1) + c4 * np.asarray(Time2_std1) + c3 * np.asarray(Time_std1) + c0
            wls_R2_mod_std2 = c6 * np.asarray(Time4_std2) + c5 * np.asarray(Time3_std2) + c4 * np.asarray(Time2_std2) + c3 * np.asarray(Time_std2) + c1
            wls_R2_mod_std3 = c6 * np.asarray(Time4_std3) + c5 * np.asarray(Time3_std3) + c4 * np.asarray(Time2_std3) + c3 * np.asarray(Time_std3) + c2
            wls_R3_mod_std1 = d6 * np.asarray(Time4_std1) + d5 * np.asarray(Time3_std1) + d4 * np.asarray(Time2_std1) + d3 * np.asarray(Time_std1) + d0
            wls_R3_mod_std2 = d6 * np.asarray(Time4_std2) + d5 * np.asarray(Time3_std2) + d4 * np.asarray(Time2_std2) + d3 * np.asarray(Time_std2) + d1
            wls_R3_mod_std3 = d6 * np.asarray(Time4_std3) + d5 * np.asarray(Time3_std3) + d4 * np.asarray(Time2_std3) + d3 * np.asarray(Time_std3) + d2
            R0_corr_std1 = R0_std1 - (a6 * np.asarray(Time_std1) ** 4 + a5 * np.asarray(Time_std1) ** 3 + a4 * np.asarray(Time_std1) ** 2 + a3 * np.asarray(Time_std1))
            R1_corr_std1 = R1_std1 - (b6 * np.asarray(Time_std1) ** 4 + b5 * np.asarray(Time_std1) ** 3 + b4 * np.asarray(Time_std1) ** 2 + b3 * np.asarray(Time_std1))
            R2_corr_std1 = R2_std1 - (c6 * np.asarray(Time_std1) ** 4 + c5 * np.asarray(Time_std1) ** 3 + c4 * np.asarray(Time_std1) ** 2 + c3 * np.asarray(Time_std1))
            R3_corr_std1 = R3_std1 - (d6 * np.asarray(Time_std1) ** 4 + d5 * np.asarray(Time_std1) ** 3 + d4 * np.asarray(Time_std1) ** 2 + d3 * np.asarray(Time_std1))
            R0_corr_std2 = R0_std2 - (a6 * np.asarray(Time_std2) ** 4 + a5 * np.asarray(Time_std2) ** 3 + a4 * np.asarray(Time_std2) ** 2 + a3 * np.asarray(Time_std2))
            R1_corr_std2 = R1_std2 - (b6 * np.asarray(Time_std2) ** 4 + b5 * np.asarray(Time_std2) ** 3 + b4 * np.asarray(Time_std2) ** 2 + b3 * np.asarray(Time_std2))
            R2_corr_std2 = R2_std2 - (c6 * np.asarray(Time_std2) ** 4 + c5 * np.asarray(Time_std2) ** 3 + c4 * np.asarray(Time_std2) ** 2 + c3 * np.asarray(Time_std2))
            R3_corr_std2 = R3_std2 - (d6 * np.asarray(Time_std2) ** 4 + d5 * np.asarray(Time_std2) ** 3 + d4 * np.asarray(Time_std2) ** 2 + d3 * np.asarray(Time_std2))
            R0_corr_std3 = R0_std3 - (a6 * np.asarray(Time_std3) ** 4 + a5 * np.asarray(Time_std3) ** 3 + a4 * np.asarray(Time_std3) ** 2 + a3 * np.asarray(Time_std3))
            R1_corr_std3 = R1_std3 - (b6 * np.asarray(Time_std3) ** 4 + b5 * np.asarray(Time_std3) ** 3 + b4 * np.asarray(Time_std3) ** 2 + b3 * np.asarray(Time_std3))
            R2_corr_std3 = R2_std3 - (c6 * np.asarray(Time_std3) ** 4 + c5 * np.asarray(Time_std3) ** 3 + c4 * np.asarray(Time_std3) ** 2 + c3 * np.asarray(Time_std3))
            R3_corr_std3 = R3_std3 - (d6 * np.asarray(Time_std3) ** 4 + d5 * np.asarray(Time_std3) ** 3 + d4 * np.asarray(Time_std3) ** 2 + d3 * np.asarray(Time_std3))
            R0_corr_unk = R0_unk - (a6 * np.asarray(Time_unk) ** 4 + a5 * np.asarray(Time_unk) ** 3 + a4 * np.asarray(Time_unk) ** 2 + a3 * np.asarray(Time_unk))
            R1_corr_unk = R1_unk - (b6 * np.asarray(Time_unk) ** 4 + b5 * np.asarray(Time_unk) ** 3 + b4 * np.asarray(Time_unk) ** 2 + b3 * np.asarray(Time_unk))
            R2_corr_unk = R2_unk - (c6 * np.asarray(Time_unk) ** 4 + c5 * np.asarray(Time_unk) ** 3 + c4 * np.asarray(Time_unk) ** 2 + c3 * np.asarray(Time_unk))
            R3_corr_unk = R3_unk - (d6 * np.asarray(Time_unk) ** 4 + d5 * np.asarray(Time_unk) ** 3 + d4 * np.asarray(Time_unk) ** 2 + d3 * np.asarray(Time_unk))
            r_R0_std1 = np.asarray(R0_std1) - np.asarray(wls_R0_mod_std1)
            r_R0_std2 = np.asarray(R0_std2) - np.asarray(wls_R0_mod_std2)
            r_R0_std3 = np.asarray(R0_std3) - np.asarray(wls_R0_mod_std3)
            r_R1_std1 = np.asarray(R1_std1) - np.asarray(wls_R1_mod_std1)
            r_R1_std2 = np.asarray(R1_std2) - np.asarray(wls_R1_mod_std2)
            r_R1_std3 = np.asarray(R1_std3) - np.asarray(wls_R1_mod_std3)
            r_R2_std1 = np.asarray(R2_std1) - np.asarray(wls_R2_mod_std1)
            r_R2_std2 = np.asarray(R2_std2) - np.asarray(wls_R2_mod_std2)
            r_R2_std3 = np.asarray(R2_std3) - np.asarray(wls_R2_mod_std3)
            r_R3_std1 = np.asarray(R3_std1) - np.asarray(wls_R3_mod_std1)
            r_R3_std2 = np.asarray(R3_std2) - np.asarray(wls_R3_mod_std2)
            r_R3_std3 = np.asarray(R3_std3) - np.asarray(wls_R3_mod_std3)
        self.confint()

    def confint(self):
        global interval_u
        global interval_l
        global interval_u_R0
        global interval_l_R0
        global interval_u_R1
        global interval_l_R1
        global interval_u_R2
        global interval_l_R2
        global interval_u_R3
        global interval_l_R3
        global interval_u_fit
        global interval_l_fit
        global interval_u_fit_std1
        global interval_l_fit_std1
        global interval_u_fit_std2
        global interval_l_fit_std2
        global interval_u_fit_std3
        global interval_l_fit_std3
        global interval_u_fit_R0
        global interval_l_fit_R0
        global interval_u_fit_R1
        global interval_l_fit_R1
        global interval_u_fit_R2
        global interval_l_fit_R2
        global interval_u_fit_R3
        global interval_l_fit_R3
        global interval_R0_u_fit_std1
        global interval_R0_l_fit_std1
        global interval_R0_u_fit_std2
        global interval_R0_l_fit_std2
        global interval_R0_u_fit_std3
        global interval_R0_l_fit_std3
        global interval_R0_u_fit_std1
        global interval_R1_l_fit_std1
        global interval_R1_u_fit_std2
        global interval_R1_l_fit_std2
        global interval_R1_u_fit_std3
        global interval_R1_l_fit_std3
        global interval_R1_u_fit_std1
        global interval_R2_l_fit_std1
        global interval_R2_u_fit_std2
        global interval_R2_l_fit_std2
        global interval_R2_u_fit_std3
        global interval_R2_l_fit_std3
        global interval_R3_u_fit_std1
        global interval_R3_l_fit_std1
        global interval_R3_u_fit_std2
        global interval_R3_l_fit_std2
        global interval_R3_u_fit_std3
        global interval_R3_l_fit_std3
        global interval_u_r
        global interval_l_r
        global interval_u_fit_r
        global interval_l_fit_r
        global interval_u_std1
        global interval_l_std1
        global interval_u_std2
        global interval_l_std2
        global interval_u_std3
        global interval_l_std3
        global interval_R0_u_std1
        global interval_R0_l_std1
        global interval_R0_u_std2
        global interval_R0_l_std2
        global interval_R0_u_std3
        global interval_R0_l_std3
        global interval_R1_u_std1
        global interval_R1_l_std1
        global interval_R1_u_std2
        global interval_R1_l_std2
        global interval_R1_u_std3
        global interval_R1_l_std3
        global interval_R2_u_std1
        global interval_R2_l_std1
        global interval_R2_u_std2
        global interval_R2_l_std2
        global interval_R2_u_std3
        global interval_R2_l_std3
        global interval_R3_u_std1
        global interval_R3_l_std1
        global interval_R3_u_std2
        global interval_R3_l_std2
        global interval_R3_u_std3
        global interval_R3_l_std3
        global Summary
        global predicted
        global covB
        global Summary_R0
        global predicted_R0
        global covB_R0
        global Summary_R1
        global predicted_R1
        global covB_R1
        global Summary_R2
        global predicted_R2
        global covB_R2
        global Summary_R3
        global predicted_R3
        global covB_R3
        global predicted_fit_u
        global predicted_fit_l
        global sigma_fit_unk
        if Analyses_type_value == 1 and nb_std_iso_value == 1:
            alpha = 0.05
            Summary = results.summary()
            predicted = results.predict()
            covB = results.cov_params()
            predvar = results.mse_resid/ np.mean(np.asarray(w_std)) + (X * np.dot(covB, X.T).T).sum(1)
            predstd = np.sqrt(predvar)
            predvar_fit = (X * np.dot(covB, X.T).T).sum(1)
            predstd_fit = np.sqrt(predvar_fit)
            tppf = stats.t.isf(alpha/2., results.df_resid)
            interval_u = predicted + tppf * predstd
            interval_l = predicted - tppf * predstd
            interval_u_fit = tppf * predstd_fit
            interval_l_fit = - tppf * predstd_fit
            if drift_order_iso_value == 1:
                Time_2_std = np.asarray(Time_std)**2
                X_2 = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time_2_std))
                fit_interval_u_fit = WLS(interval_u_fit, X_2)
                fit_interval_l_fit = WLS(interval_l_fit, X_2)
                results_fit_u = fit_interval_u_fit.fit()
                results_fit_l = fit_interval_l_fit.fit()
                predicted_fit_u = results_fit_u.predict()
                predicted_fit_l = results_fit_l.predict()
                a00 = results_fit_u.params[0]
                a11 = results_fit_u.params[1]
                a22 = results_fit_u.params[2]
                sigma_fit_unk = a00 + a11 * np.asarray(Time_unk) + a22 * np.asarray(Time_unk) ** 2
                Summary_fit_u = results_fit_u.summary()
                Summary_fit_l = results_fit_l.summary()
                residuals_fit = interval_u_fit - results_fit_u.predict()
            elif drift_order_iso_value == 2:
                Time_2_std = np.asarray(Time_std)**2
                Time_3_std = np.asarray(Time_std)**3
                Time_4_std = np.asarray(Time_std)**4
                X_2 = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time_2_std, Time_3_std, Time_4_std))
                fit_interval_u_fit = WLS(interval_u_fit, X_2)
                fit_interval_l_fit = WLS(interval_l_fit, X_2)
                results_fit_u = fit_interval_u_fit.fit()
                results_fit_l = fit_interval_l_fit.fit()
                predicted_fit_u = results_fit_u.predict()
                predicted_fit_l = results_fit_l.predict()
                a00 = results_fit_u.params[0]
                a11 = results_fit_u.params[1]
                a22 = results_fit_u.params[2]
                a33 = results_fit_u.params[3]
                a44 = results_fit_u.params[4]
                sigma_fit_unk = a00 + a11 * np.asarray(Time_unk) + a22 * np.asarray(Time_unk) ** 2 + a33 * np.asarray(Time_unk) ** 3 + a44 * np.asarray(Time_unk) ** 4
                Summary_fit_u = results_fit_u.summary()
                Summary_fit_l = results_fit_l.summary()
                residuals_fit = interval_u_fit - results_fit_u.predict()
            elif drift_order_iso_value == 3:
                Time_2_std = np.asarray(Time_std)**2
                Time_3_std = np.asarray(Time_std)**3
                Time_4_std = np.asarray(Time_std)**4
                Time_5_std = np.asarray(Time_std)**5
                Time_6_std = np.asarray(Time_std)**6
                X_2 = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time_2_std, Time_3_std, Time_4_std, Time_5_std, Time_6_std))
                fit_interval_u_fit = WLS(interval_u_fit, X_2)
                fit_interval_l_fit = WLS(interval_l_fit, X_2)
                results_fit_u = fit_interval_u_fit.fit()
                results_fit_l = fit_interval_l_fit.fit()
                predicted_fit_u = results_fit_u.predict()
                predicted_fit_l = results_fit_l.predict()
                a00 = results_fit_u.params[0]
                a11 = results_fit_u.params[1]
                a22 = results_fit_u.params[2]
                a33 = results_fit_u.params[3]
                a44 = results_fit_u.params[4]
                a55 = results_fit_u.params[5]
                a66 = results_fit_u.params[6]
                sigma_fit_unk = a00 + a11 * np.asarray(Time_unk) + a22 * np.asarray(Time_unk) ** 2 + a33 * np.asarray(Time_unk) ** 3 + a44 * np.asarray(Time_unk) ** 4 + a55 * np.asarray(Time_unk) ** 5 + a66 * np.asarray(Time_unk) ** 6
                Summary_fit_u = results_fit_u.summary()
                Summary_fit_l = results_fit_l.summary()
                residuals_fit = interval_u_fit - results_fit_u.predict()
            elif drift_order_iso_value == 4:
                Time_2_std = np.asarray(Time_std)**2
                Time_3_std = np.asarray(Time_std)**3
                Time_4_std = np.asarray(Time_std)**4
                Time_5_std = np.asarray(Time_std)**5
                Time_6_std = np.asarray(Time_std)**6
                Time_7_std = np.asarray(Time_std)**7
                Time_8_std = np.asarray(Time_std)**8
                X_2 = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time_2_std, Time_3_std, Time_4_std, Time_5_std, Time_6_std, Time_7_std, Time_8_std))
                fit_interval_u_fit = WLS(interval_u_fit, X_2)
                fit_interval_l_fit = WLS(interval_l_fit, X_2)
                results_fit_u = fit_interval_u_fit.fit()
                results_fit_l = fit_interval_l_fit.fit()
                predicted_fit_u = results_fit_u.predict()
                predicted_fit_l = results_fit_l.predict()
                a00 = results_fit_u.params[0]
                a11 = results_fit_u.params[1]
                a22 = results_fit_u.params[2]
                a33 = results_fit_u.params[3]
                a44 = results_fit_u.params[4]
                a55 = results_fit_u.params[5]
                a66 = results_fit_u.params[6]
                a77 = results_fit_u.params[7]
                a88 = results_fit_u.params[8]
                sigma_fit_unk = a00 + a11 * np.asarray(Time_unk) + a22 * np.asarray(Time_unk) ** 2 + a33 * np.asarray(Time_unk) ** 3 + a44 * np.asarray(Time_unk) ** 4 + a55 * np.asarray(Time_unk) ** 5 + a66 * np.asarray(Time_unk) ** 6 + a77 * np.asarray(Time_unk) ** 7 + a88 * np.asarray(Time_unk) ** 8
                Summary_fit_u = results_fit_u.summary()
                Summary_fit_l = results_fit_l.summary()
                residuals_fit = interval_u_fit - results_fit_u.predict()
            elif drift_order_iso_value == 5:
                Time_2_std = np.asarray(Time_std)**2
                Time_3_std = np.asarray(Time_std)**3
                Time_4_std = np.asarray(Time_std)**4
                Time_5_std = np.asarray(Time_std)**5
                Time_6_std = np.asarray(Time_std)**6
                Time_7_std = np.asarray(Time_std)**7
                Time_8_std = np.asarray(Time_std)**8
                Time_9_std = np.asarray(Time_std)**9
                Time_10_std = np.asarray(Time_std)**10
                X_2 = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time_2_std, Time_3_std, Time_4_std, Time_5_std, Time_6_std, Time_7_std, Time_8_std, Time_9_std, Time_10_std))
                fit_interval_u_fit = WLS(interval_u_fit, X_2)
                fit_interval_l_fit = WLS(interval_l_fit, X_2)
                results_fit_u = fit_interval_u_fit.fit()
                results_fit_l = fit_interval_l_fit.fit()
                predicted_fit_u = results_fit_u.predict()
                predicted_fit_l = results_fit_l.predict()
                a00 = results_fit_u.params[0]
                a11 = results_fit_u.params[1]
                a22 = results_fit_u.params[2]
                a33 = results_fit_u.params[3]
                a44 = results_fit_u.params[4]
                a55 = results_fit_u.params[5]
                a66 = results_fit_u.params[6]
                a77 = results_fit_u.params[7]
                a88 = results_fit_u.params[8]
                a99 = results_fit_u.params[9]
                a100 = results_fit_u.params[10]
                sigma_fit_unk = a00 + a11 * np.asarray(Time_unk) + a22 * np.asarray(Time_unk) ** 2 + a33 * np.asarray(Time_unk) ** 3 + a44 * np.asarray(Time_unk) ** 4 + a55 * np.asarray(Time_unk) ** 5 + a66 * np.asarray(Time_unk) ** 6 + a77 * np.asarray(Time_unk) ** 7 + a88 * np.asarray(Time_unk) ** 8 + a99 * np.asarray(Time_unk) ** 9 + a100 * np.asarray(Time_unk) ** 10
                Summary_fit_u = results_fit_u.summary()
                Summary_fit_l = results_fit_l.summary()
                residuals_fit = interval_u_fit - results_fit_u.predict()
            elif drift_order_iso_value == 6:
                Time_2_std = np.asarray(Time_std)**2
                Time_3_std = np.asarray(Time_std)**3
                Time_4_std = np.asarray(Time_std)**4
                Time_5_std = np.asarray(Time_std)**5
                Time_6_std = np.asarray(Time_std)**6
                Time_7_std = np.asarray(Time_std)**7
                Time_8_std = np.asarray(Time_std)**8
                Time_9_std = np.asarray(Time_std)**9
                Time_10_std = np.asarray(Time_std)**10
                Time_11_std = np.asarray(Time_std)**11
                Time_12_std = np.asarray(Time_std)**12
                X_2 = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time_2_std, Time_3_std, Time_4_std, Time_5_std, Time_6_std, Time_7_std, Time_8_std, Time_9_std, Time_10_std, Time_11_std, Time_12_std))
                fit_interval_u_fit = WLS(interval_u_fit, X_2)
                fit_interval_l_fit = WLS(interval_l_fit, X_2)
                results_fit_u = fit_interval_u_fit.fit()
                results_fit_l = fit_interval_l_fit.fit()
                predicted_fit_u = results_fit_u.predict()
                predicted_fit_l = results_fit_l.predict()
                a00 = results_fit_u.params[0]
                a11 = results_fit_u.params[1]
                a22 = results_fit_u.params[2]
                a33 = results_fit_u.params[3]
                a44 = results_fit_u.params[4]
                a55 = results_fit_u.params[5]
                a66 = results_fit_u.params[6]
                a77 = results_fit_u.params[7]
                a88 = results_fit_u.params[8]
                a99 = results_fit_u.params[9]
                a100 = results_fit_u.params[10]
                a110 = results_fit_u.params[11]
                a120 = results_fit_u.params[12]
                sigma_fit_unk = a00 + a11 * np.asarray(Time_unk) + a22 * np.asarray(Time_unk) ** 2 + a33 * np.asarray(Time_unk) ** 3 + a44 * np.asarray(Time_unk) ** 4 + a55 * np.asarray(Time_unk) ** 5 + a66 * np.asarray(Time_unk) ** 6 + a77 * np.asarray(Time_unk) ** 7 + a88 * np.asarray(Time_unk) ** 8 + a99 * np.asarray(Time_unk) ** 9 + a100 * np.asarray(Time_unk) ** 10 + a110 * np.asarray(Time_unk) ** 11 + a120 * np.asarray(Time_unk) ** 12
                Summary_fit_u = results_fit_u.summary()
                Summary_fit_l = results_fit_l.summary()
                residuals_fit = interval_u_fit - results_fit_u.predict()
            elif drift_order_iso_value == 7:
                Time_2_std = np.asarray(Time_std)**2
                Time_3_std = np.asarray(Time_std)**3
                Time_4_std = np.asarray(Time_std)**4
                Time_5_std = np.asarray(Time_std)**5
                Time_6_std = np.asarray(Time_std)**6
                Time_7_std = np.asarray(Time_std)**7
                Time_8_std = np.asarray(Time_std)**8
                Time_9_std = np.asarray(Time_std)**9
                Time_10_std = np.asarray(Time_std)**10
                Time_11_std = np.asarray(Time_std)**11
                Time_12_std = np.asarray(Time_std)**12
                Time_12_std = np.asarray(Time_std)**13
                Time_13_std = np.asarray(Time_std)**14
                X_2 = np.column_stack((np.ones((len(Time_std), 1)), Time_std, Time_2_std, Time_3_std, Time_4_std, Time_5_std, Time_6_std, Time_7_std, Time_8_std, Time_9_std, Time_10_std, Time_11_std, Time_12_std, Time_13_std, Time_14_std))
                fit_interval_u_fit = WLS(interval_u_fit, X_2)
                fit_interval_l_fit = WLS(interval_l_fit, X_2)
                results_fit_u = fit_interval_u_fit.fit()
                results_fit_l = fit_interval_l_fit.fit()
                predicted_fit_u = results_fit_u.predict()
                predicted_fit_l = results_fit_l.predict()
                a00 = results_fit_u.params[0]
                a11 = results_fit_u.params[1]
                a22 = results_fit_u.params[2]
                a33 = results_fit_u.params[3]
                a44 = results_fit_u.params[4]
                a55 = results_fit_u.params[5]
                a66 = results_fit_u.params[6]
                a77 = results_fit_u.params[7]
                a88 = results_fit_u.params[8]
                a99 = results_fit_u.params[9]
                a100 = results_fit_u.params[10]
                a110 = results_fit_u.params[11]
                a120 = results_fit_u.params[12]
                a130 = results_fit_u.params[13]
                a140 = results_fit_u.params[14]
                sigma_fit_unk = a00 + a11 * np.asarray(Time_unk) + a22 * np.asarray(Time_unk) ** 2 + a33 * np.asarray(Time_unk) ** 3 + a44 * np.asarray(Time_unk) ** 4 + a55 * np.asarray(Time_unk) ** 5 + a66 * np.asarray(Time_unk) ** 6 + a77 * np.asarray(Time_unk) ** 7 + a88 * np.asarray(Time_unk) ** 8 + a99 * np.asarray(Time_unk) ** 9 + a100 * np.asarray(Time_unk) ** 10 + a110 * np.asarray(Time_unk) ** 11 + a120 * np.asarray(Time_unk) ** 12 + a130 * np.asarray(Time_unk) ** 13 + a140 * np.asarray(Time_unk) ** 14
                Summary_fit_u = results_fit_u.summary()
                Summary_fit_l = results_fit_l.summary()
                residuals_fit = interval_u_fit - results_fit_u.predict()
            # predvar_r = (X * np.dot(covB_r, X.T).T).sum(1)
            # predstd_r = np.sqrt(predvar_r)
            # tppf_r = stats.t.isf(alpha/2., results_fit_r.df_resid)
            # interval_u_r = results_fit_r.predict() + tppf_r * predstd_r
            # interval_l_r = results_fit_r.predict() - tppf_r * predstd_r
        elif Analyses_type_value == 1 and nb_std_iso_value == 2:
            alpha = 0.05
            Summary = results.summary()
            predicted = results.predict()
            covB = results.cov_params()
            predvar = results.mse_resid/ np.mean(np.asarray(w_std)) + (X * np.dot(covB, X.T).T).sum(1)
            predstd = np.sqrt(predvar)
            predvar_fit = (X * np.dot(covB, X.T).T).sum(1)
            predstd_fit = np.sqrt(predvar_fit)
            predstd_std1 = predstd[:len(Time_std1)]
            predstd_std2 = predstd[len(Time_std1):]
            predstd_fit_std1 = predstd_fit[:len(Time_std1)]
            predstd_fit_std2 = predstd_fit[len(Time_std1):]
            tppf = stats.t.isf(alpha/2., results.df_resid)
            interval_u_std1 = wls_mod_std1 + tppf * predstd_std1
            interval_l_std1 = wls_mod_std1 - tppf * predstd_std1
            interval_u_std2 = wls_mod_std2 + tppf * predstd_std2
            interval_l_std2 = wls_mod_std2 - tppf * predstd_std2
            interval_u_fit_std1 = wls_mod_std1 + tppf * predstd_fit_std1
            interval_l_fit_std1 = wls_mod_std1 - tppf * predstd_fit_std1
            interval_u_fit_std2 = wls_mod_std2 + tppf * predstd_fit_std2
            interval_l_fit_std2 = wls_mod_std2 - tppf * predstd_fit_std2
        elif Analyses_type_value == 1 and nb_std_iso_value == 3:
            alpha = 0.05
            Summary = results.summary()
            predicted = results.predict()
            covB = results.cov_params()
            # covB_r = results_fit.cov_params()
            predvar = results.mse_resid/ np.mean(np.asarray(w_std)) + (X * np.dot(covB, X.T).T).sum(1)
            predstd = np.sqrt(predvar)
            predvar_fit = (X * np.dot(covB, X.T).T).sum(1)
            predstd_fit = np.sqrt(predvar_fit)
            length_2 = len(Time_std1) + len(Time_std2)
            predstd_std1 = predstd[:len(Time_std1)]
            predstd_std2 = predstd[len(Time_std1):length_2]
            predstd_std3 = predstd[length_2:]
            predstd_fit_std1 = predstd_fit[:len(Time_std1)]
            predstd_fit_std2 = predstd_fit[len(Time_std1):length_2]
            predstd_fit_std3 = predstd_fit[length_2:]
            tppf = stats.t.isf(alpha/2., results.df_resid)
            interval_u_std1 = wls_mod_std1 + tppf * predstd_std1
            interval_l_std1 = wls_mod_std1 - tppf * predstd_std1
            interval_u_std2 = wls_mod_std2 + tppf * predstd_std2
            interval_l_std2 = wls_mod_std2 - tppf * predstd_std2
            interval_u_std3 = wls_mod_std3 + tppf * predstd_std3
            interval_l_std3 = wls_mod_std3 - tppf * predstd_std3
            interval_u_fit_std1 = wls_mod_std1 + tppf * predstd_fit_std1
            interval_l_fit_std1 = wls_mod_std1 - tppf * predstd_fit_std1
            interval_u_fit_std2 = wls_mod_std2 + tppf * predstd_fit_std2
            interval_l_fit_std2 = wls_mod_std2 - tppf * predstd_fit_std2
            interval_u_fit_std3 = wls_mod_std3 + tppf * predstd_fit_std3
            interval_l_fit_std3 = wls_mod_std3 - tppf * predstd_fit_std3
            # predvar_r = (X_new * np.dot(covB_r, X_new.T).T).sum(1)
            # predstd_r = np.sqrt(predvar_r)
            # tppf_r = stats.t.isf(alpha/2., results_fit.df_resid)
            # interval_u_r = tppf * predstd_fit_std2
            # interval_l_r = - tppf * predstd_fit_std2
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1:
            alpha = 0.16
            Summary = results.summary()
            predicted = results.predict()
            covB = results.cov_params()
            predvar = results.mse_resid/ np.mean(np.asarray(w_std)) + (X * np.dot(covB, X.T).T).sum(1)
            predstd = np.sqrt(predvar)
            predvar_fit = (X * np.dot(covB, X.T).T).sum(1)
            predstd_fit = np.sqrt(predvar_fit)
            tppf = stats.t.isf(alpha/2., results.df_resid)
            interval_u = predicted + tppf * predstd
            interval_l = predicted - tppf * predstd
            interval_u_fit = predicted + tppf * predstd_fit
            interval_l_fit = predicted - tppf * predstd_fit
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 2:
            alpha = 0.05
            Summary = results.summary()
            predicted = results.predict()
            covB = results.cov_params()
            predvar = results.mse_resid/ np.mean(np.asarray(w_std)) + (X * np.dot(covB, X.T).T).sum(1)
            predstd = np.sqrt(predvar)
            predvar_fit = (X * np.dot(covB, X.T).T).sum(1)
            predstd_fit = np.sqrt(predvar_fit)
            predstd_std1 = predstd[:len(Time_std1)]
            predstd_std2 = predstd[len(Time_std1):]
            predstd_fit_std1 = predstd_fit[:len(Time_std1)]
            predstd_fit_std2 = predstd_fit[len(Time_std1):]
            tppf = stats.t.isf(alpha/2., results.df_resid)
            interval_R0_u_std1 = wls_R0_mod_std1 + tppf * predstd_std1
            interval_R0_l_std1 = wls_R0_mod_std1 - tppf * predstd_std1
            interval_R0_u_std2 = wls_R0_mod_std2 + tppf * predstd_std2
            interval_R0_l_std2 = wls_R0_mod_std2 - tppf * predstd_std2
            interval_R0_u_fit_std1 = wls_R0_mod_std1 + tppf * predstd_fit_std1
            interval_R0_l_fit_std1 = wls_R0_mod_std1 - tppf * predstd_fit_std1
            interval_R0_u_fit_std2 = wls_R0_mod_std2 + tppf * predstd_fit_std2
            interval_R0_l_fit_std2 = wls_R0_mod_std2 - tppf * predstd_fit_std2
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 3:
            alpha = 0.05
            Summary = results.summary()
            predicted = results.predict()
            covB = results.cov_params()
            predvar = results.mse_resid/ np.mean(np.asarray(w_std)) + (X * np.dot(covB, X.T).T).sum(1)
            predstd = np.sqrt(predvar)
            predvar_fit = (X * np.dot(covB, X.T).T).sum(1)
            predstd_fit = np.sqrt(predvar_fit)
            length_2 = len(Time_std1) + len(Time_std2)
            predstd_std1 = predstd[:len(Time_std1)]
            predstd_std2 = predstd[len(Time_std1):length_2]
            predstd_std3 = predstd[length_2:]
            predstd_fit_std1 = predstd_fit[:len(Time_std1)]
            predstd_fit_std2 = predstd_fit[len(Time_std1):length_2]
            predstd_fit_std3 = predstd_fit[length_2:]
            tppf = stats.t.isf(alpha/2., results.df_resid)
            interval_R0_u_std1 = wls_R0_mod_std1 + tppf * predstd_std1
            interval_R0_l_std1 = wls_R0_mod_std1 - tppf * predstd_std1
            interval_R0_u_std2 = wls_R0_mod_std2 + tppf * predstd_std2
            interval_R0_l_std2 = wls_R0_mod_std2 - tppf * predstd_std2
            interval_R0_u_std3 = wls_R0_mod_std3 + tppf * predstd_std3
            interval_R0_l_std3 = wls_R0_mod_std3 - tppf * predstd_std3
            interval_R0_u_fit_std1 = wls_R0_mod_std1 + tppf * predstd_fit_std1
            interval_R0_l_fit_std1 = wls_R0_mod_std1 - tppf * predstd_fit_std1
            interval_R0_u_fit_std2 = wls_R0_mod_std2 + tppf * predstd_fit_std2
            interval_R0_l_fit_std2 = wls_R0_mod_std2 - tppf * predstd_fit_std2
            interval_R0_u_fit_std3 = wls_R0_mod_std3 + tppf * predstd_fit_std3
            interval_R0_l_fit_std3 = wls_R0_mod_std3 - tppf * predstd_fit_std3
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 1:
            alpha = 0.16
            Summary_R0 = results_R0.summary()
            predicted_R0 = results_R0.predict()
            covB_R0 = results_R0.cov_params()
            predvar_R0 = results_R0.mse_resid/ np.mean(np.asarray(w_R0_std)) + (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_R0 = np.sqrt(predvar_R0)
            predvar_fit_R0 = (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_fit_R0 = np.sqrt(predvar_fit_R0)
            tppf_R0 = stats.t.isf(alpha/2., results_R0.df_resid)
            interval_u_R0 = predicted_R0 + tppf_R0 * predstd_R0
            interval_l_R0 = predicted_R0 - tppf_R0 * predstd_R0
            interval_u_fit_R0 = predicted_R0 + tppf_R0 * predstd_fit_R0
            interval_l_fit_R0 = predicted_R0 - tppf_R0 * predstd_fit_R0
            Summary_R1 = results_R1.summary()
            predicted_R1 = results_R1.predict()
            covB_R1 = results_R1.cov_params()
            predvar_R1 = results_R1.mse_resid/ np.mean(np.asarray(w_R1_std)) + (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_R1 = np.sqrt(predvar_R1)
            predvar_fit_R1 = (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_fit_R1 = np.sqrt(predvar_fit_R1)
            tppf_R1 = stats.t.isf(alpha/2., results_R1.df_resid)
            interval_u_R1 = predicted_R1 + tppf_R1 * predstd_R1
            interval_l_R1 = predicted_R1 - tppf_R1 * predstd_R1
            interval_u_fit_R1 = predicted_R1 + tppf_R1 * predstd_fit_R1
            interval_l_fit_R1 = predicted_R1 - tppf_R1 * predstd_fit_R1
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 2:
            alpha = 0.05
            Summary_R0 = results_R0.summary()
            predicted_R0 = results_R0.predict()
            covB_R0 = results_R0.cov_params()
            predvar_R0 = results_R0.mse_resid/ np.mean(np.asarray(w_R0_std)) + (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_R0 = np.sqrt(predvar_R0)
            predvar_fit_R0 = (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_fit_R0 = np.sqrt(predvar_fit_R0)
            predstd_R0_std1 = predstd_R0[:len(Time_std1)]
            predstd_R0_std2 = predstd_R0[len(Time_std1):]
            predstd_fit_R0_std1 = predstd_fit_R0[:len(Time_std1)]
            predstd_fit_R0_std2 = predstd_fit_R0[len(Time_std1):]
            tppf_R0 = stats.t.isf(alpha/2., results_R0.df_resid)
            interval_R0_u_std1 = wls_R0_mod_std1 + tppf_R0 * predstd_R0_std1
            interval_R0_l_std1 = wls_R0_mod_std1 - tppf_R0 * predstd_R0_std1
            interval_R0_u_std2 = wls_R0_mod_std2 + tppf_R0 * predstd_R0_std2
            interval_R0_l_std2 = wls_R0_mod_std2 - tppf_R0 * predstd_R0_std2
            interval_R0_u_fit_std1 = wls_R0_mod_std1 + tppf_R0 * predstd_fit_R0_std1
            interval_R0_l_fit_std1 = wls_R0_mod_std1 - tppf_R0 * predstd_fit_R0_std1
            interval_R0_u_fit_std2 = wls_R0_mod_std2 + tppf_R0 * predstd_fit_R0_std2
            interval_R0_l_fit_std2 = wls_R0_mod_std2 - tppf_R0 * predstd_fit_R0_std2
            Summary_R1 = results_R1.summary()
            predicted_R1 = results_R1.predict()
            covB_R1 = results_R1.cov_params()
            predvar_R1 = results_R1.mse_resid/ np.mean(np.asarray(w_R1_std)) + (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_R1 = np.sqrt(predvar_R1)
            predvar_fit_R1 = (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_fit_R1 = np.sqrt(predvar_fit_R1)
            predstd_R1_std1 = predstd_R1[:len(Time_std1)]
            predstd_R1_std2 = predstd_R1[len(Time_std1):]
            predstd_fit_R1_std1 = predstd_fit_R1[:len(Time_std1)]
            predstd_fit_R1_std2 = predstd_fit_R1[len(Time_std1):]
            tppf_R1 = stats.t.isf(alpha/2., results_R1.df_resid)
            interval_R1_u_std1 = wls_R1_mod_std1 + tppf_R1 * predstd_R1_std1
            interval_R1_l_std1 = wls_R1_mod_std1 - tppf_R1 * predstd_R1_std1
            interval_R1_u_std2 = wls_R1_mod_std2 + tppf_R1 * predstd_R1_std2
            interval_R1_l_std2 = wls_R1_mod_std2 - tppf_R1 * predstd_R1_std2
            interval_R1_u_fit_std1 = wls_R1_mod_std1 + tppf_R1 * predstd_fit_R1_std1
            interval_R1_l_fit_std1 = wls_R1_mod_std1 - tppf_R1 * predstd_fit_R1_std1
            interval_R1_u_fit_std2 = wls_R1_mod_std2 + tppf_R1 * predstd_fit_R1_std2
            interval_R1_l_fit_std2 = wls_R1_mod_std2 - tppf_R1 * predstd_fit_R1_std2
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 3:
            alpha = 0.05
            Summary_R0 = results_R0.summary()
            predicted_R0 = results_R0.predict()
            covB_R0 = results_R0.cov_params()
            predvar_R0 = results_R0.mse_resid/ np.mean(np.asarray(w_R0_std)) + (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_R0 = np.sqrt(predvar_R0)
            predvar_fit_R0 = (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_fit_R0 = np.sqrt(predvar_fit_R0)
            length_2 = len(Time_std1) + len(Time_std2)
            predstd_R0_std1 = predstd_R0[:len(Time_std1)]
            predstd_R0_std2 = predstd_R0[len(Time_std1):length_2]
            predstd_R0_std3 = predstd_R0[length_2:]
            predstd_fit_R0_std1 = predstd_fit_R0[:len(Time_std1)]
            predstd_fit_R0_std2 = predstd_fit_R0[len(Time_std1):length_2]
            predstd_fit_R0_std3 = predstd_fit_R0[length_2:]
            tppf_R0 = stats.t.isf(alpha/2., results_R0.df_resid)
            interval_R0_u_std1 = wls_R0_mod_std1 + tppf_R0 * predstd_R0_std1
            interval_R0_l_std1 = wls_R0_mod_std1 - tppf_R0 * predstd_R0_std1
            interval_R0_u_std2 = wls_R0_mod_std2 + tppf_R0 * predstd_R0_std2
            interval_R0_l_std2 = wls_R0_mod_std2 - tppf_R0 * predstd_R0_std2
            interval_R0_u_std3 = wls_R0_mod_std3 + tppf_R0 * predstd_R0_std3
            interval_R0_l_std3 = wls_R0_mod_std3 - tppf_R0 * predstd_R0_std3
            interval_R0_u_fit_std1 = wls_R0_mod_std1 + tppf_R0 * predstd_fit_R0_std1
            interval_R0_l_fit_std1 = wls_R0_mod_std1 - tppf_R0 * predstd_fit_R0_std1
            interval_R0_u_fit_std2 = wls_R0_mod_std2 + tppf_R0 * predstd_fit_R0_std2
            interval_R0_l_fit_std2 = wls_R0_mod_std2 - tppf_R0 * predstd_fit_R0_std2
            interval_R0_u_fit_std3 = wls_R0_mod_std3 + tppf_R0 * predstd_fit_R0_std3
            interval_R0_l_fit_std3 = wls_R0_mod_std3 - tppf_R0 * predstd_fit_R0_std3
            Summary_R1 = results_R1.summary()
            predicted_R1 = results_R1.predict()
            covB_R1 = results_R1.cov_params()
            predvar_R1 = results_R1.mse_resid/ np.mean(np.asarray(w_R1_std)) + (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_R1 = np.sqrt(predvar_R1)
            predvar_fit_R1 = (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_fit_R1 = np.sqrt(predvar_fit_R1)
            predstd_R1_std1 = predstd_R1[:len(Time_std1)]
            predstd_R1_std2 = predstd_R1[len(Time_std1):length_2]
            predstd_R1_std3 = predstd_R1[length_2:]
            predstd_fit_R1_std1 = predstd_fit_R1[:len(Time_std1)]
            predstd_fit_R1_std2 = predstd_fit_R1[len(Time_std1):length_2]
            predstd_fit_R1_std3 = predstd_fit_R1[length_2:]
            tppf_R1 = stats.t.isf(alpha/2., results_R1.df_resid)
            interval_R1_u_std1 = wls_R1_mod_std1 + tppf_R1 * predstd_R1_std1
            interval_R1_l_std1 = wls_R1_mod_std1 - tppf_R1 * predstd_R1_std1
            interval_R1_u_std2 = wls_R1_mod_std2 + tppf_R1 * predstd_R1_std2
            interval_R1_l_std2 = wls_R1_mod_std2 - tppf_R1 * predstd_R1_std2
            interval_R1_u_std3 = wls_R1_mod_std3 + tppf_R1 * predstd_R1_std3
            interval_R1_l_std3 = wls_R1_mod_std3 - tppf_R1 * predstd_R1_std3
            interval_R1_u_fit_std1 = wls_R1_mod_std1 + tppf_R1 * predstd_fit_R1_std1
            interval_R1_l_fit_std1 = wls_R1_mod_std1 - tppf_R1 * predstd_fit_R1_std1
            interval_R1_u_fit_std2 = wls_R1_mod_std2 + tppf_R1 * predstd_fit_R1_std2
            interval_R1_l_fit_std2 = wls_R1_mod_std2 - tppf_R1 * predstd_fit_R1_std2
            interval_R1_u_fit_std3 = wls_R1_mod_std3 + tppf_R1 * predstd_fit_R1_std3
            interval_R1_l_fit_std3 = wls_R1_mod_std3 - tppf_R1 * predstd_fit_R1_std3
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 1:
            alpha = 0.16
            Summary_R0 = results_R0.summary()
            predicted_R0 = results_R0.predict()
            covB_R0 = results_R0.cov_params()
            predvar_R0 = results_R0.mse_resid/ np.mean(np.asarray(w_R0_std)) + (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_R0 = np.sqrt(predvar_R0)
            predvar_fit_R0 = (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_fit_R0 = np.sqrt(predvar_fit_R0)
            tppf_R0 = stats.t.isf(alpha/2., results_R0.df_resid)
            interval_u_R0 = predicted_R0 + tppf_R0 * predstd_R0
            interval_l_R0 = predicted_R0 - tppf_R0 * predstd_R0
            interval_u_fit_R0 = predicted_R0 + tppf_R0 * predstd_fit_R0
            interval_l_fit_R0 = predicted_R0 - tppf_R0 * predstd_fit_R0
            Summary_R1 = results_R1.summary()
            predicted_R1 = results_R1.predict()
            covB_R1 = results_R1.cov_params()
            predvar_R1 = results_R1.mse_resid/ np.mean(np.asarray(w_R1_std)) + (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_R1 = np.sqrt(predvar_R1)
            predvar_fit_R1 = (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_fit_R1 = np.sqrt(predvar_fit_R1)
            tppf_R1 = stats.t.isf(alpha/2., results_R1.df_resid)
            interval_u_R1 = predicted_R1 + tppf_R1 * predstd_R1
            interval_l_R1 = predicted_R1 - tppf_R1 * predstd_R1
            interval_u_fit_R1 = predicted_R1 + tppf_R1 * predstd_fit_R1
            interval_l_fit_R1 = predicted_R1 - tppf_R1 * predstd_fit_R1
            Summary_R2 = results_R2.summary()
            predicted_R2 = results_R2.predict()
            covB_R2 = results_R2.cov_params()
            predvar_R2 = results_R2.mse_resid/ np.mean(np.asarray(w_R2_std)) + (X * np.dot(covB_R2, X.T).T).sum(1)
            predstd_R2 = np.sqrt(predvar_R2)
            predvar_fit_R2 = (X * np.dot(covB_R2, X.T).T).sum(1)
            predstd_fit_R2 = np.sqrt(predvar_fit_R2)
            tppf_R2 = stats.t.isf(alpha/2., results_R2.df_resid)
            interval_u_R2 = predicted_R2 + tppf_R2 * predstd_R2
            interval_l_R2 = predicted_R2 - tppf_R2 * predstd_R2
            interval_u_fit_R2 = predicted_R2 + tppf_R2 * predstd_fit_R2
            interval_l_fit_R2 = predicted_R2 - tppf_R2 * predstd_fit_R2
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 2:
            alpha = 0.05
            Summary_R0 = results_R0.summary()
            predicted_R0 = results_R0.predict()
            covB_R0 = results_R0.cov_params()
            predvar_R0 = results_R0.mse_resid/ np.mean(np.asarray(w_R0_std)) + (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_R0 = np.sqrt(predvar_R0)
            predvar_fit_R0 = (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_fit_R0 = np.sqrt(predvar_fit_R0)
            predstd_R0_std1 = predstd_R0[:len(Time_std1)]
            predstd_R0_std2 = predstd_R0[len(Time_std1):]
            predstd_fit_R0_std1 = predstd_fit_R0[:len(Time_std1)]
            predstd_fit_R0_std2 = predstd_fit_R0[len(Time_std1):]
            tppf_R0 = stats.t.isf(alpha/2., results_R0.df_resid)
            interval_R0_u_std1 = wls_R0_mod_std1 + tppf_R0 * predstd_R0_std1
            interval_R0_l_std1 = wls_R0_mod_std1 - tppf_R0 * predstd_R0_std1
            interval_R0_u_std2 = wls_R0_mod_std2 + tppf_R0 * predstd_R0_std2
            interval_R0_l_std2 = wls_R0_mod_std2 - tppf_R0 * predstd_R0_std2
            interval_R0_u_fit_std1 = wls_R0_mod_std1 + tppf_R0 * predstd_fit_R0_std1
            interval_R0_l_fit_std1 = wls_R0_mod_std1 - tppf_R0 * predstd_fit_R0_std1
            interval_R0_u_fit_std2 = wls_R0_mod_std2 + tppf_R0 * predstd_fit_R0_std2
            interval_R0_l_fit_std2 = wls_R0_mod_std2 - tppf_R0 * predstd_fit_R0_std2
            Summary_R1 = results_R1.summary()
            predicted_R1 = results_R1.predict()
            covB_R1 = results_R1.cov_params()
            predvar_R1 = results_R1.mse_resid/ np.mean(np.asarray(w_R1_std)) + (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_R1 = np.sqrt(predvar_R1)
            predvar_fit_R1 = (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_fit_R1 = np.sqrt(predvar_fit_R1)
            predstd_R1_std1 = predstd_R1[:len(Time_std1)]
            predstd_R1_std2 = predstd_R1[len(Time_std1):]
            predstd_fit_R1_std1 = predstd_fit_R1[:len(Time_std1)]
            predstd_fit_R1_std2 = predstd_fit_R1[len(Time_std1):]
            tppf_R1 = stats.t.isf(alpha/2., results_R1.df_resid)
            interval_R1_u_std1 = wls_R1_mod_std1 + tppf_R1 * predstd_R1_std1
            interval_R1_l_std1 = wls_R1_mod_std1 - tppf_R1 * predstd_R1_std1
            interval_R1_u_std2 = wls_R1_mod_std2 + tppf_R1 * predstd_R1_std2
            interval_R1_l_std2 = wls_R1_mod_std2 - tppf_R1 * predstd_R1_std2
            interval_R1_u_fit_std1 = wls_R1_mod_std1 + tppf_R1 * predstd_fit_R1_std1
            interval_R1_l_fit_std1 = wls_R1_mod_std1 - tppf_R1 * predstd_fit_R1_std1
            interval_R1_u_fit_std2 = wls_R1_mod_std2 + tppf_R1 * predstd_fit_R1_std2
            interval_R1_l_fit_std2 = wls_R1_mod_std2 - tppf_R1 * predstd_fit_R1_std2
            Summary_R2 = results_R2.summary()
            predicted_R2 = results_R2.predict()
            covB_R2 = results_R2.cov_params()
            predvar_R2 = results_R2.mse_resid/ np.mean(np.asarray(w_R2_std)) + (X * np.dot(covB_R2, X.T).T).sum(1)
            predstd_R2 = np.sqrt(predvar_R2)
            predvar_fit_R2 = (X * np.dot(covB_R2, X.T).T).sum(1)
            predstd_fit_R2 = np.sqrt(predvar_fit_R2)
            predstd_R2_std1 = predstd_R2[:len(Time_std1)]
            predstd_R2_std2 = predstd_R2[len(Time_std1):]
            predstd_fit_R2_std1 = predstd_fit_R2[:len(Time_std1)]
            predstd_fit_R2_std2 = predstd_fit_R2[len(Time_std1):]
            tppf_R2 = stats.t.isf(alpha/2., results_R2.df_resid)
            interval_R2_u_std1 = wls_R2_mod_std1 + tppf_R2 * predstd_R2_std1
            interval_R2_l_std1 = wls_R2_mod_std1 - tppf_R2 * predstd_R2_std1
            interval_R2_u_std2 = wls_R2_mod_std2 + tppf_R2 * predstd_R2_std2
            interval_R2_l_std2 = wls_R2_mod_std2 - tppf_R2 * predstd_R2_std2
            interval_R2_u_fit_std1 = wls_R2_mod_std1 + tppf_R2 * predstd_fit_R2_std1
            interval_R2_l_fit_std1 = wls_R2_mod_std1 - tppf_R2 * predstd_fit_R2_std1
            interval_R2_u_fit_std2 = wls_R2_mod_std2 + tppf_R2 * predstd_fit_R2_std2
            interval_R2_l_fit_std2 = wls_R2_mod_std2 - tppf_R2 * predstd_fit_R2_std2
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 3:
            alpha = 0.05
            Summary_R0 = results_R0.summary()
            predicted_R0 = results_R0.predict()
            covB_R0 = results_R0.cov_params()
            predvar_R0 = results_R0.mse_resid/ np.mean(np.asarray(w_R0_std)) + (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_R0 = np.sqrt(predvar_R0)
            predvar_fit_R0 = (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_fit_R0 = np.sqrt(predvar_fit_R0)
            length_2 = len(Time_std1) + len(Time_std2)
            predstd_R0_std1 = predstd_R0[:len(Time_std1)]
            predstd_R0_std2 = predstd_R0[len(Time_std1):length_2]
            predstd_R0_std3 = predstd_R0[length_2:]
            predstd_fit_R0_std1 = predstd_fit_R0[:len(Time_std1)]
            predstd_fit_R0_std2 = predstd_fit_R0[len(Time_std1):length_2]
            predstd_fit_R0_std3 = predstd_fit_R0[length_2:]
            tppf_R0 = stats.t.isf(alpha/2., results_R0.df_resid)
            interval_R0_u_std1 = wls_R0_mod_std1 + tppf_R0 * predstd_R0_std1
            interval_R0_l_std1 = wls_R0_mod_std1 - tppf_R0 * predstd_R0_std1
            interval_R0_u_std2 = wls_R0_mod_std2 + tppf_R0 * predstd_R0_std2
            interval_R0_l_std2 = wls_R0_mod_std2 - tppf_R0 * predstd_R0_std2
            interval_R0_u_std3 = wls_R0_mod_std3 + tppf_R0 * predstd_R0_std3
            interval_R0_l_std3 = wls_R0_mod_std3 - tppf_R0 * predstd_R0_std3
            interval_R0_u_fit_std1 = wls_R0_mod_std1 + tppf_R0 * predstd_fit_R0_std1
            interval_R0_l_fit_std1 = wls_R0_mod_std1 - tppf_R0 * predstd_fit_R0_std1
            interval_R0_u_fit_std2 = wls_R0_mod_std2 + tppf_R0 * predstd_fit_R0_std2
            interval_R0_l_fit_std2 = wls_R0_mod_std2 - tppf_R0 * predstd_fit_R0_std2
            interval_R0_u_fit_std3 = wls_R0_mod_std3 + tppf_R0 * predstd_fit_R0_std3
            interval_R0_l_fit_std3 = wls_R0_mod_std3 - tppf_R0 * predstd_fit_R0_std3
            Summary_R1 = results_R1.summary()
            predicted_R1 = results_R1.predict()
            covB_R1 = results_R1.cov_params()
            predvar_R1 = results_R1.mse_resid/ np.mean(np.asarray(w_R1_std)) + (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_R1 = np.sqrt(predvar_R1)
            predvar_fit_R1 = (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_fit_R1 = np.sqrt(predvar_fit_R1)
            length_2 = len(Time_std1) + len(Time_std2)
            predstd_R1_std1 = predstd_R1[:len(Time_std1)]
            predstd_R1_std2 = predstd_R1[len(Time_std1):length_2]
            predstd_R1_std3 = predstd_R1[length_2:]
            predstd_fit_R1_std1 = predstd_fit_R1[:len(Time_std1)]
            predstd_fit_R1_std2 = predstd_fit_R1[len(Time_std1):length_2]
            predstd_fit_R1_std3 = predstd_fit_R1[length_2:]
            tppf_R1 = stats.t.isf(alpha/2., results_R1.df_resid)
            interval_R1_u_std1 = wls_R1_mod_std1 + tppf_R1 * predstd_R1_std1
            interval_R1_l_std1 = wls_R1_mod_std1 - tppf_R1 * predstd_R1_std1
            interval_R1_u_std2 = wls_R1_mod_std2 + tppf_R1 * predstd_R1_std2
            interval_R1_l_std2 = wls_R1_mod_std2 - tppf_R1 * predstd_R1_std2
            interval_R1_u_std3 = wls_R1_mod_std3 + tppf_R1 * predstd_R1_std3
            interval_R1_l_std3 = wls_R1_mod_std3 - tppf_R1 * predstd_R1_std3
            interval_R1_u_fit_std1 = wls_R1_mod_std1 + tppf_R1 * predstd_fit_R1_std1
            interval_R1_l_fit_std1 = wls_R1_mod_std1 - tppf_R1 * predstd_fit_R1_std1
            interval_R1_u_fit_std2 = wls_R1_mod_std2 + tppf_R1 * predstd_fit_R1_std2
            interval_R1_l_fit_std2 = wls_R1_mod_std2 - tppf_R1 * predstd_fit_R1_std2
            interval_R1_u_fit_std3 = wls_R1_mod_std3 + tppf_R1 * predstd_fit_R1_std3
            interval_R1_l_fit_std3 = wls_R1_mod_std3 - tppf_R1 * predstd_fit_R1_std3
            Summary_R2 = results_R2.summary()
            predicted_R2 = results_R2.predict()
            covB_R2 = results_R2.cov_params()
            predvar_R2 = results_R2.mse_resid/ np.mean(np.asarray(w_R2_std)) + (X * np.dot(covB_R2, X.T).T).sum(1)
            predstd_R2 = np.sqrt(predvar_R2)
            predvar_fit_R2 = (X * np.dot(covB_R2, X.T).T).sum(1)
            predstd_fit_R2 = np.sqrt(predvar_fit_R2)
            length_2 = len(Time_std1) + len(Time_std2)
            predstd_R2_std1 = predstd_R2[:len(Time_std1)]
            predstd_R2_std2 = predstd_R2[len(Time_std1):length_2]
            predstd_R2_std3 = predstd_R2[length_2:]
            predstd_fit_R2_std1 = predstd_fit_R2[:len(Time_std1)]
            predstd_fit_R2_std2 = predstd_fit_R2[len(Time_std1):length_2]
            predstd_fit_R2_std3 = predstd_fit_R2[length_2:]
            tppf_R2 = stats.t.isf(alpha/2., results_R2.df_resid)
            interval_R2_u_std1 = wls_R2_mod_std1 + tppf_R2 * predstd_R2_std1
            interval_R2_l_std1 = wls_R2_mod_std1 - tppf_R2 * predstd_R2_std1
            interval_R2_u_std2 = wls_R2_mod_std2 + tppf_R2 * predstd_R2_std2
            interval_R2_l_std2 = wls_R2_mod_std2 - tppf_R2 * predstd_R2_std2
            interval_R2_u_std3 = wls_R2_mod_std3 + tppf_R2 * predstd_R2_std3
            interval_R2_l_std3 = wls_R2_mod_std3 - tppf_R2 * predstd_R2_std3
            interval_R2_u_fit_R2_std1 = wls_R2_mod_std1 + tppf_R2 * predstd_fit_R2_std1
            interval_R2_l_fit_std1 = wls_R2_mod_std1 - tppf_R2 * predstd_fit_R2_std1
            interval_R2_u_fit_R2_std2 = wls_R2_mod_std2 + tppf_R2 * predstd_fit_R2_std2
            interval_R2_l_fit_std2 = wls_R2_mod_std2 - tppf_R2 * predstd_fit_R2_std2
            interval_R2_u_fit_R2_std3 = wls_R2_mod_std3 + tppf_R2 * predstd_fit_R2_std3
            interval_R2_l_fit_std3 = wls_R2_mod_std3 - tppf_R2 * predstd_fit_R2_std3
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 1:
            alpha = 0.16
            Summary_R0 = results_R0.summary()
            predicted_R0 = results_R0.predict()
            covB_R0 = results_R0.cov_params()
            predvar_R0 = results_R0.mse_resid/ np.mean(np.asarray(w_R0_std)) + (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_R0 = np.sqrt(predvar_R0)
            predvar_fit_R0 = (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_fit_R0 = np.sqrt(predvar_fit_R0)
            tppf_R0 = stats.t.isf(alpha/2., results_R0.df_resid)
            interval_u_R0 = predicted_R0 + tppf_R0 * predstd_R0
            interval_l_R0 = predicted_R0 - tppf_R0 * predstd_R0
            interval_u_fit_R0 = predicted_R0 + tppf_R0 * predstd_fit_R0
            interval_l_fit_R0 = predicted_R0 - tppf_R0 * predstd_fit_R0
            Summary_R1 = results_R1.summary()
            predicted_R1 = results_R1.predict()
            covB_R1 = results_R1.cov_params()
            predvar_R1 = results_R1.mse_resid/ np.mean(np.asarray(w_R1_std)) + (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_R1 = np.sqrt(predvar_R1)
            predvar_fit_R1 = (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_fit_R1 = np.sqrt(predvar_fit_R1)
            tppf_R1 = stats.t.isf(alpha/2., results_R1.df_resid)
            interval_u_R1 = predicted_R1 + tppf_R1 * predstd_R1
            interval_l_R1 = predicted_R1 - tppf_R1 * predstd_R1
            interval_u_fit_R1 = predicted_R1 + tppf_R1 * predstd_fit_R1
            interval_l_fit_R1 = predicted_R1 - tppf_R1 * predstd_fit_R1
            Summary_R2 = results_R2.summary()
            predicted_R2 = results_R2.predict()
            covB_R2 = results_R2.cov_params()
            predvar_R2 = results_R2.mse_resid/ np.mean(np.asarray(w_R2_std)) + (X * np.dot(covB_R2, X.T).T).sum(1)
            predstd_R2 = np.sqrt(predvar_R2)
            predvar_fit_R2 = (X * np.dot(covB_R2, X.T).T).sum(1)
            predstd_fit_R2 = np.sqrt(predvar_fit_R2)
            tppf_R2 = stats.t.isf(alpha/2., results_R2.df_resid)
            interval_u_R2 = predicted_R2 + tppf_R2 * predstd_R2
            interval_l_R2 = predicted_R2 - tppf_R2 * predstd_R2
            interval_u_fit_R2 = predicted_R2 + tppf_R2 * predstd_fit_R2
            interval_l_fit_R2 = predicted_R2 - tppf_R2 * predstd_fit_R2
            Summary_R3 = results_R3.summary()
            predicted_R3 = results_R3.predict()
            covB_R3 = results_R3.cov_params()
            predvar_R3 = results_R3.mse_resid/ np.mean(np.asarray(w_R3_std)) + (X * np.dot(covB_R3, X.T).T).sum(1)
            predstd_R3 = np.sqrt(predvar_R3)
            predvar_fit_R3 = (X * np.dot(covB_R3, X.T).T).sum(1)
            predstd_fit_R3 = np.sqrt(predvar_fit_R3)
            tppf_R3 = stats.t.isf(alpha/2., results_R3.df_resid)
            interval_u_R3 = predicted_R3 + tppf_R3 * predstd_R3
            interval_l_R3 = predicted_R3 - tppf_R3 * predstd_R3
            interval_u_fit_R3 = predicted_R3 + tppf_R3 * predstd_fit_R3
            interval_l_fit_R3 = predicted_R3 - tppf_R3 * predstd_fit_R3
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 2:
            alpha = 0.05
            Summary_R0 = results_R0.summary()
            predicted_R0 = results_R0.predict()
            covB_R0 = results_R0.cov_params()
            predvar_R0 = results_R0.mse_resid/ np.mean(np.asarray(w_R0_std)) + (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_R0 = np.sqrt(predvar_R0)
            predvar_fit_R0 = (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_fit_R0 = np.sqrt(predvar_fit_R0)
            predstd_R0_std1 = predstd_R0[:len(Time_std1)]
            predstd_R0_std2 = predstd_R0[len(Time_std1):]
            predstd_fit_R0_std1 = predstd_fit_R0[:len(Time_std1)]
            predstd_fit_R0_std2 = predstd_fit_R0[len(Time_std1):]
            tppf_R0 = stats.t.isf(alpha/2., results_R0.df_resid)
            interval_R0_u_std1 = wls_R0_mod_std1 + tppf_R0 * predstd_R0_std1
            interval_R0_l_std1 = wls_R0_mod_std1 - tppf_R0 * predstd_R0_std1
            interval_R0_u_std2 = wls_R0_mod_std2 + tppf_R0 * predstd_R0_std2
            interval_R0_l_std2 = wls_R0_mod_std2 - tppf_R0 * predstd_R0_std2
            interval_R0_u_fit_std1 = wls_R0_mod_std1 + tppf_R0 * predstd_fit_R0_std1
            interval_R0_l_fit_std1 = wls_R0_mod_std1 - tppf_R0 * predstd_fit_R0_std1
            interval_R0_u_fit_std2 = wls_R0_mod_std2 + tppf_R0 * predstd_fit_R0_std2
            interval_R0_l_fit_std2 = wls_R0_mod_std2 - tppf_R0 * predstd_fit_R0_std2
            Summary_R1 = results_R1.summary()
            predicted_R1 = results_R1.predict()
            covB_R1 = results_R1.cov_params()
            predvar_R1 = results_R1.mse_resid/ np.mean(np.asarray(w_R1_std)) + (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_R1 = np.sqrt(predvar_R1)
            predvar_fit_R1 = (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_fit_R1 = np.sqrt(predvar_fit_R1)
            predstd_R1_std1 = predstd_R1[:len(Time_std1)]
            predstd_R1_std2 = predstd_R1[len(Time_std1):]
            predstd_fit_R1_std1 = predstd_fit_R1[:len(Time_std1)]
            predstd_fit_R1_std2 = predstd_fit_R1[len(Time_std1):]
            tppf_R1 = stats.t.isf(alpha/2., results_R1.df_resid)
            interval_R1_u_std1 = wls_R1_mod_std1 + tppf_R1 * predstd_R1_std1
            interval_R1_l_std1 = wls_R1_mod_std1 - tppf_R1 * predstd_R1_std1
            interval_R1_u_std2 = wls_R1_mod_std2 + tppf_R1 * predstd_R1_std2
            interval_R1_l_std2 = wls_R1_mod_std2 - tppf_R1 * predstd_R1_std2
            interval_R1_u_fit_std1 = wls_R1_mod_std1 + tppf_R1 * predstd_fit_R1_std1
            interval_R1_l_fit_std1 = wls_R1_mod_std1 - tppf_R1 * predstd_fit_R1_std1
            interval_R1_u_fit_std2 = wls_R1_mod_std2 + tppf_R1 * predstd_fit_R1_std2
            interval_R1_l_fit_std2 = wls_R1_mod_std2 - tppf_R1 * predstd_fit_R1_std2
            Summary_R2 = results_R2.summary()
            predicted_R2 = results_R2.predict()
            covB_R2 = results_R2.cov_params()
            predvar_R2 = results_R2.mse_resid/ np.mean(np.asarray(w_R2_std)) + (X * np.dot(covB_R2, X.T).T).sum(1)
            predstd_R2 = np.sqrt(predvar_R2)
            predvar_fit_R2 = (X * np.dot(covB_R2, X.T).T).sum(1)
            predstd_fit_R2 = np.sqrt(predvar_fit_R2)
            predstd_R2_std1 = predstd_R2[:len(Time_std1)]
            predstd_R2_std2 = predstd_R2[len(Time_std1):]
            predstd_fit_R2_std1 = predstd_fit_R2[:len(Time_std1)]
            predstd_fit_R2_std2 = predstd_fit_R2[len(Time_std1):]
            tppf_R2 = stats.t.isf(alpha/2., results_R2.df_resid)
            interval_R2_u_std1 = wls_R2_mod_std1 + tppf_R2 * predstd_R2_std1
            interval_R2_l_std1 = wls_R2_mod_std1 - tppf_R2 * predstd_R2_std1
            interval_R2_u_std2 = wls_R2_mod_std2 + tppf_R2 * predstd_R2_std2
            interval_R2_l_std2 = wls_R2_mod_std2 - tppf_R2 * predstd_R2_std2
            interval_R2_u_fit_std1 = wls_R2_mod_std1 + tppf_R2 * predstd_fit_R2_std1
            interval_R2_l_fit_std1 = wls_R2_mod_std1 - tppf_R2 * predstd_fit_R2_std1
            interval_R2_u_fit_std2 = wls_R2_mod_std2 + tppf_R2 * predstd_fit_R2_std2
            interval_R2_l_fit_std2 = wls_R2_mod_std2 - tppf_R2 * predstd_fit_R2_std2
            Summary_R3 = results_R3.summary()
            predicted_R3 = results_R3.predict()
            covB_R3 = results_R3.cov_params()
            predvar_R3 = results_R3.mse_resid/ np.mean(np.asarray(w_R3_std)) + (X * np.dot(covB_R3, X.T).T).sum(1)
            predstd_R3 = np.sqrt(predvar_R3)
            predvar_fit_R3 = (X * np.dot(covB_R3, X.T).T).sum(1)
            predstd_fit_R3 = np.sqrt(predvar_fit_R3)
            predstd_R3_std1 = predstd_R3[:len(Time_std1)]
            predstd_R3_std2 = predstd_R3[len(Time_std1):]
            predstd_fit_R3_std1 = predstd_fit_R3[:len(Time_std1)]
            predstd_fit_R3_std2 = predstd_fit_R3[len(Time_std1):]
            tppf_R3 = stats.t.isf(alpha/2., results_R3.df_resid)
            interval_R3_u_std1 = wls_R3_mod_std1 + tppf_R3 * predstd_R3_std1
            interval_R3_l_std1 = wls_R3_mod_std1 - tppf_R3 * predstd_R3_std1
            interval_R3_u_std2 = wls_R3_mod_std2 + tppf_R3 * predstd_R3_std2
            interval_R3_l_std2 = wls_R3_mod_std2 - tppf_R3 * predstd_R3_std2
            interval_R3_u_fit_std1 = wls_R3_mod_std1 + tppf_R3 * predstd_fit_R3_std1
            interval_R3_l_fit_std1 = wls_R3_mod_std1 - tppf_R3 * predstd_fit_R3_std1
            interval_R3_u_fit_std2 = wls_R3_mod_std2 + tppf_R3 * predstd_fit_R3_std2
            interval_R3_l_fit_std2 = wls_R3_mod_std2 - tppf_R3 * predstd_fit_R3_std2
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 3:
            alpha = 0.05
            Summary_R0 = results_R0.summary()
            predicted_R0 = results_R0.predict()
            covB_R0 = results_R0.cov_params()
            predvar_R0 = results_R0.mse_resid/ np.mean(np.asarray(w_R0_std)) + (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_R0 = np.sqrt(predvar_R0)
            predvar_fit_R0 = (X * np.dot(covB_R0, X.T).T).sum(1)
            predstd_fit_R0 = np.sqrt(predvar_fit_R0)
            length_2 = len(Time_std1) + len(Time_std2)
            predstd_R0_std1 = predstd_R0[:len(Time_std1)]
            predstd_R0_std2 = predstd_R0[len(Time_std1):length_2]
            predstd_R0_std3 = predstd_R0[length_2:]
            predstd_fit_R0_std1 = predstd_fit_R0[:len(Time_std1)]
            predstd_fit_R0_std2 = predstd_fit_R0[len(Time_std1):length_2]
            predstd_fit_R0_std3 = predstd_fit_R0[length_2:]
            tppf_R0 = stats.t.isf(alpha/2., results_R0.df_resid)
            interval_R0_u_std1 = wls_R0_mod_std1 + tppf_R0 * predstd_R0_std1
            interval_R0_l_std1 = wls_R0_mod_std1 - tppf_R0 * predstd_R0_std1
            interval_R0_u_std2 = wls_R0_mod_std2 + tppf_R0 * predstd_R0_std2
            interval_R0_l_std2 = wls_R0_mod_std2 - tppf_R0 * predstd_R0_std2
            interval_R0_u_std3 = wls_R0_mod_std3 + tppf_R0 * predstd_R0_std3
            interval_R0_l_std3 = wls_R0_mod_std3 - tppf_R0 * predstd_R0_std3
            interval_R0_u_fit_std1 = wls_R0_mod_std1 + tppf_R0 * predstd_fit_R0_std1
            interval_R0_l_fit_std1 = wls_R0_mod_std1 - tppf_R0 * predstd_fit_R0_std1
            interval_R0_u_fit_std2 = wls_R0_mod_std2 + tppf_R0 * predstd_fit_R0_std2
            interval_R0_l_fit_std2 = wls_R0_mod_std2 - tppf_R0 * predstd_fit_R0_std2
            interval_R0_u_fit_std3 = wls_R0_mod_std3 + tppf_R0 * predstd_fit_R0_std3
            interval_R0_l_fit_std3 = wls_R0_mod_std3 - tppf_R0 * predstd_fit_R0_std3
            Summary_R1 = results_R1.summary()
            predicted_R1 = results_R1.predict()
            covB_R1 = results_R1.cov_params()
            predvar_R1 = results_R1.mse_resid/ np.mean(np.asarray(w_R1_std)) + (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_R1 = np.sqrt(predvar_R1)
            predvar_fit_R1 = (X * np.dot(covB_R1, X.T).T).sum(1)
            predstd_fit_R1 = np.sqrt(predvar_fit_R1)
            length_2 = len(Time_std1) + len(Time_std2)
            predstd_R1_std1 = predstd_R1[:len(Time_std1)]
            predstd_R1_std2 = predstd_R1[len(Time_std1):length_2]
            predstd_R1_std3 = predstd_R1[length_2:]
            predstd_fit_R1_std1 = predstd_fit_R1[:len(Time_std1)]
            predstd_fit_R1_std2 = predstd_fit_R1[len(Time_std1):length_2]
            predstd_fit_R1_std3 = predstd_fit_R1[length_2:]
            tppf_R1 = stats.t.isf(alpha/2., results_R1.df_resid)
            interval_R1_u_std1 = wls_R1_mod_std1 + tppf_R1 * predstd_R1_std1
            interval_R1_l_std1 = wls_R1_mod_std1 - tppf_R1 * predstd_R1_std1
            interval_R1_u_std2 = wls_R1_mod_std2 + tppf_R1 * predstd_R1_std2
            interval_R1_l_std2 = wls_R1_mod_std2 - tppf_R1 * predstd_R1_std2
            interval_R1_u_std3 = wls_R1_mod_std3 + tppf_R1 * predstd_R1_std3
            interval_R1_l_std3 = wls_R1_mod_std3 - tppf_R1 * predstd_R1_std3
            interval_R1_u_fit_std1 = wls_R1_mod_std1 + tppf_R1 * predstd_fit_R1_std1
            interval_R1_l_fit_std1 = wls_R1_mod_std1 - tppf_R1 * predstd_fit_R1_std1
            interval_R1_u_fit_std2 = wls_R1_mod_std2 + tppf_R1 * predstd_fit_R1_std2
            interval_R1_l_fit_std2 = wls_R1_mod_std2 - tppf_R1 * predstd_fit_R1_std2
            interval_R1_u_fit_std3 = wls_R1_mod_std3 + tppf_R1 * predstd_fit_R1_std3
            interval_R1_l_fit_std3 = wls_R1_mod_std3 - tppf_R1 * predstd_fit_R1_std3
            Summary_R2 = results_R2.summary()
            predicted_R2 = results_R2.predict()
            covB_R2 = results_R2.cov_params()
            predvar_R2 = results_R2.mse_resid/ np.mean(np.asarray(w_R2_std)) + (X * np.dot(covB_R2, X.T).T).sum(1)
            predstd_R2 = np.sqrt(predvar_R2)
            predvar_fit_R2 = (X * np.dot(covB_R2, X.T).T).sum(1)
            predstd_fit_R2 = np.sqrt(predvar_fit_R2)
            length_2 = len(Time_std1) + len(Time_std2)
            predstd_R2_std1 = predstd_R2[:len(Time_std1)]
            predstd_R2_std2 = predstd_R2[len(Time_std1):length_2]
            predstd_R2_std3 = predstd_R2[length_2:]
            predstd_fit_R2_std1 = predstd_fit_R2[:len(Time_std1)]
            predstd_fit_R2_std2 = predstd_fit_R2[len(Time_std1):length_2]
            predstd_fit_R2_std3 = predstd_fit_R2[length_2:]
            tppf_R2 = stats.t.isf(alpha/2., results_R2.df_resid)
            interval_R2_u_std1 = wls_R2_mod_std1 + tppf_R2 * predstd_R2_std1
            interval_R2_l_std1 = wls_R2_mod_std1 - tppf_R2 * predstd_R2_std1
            interval_R2_u_std2 = wls_R2_mod_std2 + tppf_R2 * predstd_R2_std2
            interval_R2_l_std2 = wls_R2_mod_std2 - tppf_R2 * predstd_R2_std2
            interval_R2_u_std3 = wls_R2_mod_std3 + tppf_R2 * predstd_R2_std3
            interval_R2_l_std3 = wls_R2_mod_std3 - tppf_R2 * predstd_R2_std3
            interval_R2_u_fit_R2_std1 = wls_R2_mod_std1 + tppf_R2 * predstd_fit_R2_std1
            interval_R2_l_fit_std1 = wls_R2_mod_std1 - tppf_R2 * predstd_fit_R2_std1
            interval_R2_u_fit_R2_std2 = wls_R2_mod_std2 + tppf_R2 * predstd_fit_R2_std2
            interval_R2_l_fit_std2 = wls_R2_mod_std2 - tppf_R2 * predstd_fit_R2_std2
            interval_R2_u_fit_R2_std3 = wls_R2_mod_std3 + tppf_R2 * predstd_fit_R2_std3
            interval_R2_l_fit_std3 = wls_R2_mod_std3 - tppf_R2 * predstd_fit_R2_std3
            Summary_R3 = results_R3.summary()
            predicted_R3 = results_R3.predict()
            covB_R3 = results_R3.cov_params()
            predvar_R3 = results_R3.mse_resid/ np.mean(np.asarray(w_R3_std)) + (X * np.dot(covB_R3, X.T).T).sum(1)
            predstd_R3 = np.sqrt(predvar_R3)
            predvar_fit_R3 = (X * np.dot(covB_R3, X.T).T).sum(1)
            predstd_fit_R3 = np.sqrt(predvar_fit_R3)
            length_2 = len(Time_std1) + len(Time_std2)
            predstd_R3_std1 = predstd_R3[:len(Time_std1)]
            predstd_R3_std2 = predstd_R3[len(Time_std1):length_2]
            predstd_R3_std3 = predstd_R3[length_2:]
            predstd_fit_R3_std1 = predstd_fit_R3[:len(Time_std1)]
            predstd_fit_R3_std2 = predstd_fit_R3[len(Time_std1):length_2]
            predstd_fit_R3_std3 = predstd_fit_R3[length_2:]
            tppf_R3 = stats.t.isf(alpha/2., results_R3.df_resid)
            interval_R3_u_std1 = wls_R3_mod_std1 + tppf_R3 * predstd_R3_std1
            interval_R3_l_std1 = wls_R3_mod_std1 - tppf_R3 * predstd_R3_std1
            interval_R3_u_std2 = wls_R3_mod_std2 + tppf_R3 * predstd_R3_std2
            interval_R3_l_std2 = wls_R3_mod_std2 - tppf_R3 * predstd_R3_std2
            interval_R3_u_std3 = wls_R3_mod_std3 + tppf_R3 * predstd_R3_std3
            interval_R3_l_std3 = wls_R3_mod_std3 - tppf_R3 * predstd_R3_std3
            interval_R3_u_fit_std1 = wls_R3_mod_std1 + tppf_R3 * predstd_fit_R3_std1
            interval_R3_l_fit_std1 = wls_R3_mod_std1 - tppf_R3 * predstd_fit_R3_std1
            interval_R3_u_fit_std2 = wls_R3_mod_std2 + tppf_R3 * predstd_fit_R3_std2
            interval_R3_l_fit_std2 = wls_R3_mod_std2 - tppf_R3 * predstd_fit_R3_std2
            interval_R3_u_fit_std3 = wls_R3_mod_std3 + tppf_R3 * predstd_fit_R3_std3
            interval_R3_l_fit_std3 = wls_R3_mod_std3 - tppf_R3 * predstd_fit_R3_std3
        self.stats_data()


    def stats_data(self):
        global df_std
        global df_std1
        global df_std2
        global df_std3
        global df_tot_std
        global m_delta_std
        global m_delta_std1
        global m_delta_std2
        global m_delta_std3
        global m_R0_std
        global m_R0_std1
        global m_R0_std2
        global m_R0_std3
        global m_R1_std
        global m_R1_std1
        global m_R1_std2
        global m_R1_std3
        global m_R2_std
        global m_R2_std1
        global m_R2_std2
        global m_R2_std3
        global m_R3_std
        global m_R3_std1
        global m_R3_std2
        global m_R3_std3
        global sd_std_SIMS
        global se_std_SIMS
        global sd_std1_SIMS
        global se_std1_SIMS
        global sd_std2_SIMS
        global se_std2_SIMS
        global sd_std3_SIMS
        global se_std3_SIMS
        global sd1_std_SIMS
        global se1_std_SIMS
        global sd1_std1_SIMS
        global se1_std1_SIMS
        global sd1_std2_SIMS
        global se1_std2_SIMS
        global sd1_std3_SIMS
        global se1_std3_SIMS
        global sd2_std_SIMS
        global se2_std_SIMS
        global sd2_std1_SIMS
        global se2_std1_SIMS
        global sd2_std2_SIMS
        global se2_std2_SIMS
        global sd2_std3_SIMS
        global se2_std3_SIMS
        global sd3_std_SIMS
        global se3_std_SIMS
        global sd3_std1_SIMS
        global se3_std1_SIMS
        global sd3_std2_SIMS
        global se3_std2_SIMS
        global sd3_std3_SIMS
        global se3_std3_SIMS
        global res_std
        global res_std1
        global res_std2
        global res_std3
        global res_R0_std
        global res_R0_std1
        global res_R0_std2
        global res_R0_std3
        global res_R1_std
        global res_R1_std1
        global res_R1_std2
        global res_R1_std3
        global res_R2_std
        global res_R2_std1
        global res_R2_std2
        global res_R2_std3
        global res_R3_std
        global res_R3_std1
        global res_R3_std2
        global res_R3_std3
        global r_tot_std
        global r_tot_R0_std
        global r_tot_R1_std
        global r_tot_R2_std
        global r_tot_R3_std
        global chi2_std
        global chi2_std1
        global chi2_std2
        global chi2_std3
        global chi2_R0_std
        global chi2_R0_std1
        global chi2_R0_std2
        global chi2_R0_std3
        global chi2_R1_std
        global chi2_R1_std1
        global chi2_R1_std2
        global chi2_R1_std3
        global chi2_R2_std
        global chi2_R2_std1
        global chi2_R2_std2
        global chi2_R2_std3
        global chi2_R3_std
        global chi2_R3_std1
        global chi2_R3_std2
        global chi2_R3_std3
        global MSWD
        global MSWD_tot
        global MSWD_std1
        global MSWD_std2
        global MSWD_std3
        global MSWD_R0
        global MSWD_R0_tot
        global MSWD_R0_std1
        global MSWD_R0_std2
        global MSWD_R0_std3
        global MSWD_R1
        global MSWD_R1_tot
        global MSWD_R1_std1
        global MSWD_R1_std2
        global MSWD_R1_std3
        global MSWD_R2
        global MSWD_R2_tot
        global MSWD_R2_std1
        global MSWD_R2_std2
        global MSWD_R2_std3
        global MSWD_R3
        global MSWD_R3_tot
        global MSWD_R3_std1
        global MSWD_R3_std2
        global MSWD_R3_std3
        global delta_ref_std
        global delta_ref_std1
        global delta_ref_std2
        global delta_ref_std3
        global delta_ref_unk
        global R0_ref_std
        global R0_ref_std1
        global R0_ref_std2
        global R0_ref_std3
        global R0_ref_unk
        global R1_ref_std
        global R1_ref_std1
        global R1_ref_std2
        global R1_ref_std3
        global R1_ref_unk
        global R2_ref_std
        global R2_ref_std1
        global R2_ref_std2
        global R2_ref_std3
        global R2_ref_unk
        global R3_ref_std
        global R3_ref_std1
        global R3_ref_std2
        global R3_ref_std3
        global R3_ref_unk
        global se_ref_unk
        global se0_ref_unk
        global se1_ref_unk
        global se2_ref_unk
        global se3_ref_unk
        global set_text_Stats
        global str_sd_std_SIMS
        global str_se_std_SIMS
        global str_Summary
        global str_MSWD
        global error_corr_unk
        global error_se_unk
        error_se_unk = []
        error_corr_unk = []
        if Analyses_type_value == 1 and nb_std_iso_value == 1 and drift_order_iso_value == 0:
            df_std = len(delta_std) - (1 + drift_order_iso_value)
            m_delta_std = np.mean(np.asarray(delta_std))
            sd_std_SIMS = 2 * np.std(np.asarray(delta_std))
            str_sd_std_SIMS = "%.2f" %(sd_std_SIMS)
            se_std_SIMS = np.asarray(sd_std_SIMS) / (np.sqrt(df_std))
            str_se_std_SIMS = "%.2f" %(se_std_SIMS)
            res_std = np.asarray(delta_std) - m_delta_std
            chi2_std = (np.asarray(res_std) / np.asarray(error0_std)) ** 2
            MSWD = sum(chi2_std) / df_std
            str_MSWD = "%.2f" %(MSWD)
            error_se_unk = np.sqrt(np.asarray(error_unk) ** 2 + se_std_SIMS ** 2)
            # stats = open('stats.txt','w')
            # stats.write('Statistics:\n2SD = ' + str_sd_std_SIMS + '\nMSWD = ' + str_MSWD)
            self.label_stats_iso.setText('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD)
            # set_text_Stats = self.textEdit_Stats.setText('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD)
            if Auto_bias_iso_value == 1:
                m_R_std = ((m_delta_std / 1000) + 1) * Ref_iso
                R_std = ((np.asarray(delta_std) / 1000) + 1) * Ref_iso
                R_unk = ((np.asarray(delta_unk) / 1000) + 1) * Ref_iso
                R_ref_std_iso = ((Ref_std_iso_value / 1000) + 1) * Ref_iso
                Alpha = m_R_std / R_ref_std_iso
                R_ref_std = np.asarray(R_std) / Alpha
                R_ref_unk = np.asarray(R_unk) / Alpha
                delta_ref_std = (np.asarray(R_ref_std) / Ref_iso - 1) * 1000
                delta_ref_unk = (np.asarray(R_ref_unk) / Ref_iso - 1) * 1000
                se_ref_unk = 1000 * np.sqrt((np.asarray(error_unk) / 1000) ** 2 + (np.asarray(se_std_SIMS) / 1000) ** 2 +(np.asarray(Ref_sigma_iso_value) / 1000) ** 2)
        elif Analyses_type_value == 1 and nb_std_iso_value == 1 and drift_order_iso_value >= 1:
            df_std = len(delta_std) - (1 + drift_order_iso_value)
            m_delta_std = np.mean(np.asarray(delta_corr_std))
            sd_std_SIMS = 2 * np.std(np.asarray(delta_corr_std))
            str_sd_std_SIMS = "%.2f" %(sd_std_SIMS)
            se_std_SIMS = np.asarray(sd_std_SIMS)/(np.sqrt(df_std))
            str_se_std_SIMS = "%.2f" %(se_std_SIMS)
            chi2_std = (np.asarray(r_std) / np.asarray(error0_std)) ** 2
            MSWD = sum(chi2_std) / df_std
            error_corr_unk = np.sqrt(np.asarray(error_unk) ** 2 + se_std_SIMS ** 2 + np.asarray(sigma_fit_unk) ** 2)
            str_MSWD = "%.2f" %(MSWD)
            str_Summary = str(Summary)
            # stats = open('stats.txt','w')
            # stats.write('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\n' + str_Summary)
            if drift_order_iso_value == 1:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                self.label_stats_iso.setText('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a1 + ' x + ' + str_a0)
                # set_text_Stats = self.textEdit_Stats.setText('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a1 + ' x + ' + str_a0)
            elif drift_order_iso_value == 2:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                self.label_stats_iso.setText('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a2 + ' x^2 + ' + str_a1 + ' x + ' + str_a0)
                # set_text_Stats = self.textEdit_Stats.setText('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a2 + ' x^2 + ' + str_a1 + ' x + ' + str_a0)
            elif drift_order_iso_value == 3:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                self.label_stats_iso.setText('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a3 + ' x^3 + ' + str_a2 + ' x^2 + ' + str_a1 + ' x + ' + str_a0)
                # set_text_Stats = self.textEdit_Stats.setText('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a3 + ' x^3 + ' + str_a2 + ' x^2 + ' + str_a1 + ' x + ' + str_a0)
            elif drift_order_iso_value == 4:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                self.label_stats_iso.setText('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a4 + ' x^4 + ' + str_a3 + ' x^3 + ' + str_a2 + 'x^2\n + ' + str_a1 + ' x + ' + str_a0)
                # set_text_Stats = self.textEdit_Stats.setText('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a4 + ' x^4 + ' + str_a3 + ' x^3 + ' + str_a2 + 'x^2\n + ' + str_a1 + ' x + ' + str_a0)
            elif drift_order_iso_value == 5:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                str_a5 = "%.5f" %(a5)
                self.label_stats_iso.setText('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a5 + ' x^5 + ' + str_a4 + ' x^4 + ' + str_a3 + ' x^3\n + ' + str_a2 + 'x^2 + ' + str_a1 + ' x + ' + str_a0)
                # set_text_Stats = self.textEdit_Stats.setText('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a5 + ' x^5 + ' + str_a4 + ' x^4 + ' + str_a3 + ' x^3\n + ' + str_a2 + 'x^2 + ' + str_a1 + ' x + ' + str_a0)
            elif drift_order_iso_value == 6:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                str_a5 = "%.5f" %(a5)
                str_a6 = "%.5f" %(a6)
                self.label_stats_iso.setText('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a6 + ' x^6 + ' + str_a5 + ' x^5 + ' + str_a4 + ' x^4\n + ' + str_a3 + ' x^3 + ' + str_a2 + 'x^2 + ' + str_a1 + ' x + ' + str_a0)
                # set_text_Stats = self.textEdit_Stats.setText('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a6 + ' x^6 + ' + str_a5 + ' x^5 + ' + str_a4 + ' x^4\n + ' + str_a3 + ' x^3 + ' + str_a2 + 'x^2 + ' + str_a1 + ' x + ' + str_a0)
            elif drift_order_iso_value == 7:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                str_a5 = "%.5f" %(a5)
                str_a6 = "%.5f" %(a6)
                str_a7 = "%.5f" %(a7)
                self.label_stats_iso.setText('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a7 + ' x^7 + ' + str_a6 + ' x^6 + ' + str_a5 + ' x^5\n + ' + str_a4 + ' x^4 + ' + str_a3 + ' x^3 + ' + str_a2 + 'x^2 + ' + str_a1 + ' x + ' + str_a0)
                # set_text_Stats = self.textEdit_Stats.setText('Statistics:\n\n2SD = ' + str_sd_std_SIMS + ' permil\n2SE = ' + str_se_std_SIMS + ' permil\n\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a7 + ' x^7 + ' + str_a6 + ' x^6 + ' + str_a5 + ' x^5\n + ' + str_a4 + ' x^4 + ' + str_a3 + ' x^3 + ' + str_a2 + 'x^2 + ' + str_a1 + ' x + ' + str_a0)            
            if Auto_bias_iso_value == 1:
                m_R_corr_std = (m_delta_std / 1000 + 1) * Ref_iso
                R_corr_std = (np.asarray(delta_corr_std) / 1000 + 1) * Ref_iso
                R_corr_unk = (np.asarray(delta_corr_unk) / 1000 + 1) * Ref_iso
                R_ref_std_iso = (Ref_std_iso_value / 1000 + 1) * Ref_iso
                Alpha = m_R_corr_std / R_ref_std_iso
                R_ref_std = np.asarray(R_corr_std) / Alpha
                R_ref_unk = np.asarray(R_corr_unk) / Alpha
                delta_ref_std = (np.asarray(R_ref_std) / Ref_iso - 1) * 1000
                delta_ref_unk = (np.asarray(R_ref_unk) / Ref_iso - 1) * 1000
                se_ref_unk = 1000 * np.sqrt((np.asarray(error_unk) / 1000) ** 2 + (np.asarray(se_std_SIMS) / 1000) ** 2 + (np.asarray(sigma_fit_unk/1000)) ** 2 + (np.asarray(Ref_sigma_iso_value) / 1000) ** 2)
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and drift_order_iso_value == 0:
            df_std1 = len(delta_std1) - (1 + drift_order_iso_value)
            m_delta_std1 = np.mean(np.asarray(delta_std1))
            sd_std1_SIMS = 2 * np.std(np.asarray(delta_std1))
            str_sd_std1_SIMS = "%.2f" %(sd_std1_SIMS)
            se_std1_SIMS = np.asarray(sd_std1_SIMS)/(np.sqrt(df_std1))
            str_se_std1_SIMS = "%.2f" %(se_std1_SIMS)
            res_std1 = np.asarray(delta_std1) - m_delta_std1
            df_std2 = len(delta_std2) - (1 + drift_order_iso_value)
            m_delta_std2 = np.mean(np.asarray(delta_std2))
            sd_std2_SIMS = 2 * np.std(np.asarray(delta_std2))
            str_sd_std2_SIMS = "%.2f" %(sd_std2_SIMS)
            se_std2_SIMS = np.asarray(sd_std2_SIMS)/(np.sqrt(df_std2))
            str_se_std2_SIMS = "%.2f" %(se_std2_SIMS)
            res_std2 = np.asarray(delta_std2) - m_delta_std2
            chi2_std1 = (np.asarray(res_std1) / np.asarray(error0_std1)) ** 2
            chi2_std2 = (np.asarray(res_std2) / np.asarray(error0_std2)) ** 2
            MSWD_std1 = sum(chi2_std1) / df_std1
            MSWD_std2 = sum(chi2_std2) / df_std2
            df_tot_std = df_std1 + df_std2
            r_tot_std = np.vstack((np.asarray(res_std1).reshape(len(res_std1),1), np.asarray(res_std2).reshape(len(res_std2),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            chi2_tot_std = (np.asarray(r_tot_std) / np.asarray(error_tot_std)) ** 2
            MSWD_tot = sum(chi2_tot_std) / df_tot_std
            str_MSWD_tot = "%.2f" %(MSWD_tot)
            stats = open('stats.txt','w')
            stats.write('Statistics:\n\n2SD (std1) = ' + str_sd_std1_SIMS + ' permil\n2SE (std1) = ' + str_se_std1_SIMS + ' permil\n\n2SD (std2) = ' + str_sd_std2_SIMS + ' permil\n2SE (std2) = ' + str_se_std2_SIMS + ' permil\n\nMSWD = ' + str_MSWD_tot)
            self.label_stats_iso.setText('Statistics:\n\n2SD (std1) = ' + str_sd_std1_SIMS + ' permil\n2SE (std1) = ' + str_se_std1_SIMS + ' permil\n\n2SD (std2) = ' + str_sd_std2_SIMS + ' permil\n2SE (std2) = ' + str_se_std2_SIMS + ' permil\n\nMSWD = ' + str_MSWD_tot)
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and drift_order_iso_value >= 1:
            df_std1 = len(delta_std1) - (1 + drift_order_iso_value)
            m_delta_std1 = np.mean(np.asarray(delta_std1))
            sd_std1_SIMS = 2 * np.std(np.asarray(delta_std1))
            str_sd_std1_SIMS = "%.2f" %(sd_std1_SIMS)
            se_std1_SIMS = np.asarray(sd_std1_SIMS)/(np.sqrt(df_std1))
            str_se_std1_SIMS = "%.2f" %(se_std1_SIMS)
            df_std2 = len(delta_std2) - (1 + drift_order_iso_value)
            m_delta_std2 = np.mean(np.asarray(delta_std2))
            sd_std2_SIMS = 2 * np.std(np.asarray(delta_std2))
            str_sd_std2_SIMS = "%.2f" %(sd_std2_SIMS)
            se_std2_SIMS = np.asarray(sd_std2_SIMS)/(np.sqrt(df_std2))
            str_se_std2_SIMS = "%.2f" %(se_std2_SIMS)
            chi2_std1 = (np.asarray(r_std1) / np.asarray(error0_std1)) ** 2
            chi2_std2 = (np.asarray(r_std2) / np.asarray(error0_std2)) ** 2
            MSWD_std1 = sum(chi2_std1) / df_std1
            MSWD_std2 = sum(chi2_std2) / df_std2
            df_tot_std = df_std1 + df_std2
            r_tot_std = np.vstack((np.asarray(r_std1).reshape(len(r_std1),1), np.asarray(r_std2).reshape(len(r_std2),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            chi2_tot_std = (np.asarray(r_tot_std) / np.asarray(error_tot_std)) ** 2
            MSWD_tot = sum(chi2_tot_std) / df_tot_std
            str_MSWD_tot = "%.2f" %(MSWD_tot)
            str_Summary = str(Summary)
            stats = open('stats.txt','w')
            stats.write('Statistics:\n\n2SD (std1) = ' + str_sd_std1_SIMS + ' permil\n2SE (std1) = ' + str_se_std1_SIMS + ' permil\n\n2SD (std2) = ' + str_sd_std2_SIMS + ' permil\n2SE (std2) = ' + str_se_std2_SIMS + ' permil\n\nMSWD = ' + str_MSWD_tot + '\n\n' + str_Summary)
            if drift_order_iso_value == 1:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                self.label_stats_iso.setText('Statistics:\n\n2SD (std1) = ' + str_sd_std1_SIMS + ' permil\n2SE (std1) = ' + str_se_std1_SIMS + ' permil\n\n2SD (std2) = ' + str_sd_std2_SIMS + ' permil\n2SE (std2) = ' + str_se_std2_SIMS + ' permil\n\nMSWD = ' + str_MSWD_tot + 
                    '\n\nEquation:\nStandard 1:\ny = ' + str_a2 + ' x + ' + str_a0 + '\n\nStandard 2:\ny = ' + str_a2 + ' x + ' + str_a1)
            elif drift_order_iso_value == 2:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                self.label_stats_iso.setText('Statistics:\n\n2SD (std1) = ' + str_sd_std1_SIMS + ' permil\n2SE (std1) = ' + str_se_std1_SIMS + ' permil\n\n2SD (std2) = ' + str_sd_std2_SIMS + ' permil\n2SE (std2) = ' + str_se_std2_SIMS + ' permil\n\nMSWD = ' + str_MSWD_tot + 
                    '\n\nEquation:\nStandard 1:\ny = ' + str_a3 + ' x^2 + ' + str_a2 + ' x + ' + str_a0 + '\n\nStandard 2:\ny = ' + str_a3 + ' x^2 + ' + str_a2 + ' x + ' + str_a1)
            elif drift_order_iso_value == 3:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                self.label_stats_iso.setText('Statistics:\n\n2SD (std1) = ' + str_sd_std1_SIMS + ' permil\n2SE (std1) = ' + str_se_std1_SIMS + ' permil\n\n2SD (std2) = ' + str_sd_std2_SIMS + ' permil\n2SE (std2) = ' + str_se_std2_SIMS + ' permil\n\nMSWD = ' + str_MSWD_tot + 
                    '\n\nEquation:\nStandard 1:\ny = ' + str_a4 + ' x^3 + ' + str_a3 + ' x^2 + ' + str_a2 + ' x\n  + ' + str_a0 + '\n\nStandard 2:\ny = ' + str_a4 + ' x^3 + ' + str_a3 + ' x^2 + ' + str_a2 + ' x\n + ' + str_a1)
            elif drift_order_iso_value == 4:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.3f" %(a3)
                str_a4 = "%.4f" %(a4)
                str_a5 = "%.5f" %(a5)
                self.label_stats_iso.setText('Statistics:\n\n2SD (std1) = ' + str_sd_std1_SIMS + ' permil\n2SE (std1) = ' + str_se_std1_SIMS + ' permil\n\n2SD (std2) = ' + str_sd_std2_SIMS + ' permil\n2SE (std2) = ' + str_se_std2_SIMS + ' permil\n\nMSWD = ' + str_MSWD_tot + 
                    '\n\nEquation:\nStandard 1:\ny = ' + str_a5 + ' x^4 + ' + str_a4 + ' x^3 + ' + str_a3 + ' x^2\n  + ' + str_a2 + ' x + ' + str_a0 + '\n\nStandard 2:\ny = ' + str_a5 + ' x^4 + ' + str_a4 + ' x^3 + ' + str_a3 + ' x^2\n  + ' + str_a2 + ' x + ' + str_a1)
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and drift_order_iso_value == 0:
            df_std1 = len(delta_std1) - (1 + drift_order_iso_value)
            m_delta_std1 = np.mean(np.asarray(delta_std1))
            sd_std1_SIMS = 2 * np.std(np.asarray(delta_std1))
            str_sd_std1_SIMS = "%.2f" %(sd_std1_SIMS)
            se_std1_SIMS = np.asarray(sd_std1_SIMS)/(np.sqrt(df_std1))
            str_se_std1_SIMS = "%.2f" %(se_std1_SIMS)
            res_std1 = np.asarray(delta_std1) - m_delta_std1
            df_std2 = len(delta_std2) - (1 + drift_order_iso_value)
            m_delta_std2 = np.mean(np.asarray(delta_std2))
            sd_std2_SIMS = 2 * np.std(np.asarray(delta_std2))
            str_sd_std2_SIMS = "%.2f" %(sd_std2_SIMS)
            se_std2_SIMS = np.asarray(sd_std2_SIMS)/(np.sqrt(df_std2))
            str_se_std2_SIMS = "%.2f" %(se_std2_SIMS)
            res_std2 = np.asarray(delta_std2) - m_delta_std2
            df_std3 = len(delta_std3) - (1 + drift_order_iso_value)
            m_delta_std3 = np.mean(np.asarray(delta_std3))
            sd_std3_SIMS = 2 * np.std(np.asarray(delta_std3))
            str_sd_std3_SIMS = "%.2f" %(sd_std3_SIMS)
            se_std3_SIMS = np.asarray(sd_std3_SIMS)/(np.sqrt(df_std3))
            str_se_std3_SIMS = "%.2f" %(se_std3_SIMS)
            res_std3 = np.asarray(delta_std3) - m_delta_std3
            chi2_std1 = (np.asarray(res_std1) / np.asarray(error0_std1)) ** 2
            chi2_std2 = (np.asarray(res_std2) / np.asarray(error0_std2)) ** 2
            chi2_std3 = (np.asarray(res_std3) / np.asarray(error0_std3)) ** 2
            MSWD_std1 = sum(chi2_std1) / df_std1
            MSWD_std2 = sum(chi2_std2) / df_std2
            MSWD_std3 = sum(chi2_std3) / df_std3
            df_tot_std = df_std1 + df_std2 + df_std3
            r_tot_std = np.vstack((np.asarray(res_std1).reshape(len(res_std1),1), np.asarray(res_std2).reshape(len(res_std2),1), np.asarray(res_std3).reshape(len(res_std3),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            chi2_tot_std = (np.asarray(r_tot_std) / np.asarray(error_tot_std)) ** 2
            MSWD_tot = sum(chi2_tot_std) / df_tot_std
            str_MSWD_tot = "%.2f" %(MSWD_tot)
            stats = open('stats.txt','w')
            stats.write('Statistics:\n\n2SD (std1) = ' + str_sd_std1_SIMS + ' permil\n2SE (std1) = ' + str_se_std1_SIMS + ' permil\n\n2SD (std2) = ' + str_sd_std2_SIMS + ' permil\n2SE (std2) = ' + str_se_std2_SIMS + ' permil\n\n2SD (std3) = ' + str_sd_std3_SIMS + ' permil\n2SE (std3) = ' + str_se_std3_SIMS + ' permil\n\nMSWD = ' + str_MSWD_tot)
            self.label_stats_iso.setText('Statistics:\n\n2SD (std1) = ' + str_sd_std1_SIMS + ' permil\n2SE (std1) = ' + str_se_std1_SIMS + ' permil\n\n2SD (std2) = ' + str_sd_std2_SIMS + ' permil\n2SE (std2) = ' + str_se_std2_SIMS + ' permil\n\n2SD (std3) = ' + str_sd_std3_SIMS + ' permil\n2SE (std3) = ' + str_se_std3_SIMS + ' permil\n\nMSWD = ' + str_MSWD_tot)
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and drift_order_iso_value >= 1:
            df_std1 = len(delta_std1) - (1 + drift_order_iso_value)
            m_delta_std1 = np.mean(np.asarray(delta_corr_std1))
            sd_std1_SIMS = 2 * np.std(np.asarray(delta_corr_std1))
            str_sd_std1_SIMS = "%.2f" %(sd_std1_SIMS)
            se_std1_SIMS = np.asarray(sd_std1_SIMS)/(np.sqrt(df_std1))
            str_se_std1_SIMS = "%.2f" %(se_std1_SIMS)
            df_std2 = len(delta_std2) - (1 + drift_order_iso_value)
            m_delta_std2 = np.mean(np.asarray(delta_corr_std2))
            sd_std2_SIMS = 2 * np.std(np.asarray(delta_corr_std2))
            str_sd_std2_SIMS = "%.2f" %(sd_std2_SIMS)
            se_std2_SIMS = np.asarray(sd_std2_SIMS)/(np.sqrt(df_std2))
            str_se_std2_SIMS = "%.2f" %(se_std2_SIMS)
            df_std3 = len(delta_std3) - (1 + drift_order_iso_value)
            m_delta_std2 = np.mean(np.asarray(delta_corr_std3))
            sd_std3_SIMS = 2 * np.std(np.asarray(delta_corr_std3))
            str_sd_std3_SIMS = "%.2f" %(sd_std3_SIMS)
            se_std3_SIMS = np.asarray(sd_std3_SIMS)/(np.sqrt(df_std3))
            str_se_std3_SIMS = "%.2f" %(se_std3_SIMS)
            chi2_std1 = (np.asarray(r_std1) / np.asarray(error0_std1)) ** 2
            chi2_std2 = (np.asarray(r_std2) / np.asarray(error0_std2)) ** 2
            chi2_std3 = (np.asarray(r_std3) / np.asarray(error0_std3)) ** 2
            MSWD_std1 = sum(chi2_std1) / df_std1
            MSWD_std2 = sum(chi2_std2) / df_std2
            MSWD_std3 = sum(chi2_std3) / df_std3
            df_tot_std = df_std1 + df_std2 + df_std3
            r_tot_std = np.vstack((np.asarray(r_std1).reshape(len(r_std1),1), np.asarray(r_std2).reshape(len(r_std2),1), np.asarray(r_std3).reshape(len(r_std3),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            chi2_tot_std = (np.asarray(r_tot_std) / np.asarray(error_tot_std)) ** 2
            MSWD_tot = sum(chi2_tot_std) / df_tot_std
            str_MSWD_tot = "%.2f" %(MSWD_tot)
            str_Summary = str(Summary)
            stats = open('stats.txt','w')
            stats.write('Statistics:\n\n2SD (std1) = ' + str_sd_std1_SIMS + ' permil\n2SE (std1) = ' + str_se_std1_SIMS + ' permil\n\n2SD (std2) = ' + str_sd_std2_SIMS + ' permil\n2SE (std2) = ' + str_se_std2_SIMS + ' permil\n\n2SD (std3) = ' + str_sd_std3_SIMS + ' permil\n2SE (std3) = ' + str_se_std3_SIMS + ' permil\n\nMSWD = ' + str_MSWD_tot + '\n\n' + str_Summary)
            if drift_order_iso_value == 1:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.2f" %(a2)
                str_a3 = "%.3f" %(a3)
                self.label_stats_iso.setText('Statistics:\n\n2SD (std1) = ' + str_sd_std1_SIMS + ' permil\n2SE (std1) = ' + str_se_std1_SIMS + ' permil\n\n2SD (std2) = ' + str_sd_std2_SIMS + ' permil\n2SE (std2) = ' + str_se_std2_SIMS + ' permil\n\n2SD (std3) = ' + str_sd_std3_SIMS + ' permil\n2SE (std3) = ' + str_se_std3_SIMS + ' permil\n\nMSWD = ' + str_MSWD_tot + 
                    '\n\nEquation:\nStandard 1:\ny = ' + str_a3 + ' x + ' + str_a0 + '\n\nStandard 2:\ny = ' + str_a3 + ' x + ' + str_a1 + '\n\nStandard 3:\ny = ' + str_a3 + ' x + ' + str_a2)
            elif drift_order_iso_value == 2:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.2f" %(a2)
                str_a3 = "%.3f" %(a3)
                str_a4 = "%.3f" %(a4)
                self.label_stats_iso.setText('Statistics:\n\n2SD (std1) = ' + str_sd_std1_SIMS + ' permil\n2SE (std1) = ' + str_se_std1_SIMS + ' permil\n\n2SD (std2) = ' + str_sd_std2_SIMS + ' permil\n2SE (std2) = ' + str_se_std2_SIMS + ' permil\n\n2SD (std3) = ' + str_sd_std3_SIMS + ' permil\n2SE (std3) = ' + str_se_std3_SIMS + ' permil\n\nMSWD = ' + str_MSWD_tot + 
                    '\n\nEquation:\nStandard 1:\ny = ' + str_a4 + ' x^2 + ' + str_a3 + ' x + ' + str_a0 + '\n\nStandard 2:\ny = ' + str_a4 + ' x^2 + ' + str_a3 + ' x + ' + str_a1 + '\n\nStandard 3:\ny = ' + str_a4 + ' x^2 + ' + str_a3 + ' x + ' + str_a2)
            elif drift_order_iso_value == 3:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.2f" %(a2)
                str_a3 = "%.3f" %(a3)
                str_a4 = "%.3f" %(a4)
                str_a5 = "%.4f" %(a5)
                self.label_stats_iso.setText('Statistics:\n\n2SD (std1) = ' + str_sd_std1_SIMS + ' permil\n2SE (std1) = ' + str_se_std1_SIMS + ' permil\n\n2SD (std2) = ' + str_sd_std2_SIMS + ' permil\n2SE (std2) = ' + str_se_std2_SIMS + ' permil\n\n2SD (std3) = ' + str_sd_std3_SIMS + ' permil\n2SE (std3) = ' + str_se_std3_SIMS + ' permil\n\nMSWD = ' + str_MSWD_tot + 
                    '\n\nEquation:\nStandard 1:\ny = ' + str_a5 + ' x^3 + ' + str_a4 + ' x^2 + ' + str_a3 + ' x\n  + ' + str_a0 + '\n\nStandard 2:\ny = ' + str_a5 + ' x^3 + ' + str_a4 + ' x^2 + ' + str_a3 + ' x\n + ' + str_a1 + '\n\nStandard 3:\ny = ' + str_a5 + ' x^3 + ' + str_a4 + ' x^2 + ' + str_a3 + ' x\n + ' + str_a2)
            elif drift_order_iso_value == 4:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.2f" %(a2)
                str_a3 = "%.3f" %(a3)
                str_a4 = "%.3f" %(a4)
                str_a5 = "%.4f" %(a5)
                str_a6 = "%.5f" %(a6)
                self.label_stats_iso.setText('Statistics:\n\n2SD (std1) = ' + str_sd_std1_SIMS + ' permil\n2SE (std1) = ' + str_se_std1_SIMS + ' permil\n\n2SD (std2) = ' + str_sd_std2_SIMS + ' permil\n2SE (std2) = ' + str_se_std2_SIMS + ' permil\n\n2SD (std3) = ' + str_sd_std3_SIMS + ' permil\n2SE (std3) = ' + str_se_std3_SIMS + ' permil\n\nMSWD = ' + str_MSWD_tot + 
                    '\n\nEquation:\nStandard 1:\ny = ' + str_a6 + ' x^4 + ' + str_a5 + ' x^3 + ' + str_a4 + ' x^2\n  + ' + str_a3 + ' x + ' + str_a0 + '\n\nStandard 2:\ny = ' + str_a6 + ' x^4 + ' + str_a5 + ' x^3 + ' + str_a4 + ' x^2\n  + ' + str_a3 + ' x + ' + str_a1 + 
                    '\n\nStandard 2:\ny = ' + str_a6 + ' x^4 + ' + str_a5 + ' x^3 + ' + str_a4 + ' x^2\n  + ' + str_a3 + ' x + ' + str_a2)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and drift_order_conc_value == 0:
            df_std = len(R0_std) - (1 + drift_order_conc_value)
            m_R0_std = np.mean(np.asarray(R0_std))
            sd_std_SIMS = np.std(np.asarray(R0_std))
            sd_rel_std_SIMS = sd_std_SIMS / m_R0_std
            str_sd_rel_std_SIMS = "%.2f" %(sd_rel_std_SIMS)
            se_std_SIMS = np.asarray(sd_std_SIMS) / (np.sqrt(df_std))
            res_R0_std = np.asarray(R0_std) - m_R0_std
            chi2_std = (np.asarray(res_R0_std) / np.asarray(error0_std)) ** 2
            MSWD = sum(chi2_std) / df_std
            str_MSWD = "%.2f" %(MSWD)
            stats = open('stats.txt','w')
            stats.write('Statistics:\n1SD = ' + str_sd_rel_std_SIMS + ' %\nMSWD = ' + str_MSWD)
            self.label_stats_conc.setText('Statistics:\n\n1SD = ' + str_sd_rel_std_SIMS + ' %\nMSWD = ' + str_MSWD)
            if Auto_bias_iso_value == 1:
                R0_ref_std = (np.asarray(R0_std) * Ref_std_conc1_value) / m_R0_std
                R0_ref_unk = (np.asarray(R0_unk) * Ref_std_conc1_value) / m_R0_std
                se_ref_unk = np.asarray(R0_ref_unk) * np.sqrt((np.asarray(error_unk) / np.asarray(R0_unk)) ** 2 + (np.asarray(se_std_SIMS) / np.asarray(m_R0_std)) ** 2 + (Ref_sigma_conc1_value / Ref_std_conc1_value) ** 2)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and drift_order_conc_value >= 1:
            df_std = len(R0_corr_std) - (1 + drift_order_conc_value)
            m_R0_std = np.mean(np.asarray(R0_corr_std))
            sd_std_SIMS = np.std(np.asarray(R0_corr_std))
            sd_rel_std_SIMS = sd_std_SIMS / m_R0_std
            str_sd_rel_std_SIMS = "%.2f" %(sd_rel_std_SIMS)
            se_std_SIMS = np.asarray(sd_std_SIMS) / (np.sqrt(df_std))
            str_se_std_SIMS = "%.4f" %(s2_std_SIMS)
            chi2_std = (np.asarray(r_R0_std) / np.asarray(error0_std)) ** 2
            MSWD = sum(chi2_std) / df_std
            str_MSWD = "%.2f" %(MSWD)
            Summary_conc = results.summary()
            str_Summary = str(Summary_conc)
            stats = open('stats.txt','w')
            stats.write('Statistics:\n1SD = ' + str_sd_rel_std_SIMS + ' %\nMSWD = ' + str_MSWD + '\n\n' + str_Summary)
            if drift_order_iso_value == 1:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                self.label_stats_conc.setText('Statistics:\n\n1SD = ' + str_sd_rel_std_SIMS + ' %\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a1 + ' x + ' + str_a0)
            elif drift_order_iso_value == 2:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                self.label_stats_iso.setText('Statistics:\n\n1SD = ' + str_sd_rel_std_SIMS + ' %\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a2 + ' x^2 + ' + str_a1 + ' x + ' + str_a0)
            elif drift_order_iso_value == 3:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                self.label_stats_conc.setText('Statistics:\n\n1SD = ' + str_sd_rel_std_SIMS + ' %\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a3 + ' x^3 + ' + str_a2 + ' x^2 + ' + str_a1 + ' x + ' + str_a0)
            elif drift_order_iso_value == 4:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                self.label_stats_conc.setText('Statistics:\n\n1SD = ' + str_sd_rel_std_SIMS + ' %\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a4 + ' x^4 + ' + str_a3 + ' x^3 + ' + str_a2 + 'x^2\n + ' + str_a1 + ' x + ' + str_a0)
            elif drift_order_iso_value == 5:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                str_a5 = "%.5f" %(a5)
                self.label_stats_conc.setText('Statistics:\n\n1SD = ' + str_sd_rel_std_SIMS + ' %\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a5 + ' x^5 + ' + str_a4 + ' x^4 + ' + str_a3 + ' x^3\n + ' + str_a2 + 'x^2 + ' + str_a1 + ' x + ' + str_a0)
            elif drift_order_iso_value == 6:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                str_a5 = "%.5f" %(a5)
                str_a6 = "%.5f" %(a6)
                self.label_stats_conc.setText('Statistics:\n\n1SD = ' + str_sd_rel_std_SIMS + ' %l\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a6 + ' x^6 + ' + str_a5 + ' x^5 + ' + str_a4 + ' x^4\n + ' + str_a3 + ' x^3 + ' + str_a2 + 'x^2 + ' + str_a1 + ' x + ' + str_a0)
            elif drift_order_iso_value == 7:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                str_a5 = "%.5f" %(a5)
                str_a6 = "%.5f" %(a6)
                str_a7 = "%.5f" %(a7)
                self.label_stats_conc.setText('Statistics:\n\n1SD = ' + str_sd_rel_std_SIMS + ' %\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a7 + ' x^7 + ' + str_a6 + ' x^6 + ' + str_a5 + ' x^5\n + ' + str_a4 + ' x^4 + ' + str_a3 + ' x^3 + ' + str_a2 + 'x^2 + ' + str_a1 + ' x + ' + str_a0)
            if Auto_bias_iso_value == 1:
                R0_ref_std = (np.asarray(R0_corr_std) * Ref_std_conc1_value) / m_R0_std
                R0_ref_unk = (np.asarray(R0_corr_unk) * Ref_std_conc1_value) / m_R0_std
                se_ref_unk = np.asarray(R0_ref_unk) * np.sqrt((np.asarray(error_unk) / np.asarray(R0_corr_unk)) ** 2 + (np.asarray(se_std_SIMS) / np.asarray(m_R0_std)) ** 2 + (Ref_sigma_conc1_value / Ref_std_conc1_value) ** 2)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 2 and drift_order_conc_value == 0:
            df_std1 = len(R0_std1) - (1 + drift_order_conc_value)
            m_R0_std1 = np.mean(np.asarray(R0_std1))
            sd_std1_SIMS = np.std(np.asarray(R0_std1))
            sd_rel_std1_SIMS = sd_std1_SIMS / m_R0_std1
            str_sd_rel_std1_SIMS = "%.1f" %(sd_rel_std1_SIMS)
            se_std1_SIMS = np.asarray(sd_std1_SIMS) / (np.sqrt(df_std1))
            res_R0_std1 = np.asarray(R0_std1) - m_R0_std1
            df_std2 = len(R0_std2) - (1 + drift_order_conc_value)
            m_R0_std2 = np.mean(np.asarray(R0_std2))
            sd_std2_SIMS = np.std(np.asarray(R0_std2))
            sd_rel_std2_SIMS = sd_std2_SIMS / m_R0_std2
            str_sd_rel_std2_SIMS = "%.1f" %(sd_rel_std2_SIMS)
            se_std2_SIMS = np.asarray(sd_std2_SIMS) / (np.sqrt(df_std2))
            res_R0_std2 = np.asarray(R0_std2) - m_R0_std2
            chi2_std1 = (np.asarray(res_R0_std1) / np.asarray(error0_std1)) ** 2
            chi2_std2 = (np.asarray(res_R0_std2) / np.asarray(error0_std2)) ** 2
            MSWD_std1 = sum(chi2_std1) / df_std1
            MSWD_std2 = sum(chi2_std2) / df_std2
            df_tot_std = df_std1 + df_std2
            r_tot_std = np.vstack((np.asarray(res_R0_std1).reshape(len(res_R0_std1),1), np.asarray(res_R0_std2).reshape(len(res_R0_std2),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            chi2_tot_std = (np.asarray(r_tot_std) / np.asarray(error_tot_std)) ** 2
            MSWD_tot = sum(chi2_tot_std) / df_tot_std
            str_MSWD_tot = "%.2f" %(MSWD_tot)
            stats = open('stats.txt','w')
            stats.write('Statistics:\n1SD (std1) = ' + str_sd_rel_std1_SIMS + ' %\n1SD (std2) = ' + str_sd_rel_std2_SIMS + ' %\nMSWD = ' + str_MSWD_tot)
            self.label_stats_conc.setText('Statistics:\n\n1SD (std1) = ' + str_sd_std1_SIMS + ' %\n1SD (std2) = ' + str_sd_std2_SIMS + ' %\nMSWD = ' + str_MSWD_tot)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
            df_std1 = len(R0_corr_std1) - (1 + drift_order_conc_value)
            m_R0_std1 = np.mean(np.asarray(R0_corr_std1))
            sd_std1_SIMS = np.std(np.asarray(R0_corr_std1))
            sd_rel_std1_SIMS = sd_std1_SIMS / m_R0_std1
            str_sd_rel_std1_SIMS = "%.1f" %(sd_rel_std1_SIMS)
            se_std1_SIMS = np.asarray(sd_std1_SIMS) / (np.sqrt(df_std1))
            df_std2 = len(R0_corr_std2) - (1 + drift_order_conc_value)
            m_R0_std2 = np.mean(np.asarray(R0_corr_std2))
            sd_std2_SIMS = np.std(np.asarray(R0_corr_std2))
            sd_rel_std2_SIMS = sd_std2_SIMS / m_R0_std2
            str_sd_rel_std2_SIMS = "%.1f" %(sd_rel_std2_SIMS)
            se_std2_SIMS = np.asarray(sd_std2_SIMS) / (np.sqrt(df_std2))
            chi2_std1 = (np.asarray(r_R0_std1) / np.asarray(error0_std1)) ** 2
            chi2_std2 = (np.asarray(r_R0_std2) / np.asarray(error0_std2)) ** 2
            MSWD_std1 = sum(chi2_std1) / df_std1
            MSWD_std2 = sum(chi2_std2) / df_std2
            df_tot_std = df_std1 + df_std2
            r_tot_std = np.vstack((np.asarray(r_R0_std1).reshape(len(r_R0_std1),1), np.asarray(r_R0_std2).reshape(len(r_R0_std2),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            chi2_tot_std = (np.asarray(r_tot_std) / np.asarray(error_tot_std)) ** 2
            MSWD_tot = sum(chi2_tot_std) / df_tot_std
            str_MSWD_tot = "%.2f" %(MSWD_tot)
            stats = open('stats.txt','w')
            stats.write('Statistics:\n1SD (std1) = ' + str_sd_rel_std1_SIMS + ' %\n1SD (std2) = ' + str_sd_rel_std2_SIMS + ' %\nMSWD = ' + str_MSWD_tot)
            if drift_order_iso_value == 1:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                self.label_stats_iso.setText('Statistics:\n\n1SD = ' + str_sd_rel_std_SIMS + ' %\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a1 + ' x + ' + str_a0)
            elif drift_order_iso_value == 2:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                self.label_stats_iso.setText('Statistics:\n\n1SD = ' + str_sd_rel_std_SIMS + ' %\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a2 + ' x^2 + ' + str_a1 + ' x + ' + str_a0)
            elif drift_order_iso_value == 3:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                self.label_stats_iso.setText('Statistics:\n\n1SD = ' + str_sd_rel_std_SIMS + ' %\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a3 + ' x^3 + ' + str_a2 + ' x^2 + ' + str_a1 + ' x + ' + str_a0)
            elif drift_order_iso_value == 4:
                str_a0 = "%.2f" %(a0)
                str_a1 = "%.2f" %(a1)
                str_a2 = "%.3f" %(a2)
                str_a3 = "%.4f" %(a3)
                str_a4 = "%.4f" %(a4)
                str_a5 = "%.4f" %(a5)
                self.label_stats_iso.setText('Statistics:\n\n1SD = ' + str_sd_rel_std_SIMS + ' %\nMSWD = ' + str_MSWD + '\n\nEquation:\ny = ' + str_a4 + ' x^4 + ' + str_a3 + ' x^3 + ' + str_a2 + 'x^2\n + ' + str_a1 + ' x + ' + str_a0)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 3 and drift_order_conc_value == 0:
            df_std1 = len(R0_std1) - (1 + drift_order_conc_value)
            m_R0_std1 = np.mean(np.asarray(R0_std1))
            sd_std1_SIMS = np.std(np.asarray(R0_std1))
            se_std1_SIMS = np.asarray(sd_std1_SIMS) / (np.sqrt(df_std1))
            res_R0_std1 = np.asarray(R0_std1) - m_R0_std1
            df_std2 = len(R0_std2) - (1 + drift_order_conc_value)
            m_R0_std2 = np.mean(np.asarray(R0_std2))
            sd_std2_SIMS = np.std(np.asarray(R0_std2))
            se_std2_SIMS = np.asarray(sd_std2_SIMS) / (np.sqrt(df_std2))
            res_R0_std2 = np.asarray(R0_std2) - m_R0_std2
            df_std3 = len(R0_std3) - (1 + drift_order_conc_value)
            m_R0_std3 = np.mean(np.asarray(R0_std3))
            sd_std3_SIMS = np.std(np.asarray(R0_std3))
            se_std3_SIMS = np.asarray(sd_std3_SIMS) / (np.sqrt(df_std3))
            res_R0_std3 = np.asarray(R0_std3) - m_R0_std3
            chi2_std1 = (np.asarray(res_R0_std1) / np.asarray(error0_std1)) ** 2
            chi2_std2 = (np.asarray(res_R0_std2) / np.asarray(error0_std2)) ** 2
            chi2_std3 = (np.asarray(res_R0_std3) / np.asarray(error0_std3)) ** 2
            MSWD_std1 = sum(chi2_std1) / df_std1
            MSWD_std2 = sum(chi2_std2) / df_std2
            MSWD_std3 = sum(chi2_std3) / df_std3
            df_tot_std = df_std1 + df_std2 + df_std3
            r_tot_std = np.vstack((np.asarray(res_R0_std1).reshape(len(res_R0_std1),1), np.asarray(res_R0_std2).reshape(len(res_R0_std2),1), np.asarray(res_R0_std3).reshape(len(res_R0_std3),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            chi2_tot_std = (np.asarray(r_tot_std) / np.asarray(error_tot_std)) ** 2
            MSWD_tot = sum(chi2_tot_std) / df_tot_std
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
            df_std1 = len(R0_corr_std1) - (1 + drift_order_conc_value)
            m_R0_std1 = np.mean(np.asarray(R0_corr_std1))
            sd_std1_SIMS = np.std(np.asarray(R0_corr_std1))
            se_std1_SIMS = np.asarray(sd_std1_SIMS) / (np.sqrt(df_std1))
            df_std2 = len(R0_corr_std2) - (1 + drift_order_conc_value)
            m_R0_std2 = np.mean(np.asarray(R0_corr_std2))
            sd_std2_SIMS = np.std(np.asarray(R0_corr_std2))
            se_std2_SIMS = np.asarray(sd_std2_SIMS) / (np.sqrt(df_std2))
            df_std3 = len(R0_corr_std3) - (1 + drift_order_conc_value)
            m_R0_std3 = np.mean(np.asarray(R0_corr_std3))
            sd_std3_SIMS = np.std(np.asarray(R0_corr_std3))
            se_std3_SIMS = np.asarray(sd_std3_SIMS) / (np.sqrt(df_std3))
            chi2_std1 = (np.asarray(r_R0_std1) / np.asarray(error0_std1)) ** 2
            chi2_std2 = (np.asarray(r_R0_std2) / np.asarray(error0_std2)) ** 2
            chi2_std3 = (np.asarray(r_R0_std3) / np.asarray(error0_std3)) ** 2
            MSWD_std1 = sum(chi2_std1) / df_std1
            MSWD_std2 = sum(chi2_std2) / df_std2
            MSWD_std3 = sum(chi2_std3) / df_std3
            df_tot_std = df_std1 + df_std2 + df_std3
            r_tot_std = np.vstack((np.asarray(r_R0_std1).reshape(len(r_R0_std1),1), np.asarray(r_R0_std2).reshape(len(r_R0_std2),1), np.asarray(r_R0_std3).reshape(len(r_R0_std3),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            chi2_tot_std = (np.asarray(r_tot_std) / np.asarray(error_tot_std)) ** 2
            MSWD_tot = sum(chi2_tot_std) / df_tot_std
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 1 and drift_order_conc_value == 0:
            df_std = len(R0_std) - (1 + drift_order_conc_value)
            m_R0_std = np.mean(np.asarray(R0_std))
            sd0_std_SIMS = np.std(np.asarray(R0_std))
            se0_std_SIMS = np.asarray(sd0_std_SIMS) / (np.sqrt(df_std))
            res_R0_std = np.asarray(R0_std) - m_R0_std
            chi2_R0_std = (np.asarray(res_R0_std) / np.asarray(error0_std)) ** 2
            MSWD_R0 = sum(chi2_R0_std) / df_std
            m_R1_std = np.mean(np.asarray(R1_std))
            sd1_std_SIMS = np.std(np.asarray(R1_std))
            se1_std_SIMS = np.asarray(sd1_std_SIMS) / (np.sqrt(df_std))
            res_R1_std = np.asarray(R1_std) - m_R1_std
            chi2_R1_std = (np.asarray(res_R1_std) / np.asarray(error1_std)) ** 2
            MSWD_R1 = sum(chi2_R1_std) / df_std
            if Auto_bias_iso_value == 1:
                R0_ref_std = (np.asarray(R0_std) * Ref_std_conc1_value) / m_R0_std
                R0_ref_unk = (np.asarray(R0_unk) * Ref_std_conc1_value) / m_R0_std
                se0_ref_unk = np.asarray(R0_ref_unk) * np.sqrt((np.asarray(error0_unk) / np.asarray(R0_unk)) ** 2 + (np.asarray(se0_std_SIMS) / np.asarray(m_R0_std)) ** 2 + (Ref_sigma_conc1_value / Ref_std_conc1_value) ** 2)
                R1_ref_std = (np.asarray(R1_std) * Ref_std_conc2_value) / m_R1_std
                R1_ref_unk = (np.asarray(R1_unk) * Ref_std_conc2_value) / m_R1_std
                se1_ref_unk = np.asarray(R1_ref_unk) * np.sqrt((np.asarray(error1_unk) / np.asarray(R1_unk)) ** 2 + (np.asarray(se1_std_SIMS) / np.asarray(m_R1_std)) ** 2 + (Ref_sigma_conc2_value / Ref_std_conc2_value) ** 2)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 1 and drift_order_conc_value >= 1:
            df_std = len(R0_corr_std) - (1 + drift_order_conc_value)
            m_R0_std = np.mean(np.asarray(R0_corr_std))
            sd0_std_SIMS = np.std(np.asarray(R0_corr_std))
            se0_std_SIMS = np.asarray(sd0_std_SIMS) / (np.sqrt(df_std))
            chi2_R0_std = (np.asarray(r_R0_std) / np.asarray(error0_std)) ** 2
            MSWD_R0 = sum(chi2_R0_std) / df_std
            m_R1_std = np.mean(np.asarray(R1_corr_std))
            sd1_std_SIMS = np.std(np.asarray(R1_corr_std))
            se1_std_SIMS = np.asarray(sd1_std_SIMS) / (np.sqrt(df_std))
            chi2_R1_std = (np.asarray(r_R1_std) / np.asarray(error1_std)) ** 2
            MSWD_R1 = sum(chi2_R1_std) / df_std
            if Auto_bias_iso_value == 1:
                R0_ref_std = (np.asarray(R0_corr_std) * Ref_std_conc1_value) / m_R0_std
                R0_ref_unk = (np.asarray(R0_corr_unk) * Ref_std_conc1_value) / m_R0_std
                se0_ref_unk = np.asarray(R0_ref_unk) * np.sqrt((np.asarray(error0_unk) / np.asarray(R0_corr_unk)) ** 2 + (np.asarray(se0_std_SIMS) / np.asarray(m_R0_std)) ** 2 + (Ref_sigma_conc1_value / Ref_std_conc1_value) ** 2)
                R1_ref_std = (np.asarray(R1_corr_std) * Ref_std_conc2_value) / m_R1_std
                R1_ref_unk = (np.asarray(R1_corr_unk) * Ref_std_conc2_value) / m_R1_std
                se1_ref_unk = np.asarray(R1_ref_unk) * np.sqrt((np.asarray(error1_unk) / np.asarray(R1_corr_unk)) ** 2 + (np.asarray(se1_std_SIMS) / np.asarray(m_R1_std)) ** 2 + (Ref_sigma_conc2_value / Ref_std_conc2_value) ** 2)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 2 and drift_order_conc_value == 0:
            df_std1 = len(R0_std1) - (1 + drift_order_conc_value)
            m_R0_std1 = np.mean(np.asarray(R0_std1))
            sd0_std1_SIMS = np.std(np.asarray(R0_std1))
            se0_std1_SIMS = np.asarray(sd0_std1_SIMS) / (np.sqrt(df_std1))
            res_R0_std1 = np.asarray(R0_std1) - m_R0_std1
            df_std2 = len(R0_std2) - (1 + drift_order_conc_value)
            m_R0_std2 = np.mean(np.asarray(R0_std2))
            sd0_std2_SIMS = np.std(np.asarray(R0_std2))
            se0_std2_SIMS = np.asarray(sd0_std2_SIMS) / (np.sqrt(df_std2))
            res_R0_std2 = np.asarray(R0_std2) - m_R0_std2
            m_R1_std1 = np.mean(np.asarray(R1_std1))
            sd1_std1_SIMS = np.std(np.asarray(R1_std1))
            se1_std1_SIMS = np.asarray(sd1_std1_SIMS) / (np.sqrt(df_std1))
            res_R1_std1 = np.asarray(R1_std1) - m_R1_std1
            m_R1_std2 = np.mean(np.asarray(R1_std2))
            sd1_std2_SIMS = np.std(np.asarray(R1_std2))
            se1_std2_SIMS = np.asarray(sd1_std2_SIMS) / (np.sqrt(df_std2))
            res_R1_std2 = np.asarray(R1_std2) - m_R1_std2
            chi2_R0_std1 = (np.asarray(res_R0_std1) / np.asarray(error0_std1)) ** 2
            chi2_R0_std2 = (np.asarray(res_R0_std2) / np.asarray(error0_std2)) ** 2
            chi2_R1_std1 = (np.asarray(res_R1_std1) / np.asarray(error1_std1)) ** 2
            chi2_R1_std2 = (np.asarray(res_R1_std2) / np.asarray(error1_std2)) ** 2
            MSWD_R0_std1 = sum(chi2_R0_std1) / df_std1
            MSWD_R0_std2 = sum(chi2_R0_std2) / df_std2
            MSWD_R1_std1 = sum(chi2_R1_std1) / df_std1
            MSWD_R1_std2 = sum(chi2_R1_std2) / df_std2
            df_tot_std = df_std1 + df_std2
            r_tot_R0_std = np.vstack((np.asarray(res_R0_std1).reshape(len(res_R0_std1),1), np.asarray(res_R0_std2).reshape(len(res_R0_std2),1)))
            error_tot_R0_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            chi2_tot_R0_std = (np.asarray(r_tot_R0_std) / np.asarray(error_tot_R0_std)) ** 2
            MSWD_R0_tot = sum(chi2_tot_R0_std) / df_tot_std
            r_tot_R1_std = np.vstack((np.asarray(res_R1_std1).reshape(len(res_R1_std1),1), np.asarray(res_R1_std2).reshape(len(res_R1_std2),1)))
            error_tot_R1_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1)))
            chi2_tot_R1_std = (np.asarray(r_tot_R1_std) / np.asarray(error_tot_R1_std)) ** 2
            MSWD_R1_tot = sum(chi2_tot_R1_std) / df_tot_std
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
            df_std1 = len(R0_corr_std1) - (1 + drift_order_conc_value)
            m_R0_std1 = np.mean(np.asarray(R0_corr_std1))
            sd0_std1_SIMS = np.std(np.asarray(R0_corr_std1))
            se0_std1_SIMS = np.asarray(sd0_std1_SIMS) / (np.sqrt(df_std1))
            df_std2 = len(R0_std2) - (1 + drift_order_conc_value)
            m_R0_std2 = np.mean(np.asarray(R0_corr_std2))
            sd0_std2_SIMS = np.std(np.asarray(R0_corr_std2))
            se0_std2_SIMS = np.asarray(sd0_std2_SIMS) / (np.sqrt(df_std2))
            m_R1_std1 = np.mean(np.asarray(R1_corr_std1))
            sd1_std1_SIMS = np.std(np.asarray(R1_corr_std1))
            se1_std1_SIMS = np.asarray(sd1_std1_SIMS) / (np.sqrt(df_std1))
            m_R1_std2 = np.mean(np.asarray(R1_corr_std2))
            sd1_std2_SIMS = np.std(np.asarray(R1_corr_std2))
            se1_std2_SIMS = np.asarray(sd1_std2_SIMS) / (np.sqrt(df_std2))
            chi2_R0_std1 = (np.asarray(r_R0_std1) / np.asarray(error0_std1)) ** 2
            chi2_R0_std2 = (np.asarray(r_R0_std2) / np.asarray(error0_std2)) ** 2
            chi2_R1_std1 = (np.asarray(r_R1_std1) / np.asarray(error1_std1)) ** 2
            chi2_R1_std2 = (np.asarray(r_R1_std2) / np.asarray(error1_std2)) ** 2
            MSWD_R0_std1 = sum(chi2_R0_std1) / df_std1
            MSWD_R0_std2 = sum(chi2_R0_std2) / df_std2
            MSWD_R1_std1 = sum(chi2_R1_std1) / df_std1
            MSWD_R1_std2 = sum(chi2_R1_std2) / df_std2
            df_tot_std = df_std1 + df_std2
            r_tot_R0_std = np.vstack((np.asarray(r_R0_std1).reshape(len(r_R0_std1),1), np.asarray(r_R0_std2).reshape(len(r_R0_std2),1)))
            error_tot_R0_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            chi2_tot_R0_std = (np.asarray(r_tot_R0_std) / np.asarray(error_tot_R0_std)) ** 2
            MSWD_R0_tot = sum(chi2_tot_R0_std) / df_tot_std
            r_tot_R1_std = np.vstack((np.asarray(r_R1_std1).reshape(len(r_R1_std1),1), np.asarray(r_R1_std2).reshape(len(r_R1_std2),1)))
            error_tot_R1_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1)))
            chi2_tot_R1_std = (np.asarray(r_tot_R1_std) / np.asarray(error_tot_R1_std)) ** 2
            MSWD_R1_tot = sum(chi2_tot_R1_std) / df_tot_std
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 3 and drift_order_conc_value == 0:
            df_std1 = len(R0_std1) - (1 + drift_order_conc_value)
            m_R0_std1 = np.mean(np.asarray(R0_std1))
            sd0_std1_SIMS = np.std(np.asarray(R0_std1))
            se0_std1_SIMS = np.asarray(sd0_std1_SIMS) / (np.sqrt(df_std1))
            res_R0_std1 = np.asarray(R0_std1) - m_R0_std1
            df_std2 = len(R0_std2) - (1 + drift_order_conc_value)
            m_R0_std2 = np.mean(np.asarray(R0_std2))
            sd0_std2_SIMS = np.std(np.asarray(R0_std2))
            se0_std2_SIMS = np.asarray(sd0_std2_SIMS) / (np.sqrt(df_std2))
            res_R0_std2 = np.asarray(R0_std2) - m_R0_std2
            df_std3 = len(R0_std3) - (1 + drift_order_conc_value)
            m_R0_std3 = np.mean(np.asarray(R0_std3))
            sd0_std3_SIMS = np.std(np.asarray(R0_std3))
            se0_std3_SIMS = np.asarray(sd0_std3_SIMS) / (np.sqrt(df_std3))
            res_R0_std3 = np.asarray(R0_std3) - m_R0_std3
            m_R1_std1 = np.mean(np.asarray(R1_std1))
            sd1_std1_SIMS = np.std(np.asarray(R1_std1))
            se1_std1_SIMS = np.asarray(sd1_std1_SIMS) / (np.sqrt(df_std1))
            res_R1_std1 = np.asarray(R1_std1) - m_R1_std1
            m_R1_std2 = np.mean(np.asarray(R1_std2))
            sd1_std2_SIMS = np.std(np.asarray(R1_std2))
            se1_std2_SIMS = np.asarray(sd1_std2_SIMS) / (np.sqrt(df_std2))
            res_R1_std2 = np.asarray(R1_std2) - m_R1_std2
            m_R1_std3 = np.mean(np.asarray(R1_std3))
            sd1_std3_SIMS = np.std(np.asarray(R1_std3))
            se1_std3_SIMS = np.asarray(sd1_std3_SIMS) / (np.sqrt(df_std3))
            res_R1_std3 = np.asarray(R1_std3) - m_R1_std3
            chi2_R0_std1 = (np.asarray(res_R0_std1) / np.asarray(error0_std1)) ** 2
            chi2_R0_std2 = (np.asarray(res_R0_std2) / np.asarray(error0_std2)) ** 2
            chi2_R0_std3 = (np.asarray(res_R0_std3) / np.asarray(error0_std3)) ** 2
            chi2_R1_std1 = (np.asarray(res_R1_std1) / np.asarray(error1_std1)) ** 2
            chi2_R1_std2 = (np.asarray(res_R1_std2) / np.asarray(error1_std2)) ** 2
            chi2_R1_std3 = (np.asarray(res_R1_std3) / np.asarray(error1_std3)) ** 2
            MSWD_R0_std1 = sum(chi2_R0_std1) / df_std1
            MSWD_R0_std2 = sum(chi2_R0_std2) / df_std2
            MSWD_R0_std3 = sum(chi2_R0_std3) / df_std3
            MSWD_R1_std1 = sum(chi2_R1_std1) / df_std1
            MSWD_R1_std2 = sum(chi2_R1_std2) / df_std2
            MSWD_R1_std3 = sum(chi2_R1_std3) / df_std3
            df_tot_std = df_std1 + df_std2 + df_std3
            r_tot_R0_std = np.vstack((np.asarray(res_R0_std1).reshape(len(res_R0_std1),1), np.asarray(res_R0_std2).reshape(len(res_R0_std2),1), np.asarray(res_R0_std3).reshape(len(res_R0_std3),1)))
            error_tot_R0_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            chi2_tot_R0_std = (np.asarray(r_tot_R0_std) / np.asarray(error_tot_R0_std)) ** 2
            MSWD_R0_tot = sum(chi2_tot_R0_std) / df_tot_std
            r_tot_R1_std = np.vstack((np.asarray(res_R1_std1).reshape(len(res_R1_std1),1), np.asarray(res_R1_std2).reshape(len(res_R1_std2),1), np.asarray(res_R1_std3).reshape(len(res_R1_std3),1)))
            error_tot_R1_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1), np.asarray(error1_std3).reshape(len(error1_std3),1)))
            chi2_tot_R1_std = (np.asarray(r_tot_R1_std) / np.asarray(error_tot_R1_std)) ** 2
            MSWD_R1_tot = sum(chi2_tot_R1_std) / df_tot_std
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
            df_std1 = len(R0_std1) - (1 + drift_order_conc_value)
            m_R0_std1 = np.mean(np.asarray(R0_corr_std1))
            sd0_std1_SIMS = np.std(np.asarray(R0_corr_std1))
            se0_std1_SIMS = np.asarray(sd0_std1_SIMS) / (np.sqrt(df_std1))
            df_std2 = len(R0_std2) - (1 + drift_order_conc_value)
            m_R0_std2 = np.mean(np.asarray(R0_corr_std2))
            sd0_std2_SIMS = np.std(np.asarray(R0_corr_std2))
            se0_std2_SIMS = np.asarray(sd0_std2_SIMS) / (np.sqrt(df_std2))
            df_std3 = len(R0_std3) - (1 + drift_order_conc_value)
            m_R0_std3 = np.mean(np.asarray(R0_corr_std3))
            sd0_std3_SIMS = np.std(np.asarray(R0_corr_std3))
            se0_std3_SIMS = np.asarray(sd0_std3_SIMS) / (np.sqrt(df_std3))
            m_R1_std1 = np.mean(np.asarray(R1_corr_std1))
            sd1_std1_SIMS = np.std(np.asarray(R1_corr_std1))
            se1_std1_SIMS = np.asarray(sd1_std1_SIMS) / (np.sqrt(df_std1))
            m_R1_std2 = np.mean(np.asarray(R1_corr_std2))
            sd1_std2_SIMS = np.std(np.asarray(R1_corr_std2))
            se1_std2_SIMS = np.asarray(sd1_std2_SIMS) / (np.sqrt(df_std2))
            m_R1_std3 = np.mean(np.asarray(R1_corr_std3))
            sd1_std3_SIMS = np.std(np.asarray(R1_corr_std3))
            se1_std3_SIMS = np.asarray(sd1_std3_SIMS) / (np.sqrt(df_std3))
            chi2_R0_std1 = (np.asarray(r_R0_std1) / np.asarray(error0_std1)) ** 2
            chi2_R0_std2 = (np.asarray(r_R0_std2) / np.asarray(error0_std2)) ** 2
            chi2_R0_std3 = (np.asarray(r_R0_std3) / np.asarray(error0_std3)) ** 2
            chi2_R1_std1 = (np.asarray(r_R1_std1) / np.asarray(error1_std1)) ** 2
            chi2_R1_std2 = (np.asarray(r_R1_std2) / np.asarray(error1_std2)) ** 2
            chi2_R1_std3 = (np.asarray(r_R1_std3) / np.asarray(error1_std3)) ** 2
            MSWD_R0_std1 = sum(chi2_R0_std1) / df_std1
            MSWD_R0_std2 = sum(chi2_R0_std2) / df_std2
            MSWD_R0_std3 = sum(chi2_R0_std3) / df_std3
            MSWD_R1_std1 = sum(chi2_R1_std1) / df_std1
            MSWD_R1_std2 = sum(chi2_R1_std2) / df_std2
            MSWD_R1_std3 = sum(chi2_R1_std3) / df_std3
            df_tot_std = df_std1 + df_std2 + df_std3
            r_tot_R0_std = np.vstack((np.asarray(r_R0_std1).reshape(len(r_R0_std1),1), np.asarray(r_R0_std2).reshape(len(r_R0_std2),1), np.asarray(r_R0_std3).reshape(len(r_R0_std3),1)))
            error_tot_R0_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            chi2_tot_R0_std = (np.asarray(r_tot_R0_std) / np.asarray(error_tot_R0_std)) ** 2
            MSWD_R0_tot = sum(chi2_tot_R0_std) / df_tot_std
            r_tot_R1_std = np.vstack((np.asarray(r_R1_std1).reshape(len(r_R1_std1),1), np.asarray(r_R1_std2).reshape(len(r_R1_std2),1), np.asarray(r_R1_std3).reshape(len(r_R1_std3),1)))
            error_tot_R1_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1), np.asarray(error1_std3).reshape(len(error1_std3),1)))
            chi2_tot_R1_std = (np.asarray(r_tot_R1_std) / np.asarray(error_tot_R1_std)) ** 2
            MSWD_R1_tot = sum(chi2_tot_R1_std) / df_tot_std
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 1 and drift_order_conc_value == 0:
            df_std = len(R0_std) - (1 + drift_order_conc_value)
            m_R0_std = np.mean(np.asarray(R0_std))
            sd0_std_SIMS = np.std(np.asarray(R0_std))
            se0_std_SIMS = np.asarray(sd0_std_SIMS) / (np.sqrt(df_std))
            res_R0_std = np.asarray(R0_std) - m_R0_std
            chi2_R0_std = (np.asarray(res_R0_std) / np.asarray(error0_std)) ** 2
            MSWD_R0 = sum(chi2_R0_std) / df_std
            m_R1_std = np.mean(np.asarray(R1_std))
            sd1_std_SIMS = np.std(np.asarray(R1_std))
            se1_std_SIMS = np.asarray(sd1_std_SIMS) / (np.sqrt(df_std))
            res_R1_std = np.asarray(R1_std) - m_R1_std
            chi2_R1_std = (np.asarray(res_R1_std) / np.asarray(error1_std)) ** 2
            MSWD_R1 = sum(chi2_R1_std) / df_std
            m_R2_std = np.mean(np.asarray(R2_std))
            sd2_std_SIMS = np.std(np.asarray(R2_std))
            se2_std_SIMS = np.asarray(sd2_std_SIMS) / (np.sqrt(df_std))
            res_R2_std = np.asarray(R2_std) - m_R2_std
            chi2_R2_std = (np.asarray(res_R2_std) / np.asarray(error2_std)) ** 2
            MSWD_R2 = sum(chi2_R2_std) / df_std
            if Auto_bias_iso_value == 1:
                R0_ref_std = (np.asarray(R0_std) * Ref_std_conc1_value) / m_R0_std
                R0_ref_unk = (np.asarray(R0_unk) * Ref_std_conc1_value) / m_R0_std
                se0_ref_unk = np.asarray(R0_ref_unk) * np.sqrt((np.asarray(error0_unk) / np.asarray(R0_unk)) ** 2 + (np.asarray(se0_std_SIMS) / np.asarray(m_R0_std)) ** 2 + (Ref_sigma_conc1_value / Ref_std_conc1_value) ** 2)
                R1_ref_std = (np.asarray(R1_std) * Ref_std_conc2_value) / m_R1_std
                R1_ref_unk = (np.asarray(R1_unk) * Ref_std_conc2_value) / m_R1_std
                se1_ref_unk = np.asarray(R1_ref_unk) * np.sqrt((np.asarray(error1_unk) / np.asarray(R1_unk)) ** 2 + (np.asarray(se1_std_SIMS) / np.asarray(m_R1_std)) ** 2 + (Ref_sigma_conc2_value / Ref_std_conc2_value) ** 2)
                R2_ref_std = (np.asarray(R2_std) * Ref_std_conc3_value) / m_R2_std
                R2_ref_unk = (np.asarray(R2_unk) * Ref_std_conc3_value) / m_R2_std
                se2_ref_unk = np.asarray(R2_ref_unk) * np.sqrt((np.asarray(error2_unk) / np.asarray(R2_unk)) ** 2 + (np.asarray(se2_std_SIMS) / np.asarray(m_R2_std)) ** 2 + (Ref_sigma_conc3_value / Ref_std_conc3_value) ** 2)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 1 and drift_order_conc_value >= 1:
            df_std = len(R0_corr_std) - (1 + drift_order_conc_value)
            m_R0_std = np.mean(np.asarray(R0_corr_std))
            sd0_std_SIMS = np.std(np.asarray(R0_corr_std))
            se0_std_SIMS = np.asarray(sd0_std_SIMS) / (np.sqrt(df_std))
            chi2_R0_std = (np.asarray(r_R0_std) / np.asarray(error0_std)) ** 2
            MSWD_R0 = sum(chi2_R0_std) / df_std
            m_R1_std = np.mean(np.asarray(R1_corr_std))
            sd1_std_SIMS = np.std(np.asarray(R1_corr_std))
            se1_std_SIMS = np.asarray(sd1_std_SIMS) / (np.sqrt(df_std))
            chi2_R1_std = (np.asarray(r_R1_std) / np.asarray(error1_std)) ** 2
            MSWD_R1 = sum(chi2_R1_std) / df_std
            m_R2_std = np.mean(np.asarray(R2_corr_std))
            sd2_std_SIMS = np.std(np.asarray(R2_corr_std))
            se2_std_SIMS = np.asarray(sd2_std_SIMS) / (np.sqrt(df_std))
            chi2_R2_std = (np.asarray(r_R2_std) / np.asarray(error2_std)) ** 2
            MSWD_R2 = sum(chi2_R2_std) / df_std
            if Auto_bias_iso_value == 1:
                R0_ref_std = (np.asarray(R0_corr_std) * Ref_std_conc1_value) / m_R0_std
                R0_ref_unk = (np.asarray(R0_corr_unk) * Ref_std_conc1_value) / m_R0_std
                se0_ref_unk = np.asarray(R0_ref_unk) * np.sqrt((np.asarray(error0_unk) / np.asarray(R0_corr_unk)) ** 2 + (np.asarray(se0_std_SIMS) / np.asarray(m_R0_std)) ** 2 + (Ref_sigma_conc1_value / Ref_std_conc1_value) ** 2)
                R1_ref_std = (np.asarray(R1_corr_std) * Ref_std_conc2_value) / m_R1_std
                R1_ref_unk = (np.asarray(R1_corr_unk) * Ref_std_conc2_value) / m_R1_std
                se1_ref_unk = np.asarray(R1_ref_unk) * np.sqrt((np.asarray(error1_unk) / np.asarray(R1_corr_unk)) ** 2 + (np.asarray(se1_std_SIMS) / np.asarray(m_R1_std)) ** 2 + (Ref_sigma_conc2_value / Ref_std_conc2_value) ** 2)
                R2_ref_std = (np.asarray(R2_corr_std) * Ref_std_conc3_value) / m_R2_std
                R2_ref_unk = (np.asarray(R2_corr_unk) * Ref_std_conc3_value) / m_R2_std
                se2_ref_unk = np.asarray(R2_ref_unk) * np.sqrt((np.asarray(error2_unk) / np.asarray(R2_corr_unk)) ** 2 + (np.asarray(se2_std_SIMS) / np.asarray(m_R2_std)) ** 2 + (Ref_sigma_conc3_value / Ref_std_conc3_value) ** 2)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 2 and drift_order_conc_value == 0:
            df_std1 = len(R0_std1) - (1 + drift_order_conc_value)
            m_R0_std1 = np.mean(np.asarray(R0_std1))
            sd0_std1_SIMS = np.std(np.asarray(R0_std1))
            se0_std1_SIMS = np.asarray(sd0_std1_SIMS) / (np.sqrt(df_std1))
            res_R0_std1 = np.asarray(R0_std1) - m_R0_std1
            df_std2 = len(R0_std2) - (1 + drift_order_conc_value)
            m_R0_std2 = np.mean(np.asarray(R0_std2))
            sd0_std2_SIMS = np.std(np.asarray(R0_std2))
            se0_std2_SIMS = np.asarray(sd0_std2_SIMS) / (np.sqrt(df_std2))
            res_R0_std2 = np.asarray(R0_std2) - m_R0_std2
            m_R1_std1 = np.mean(np.asarray(R1_std1))
            sd1_std1_SIMS = np.std(np.asarray(R1_std1))
            se1_std1_SIMS = np.asarray(sd1_std1_SIMS) / (np.sqrt(df_std1))
            res_R1_std1 = np.asarray(R1_std1) - m_R1_std1
            m_R1_std2 = np.mean(np.asarray(R1_std2))
            sd1_std2_SIMS = np.std(np.asarray(R1_std2))
            se1_std2_SIMS = np.asarray(sd1_std2_SIMS) / (np.sqrt(df_std2))
            res_R1_std2 = np.asarray(R1_std2) - m_R1_std2
            m_R2_std1 = np.mean(np.asarray(R2_std1))
            sd2_std1_SIMS = np.std(np.asarray(R2_std1))
            se2_std1_SIMS = np.asarray(sd2_std1_SIMS) / (np.sqrt(df_std1))
            res_R2_std1 = np.asarray(R2_std1) - m_R2_std1
            m_R2_std2 = np.mean(np.asarray(R2_std2))
            sd2_std2_SIMS = np.std(np.asarray(R2_std2))
            se2_std2_SIMS = np.asarray(sd2_std2_SIMS) / (np.sqrt(df_std2))
            res_R2_std2 = np.asarray(R2_std2) - m_R2_std2
            chi2_R0_std1 = (np.asarray(res_R0_std1) / np.asarray(error0_std1)) ** 2
            chi2_R0_std2 = (np.asarray(res_R0_std2) / np.asarray(error0_std2)) ** 2
            chi2_R1_std1 = (np.asarray(res_R1_std1) / np.asarray(error1_std1)) ** 2
            chi2_R1_std2 = (np.asarray(res_R1_std2) / np.asarray(error1_std2)) ** 2
            chi2_R2_std1 = (np.asarray(res_R2_std1) / np.asarray(error2_std1)) ** 2
            chi2_R2_std2 = (np.asarray(res_R2_std2) / np.asarray(error2_std2)) ** 2
            MSWD_R0_std1 = sum(chi2_R0_std1) / df_std1
            MSWD_R0_std2 = sum(chi2_R0_std2) / df_std2
            MSWD_R1_std1 = sum(chi2_R1_std1) / df_std1
            MSWD_R1_std2 = sum(chi2_R1_std2) / df_std2
            MSWD_R2_std1 = sum(chi2_R2_std1) / df_std1
            MSWD_R2_std2 = sum(chi2_R2_std2) / df_std2
            df_tot_std = df_std1 + df_std2
            r_tot_R0_std = np.vstack((np.asarray(res_R0_std1).reshape(len(res_R0_std1),1), np.asarray(res_R0_std2).reshape(len(res_R0_std2),1)))
            error_tot_R0_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            chi2_tot_R0_std = (np.asarray(r_tot_R0_std) / np.asarray(error_tot_R0_std)) ** 2
            MSWD_R0_tot = sum(chi2_tot_R0_std) / df_tot_std
            r_tot_R1_std = np.vstack((np.asarray(res_R1_std1).reshape(len(res_R1_std1),1), np.asarray(res_R1_std2).reshape(len(res_R1_std2),1)))
            error_tot_R1_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1)))
            chi2_tot_R1_std = (np.asarray(r_tot_R1_std) / np.asarray(error_tot_R1_std)) ** 2
            MSWD_R1_tot = sum(chi2_tot_R1_std) / df_tot_std
            r_tot_R2_std = np.vstack((np.asarray(res_R2_std1).reshape(len(res_R2_std1),1), np.asarray(res_R2_std2).reshape(len(res_R2_std2),1)))
            error_tot_R2_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1)))
            chi2_tot_R2_std = (np.asarray(r_tot_R2_std) / np.asarray(error_tot_R2_std)) ** 2
            MSWD_R2_tot = sum(chi2_tot_R2_std) / df_tot_std
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
            df_std1 = len(R0_corr_std1) - (1 + drift_order_conc_value)
            m_R0_std1 = np.mean(np.asarray(R0_corr_std1))
            sd0_std1_SIMS = np.std(np.asarray(R0_corr_std1))
            se0_std1_SIMS = np.asarray(sd0_std1_SIMS) / (np.sqrt(df_std1))
            df_std2 = len(R0_std2) - (1 + drift_order_conc_value)
            m_R0_std2 = np.mean(np.asarray(R0_corr_std2))
            sd0_std2_SIMS = np.std(np.asarray(R0_corr_std2))
            se0_std2_SIMS = np.asarray(sd0_std2_SIMS) / (np.sqrt(df_std2))
            m_R1_std1 = np.mean(np.asarray(R1_corr_std1))
            sd1_std1_SIMS = np.std(np.asarray(R1_corr_std1))
            se1_std1_SIMS = np.asarray(sd1_std1_SIMS) / (np.sqrt(df_std1))
            m_R1_std2 = np.mean(np.asarray(R1_corr_std2))
            sd1_std2_SIMS = np.std(np.asarray(R1_corr_std2))
            se1_std2_SIMS = np.asarray(sd1_std2_SIMS) / (np.sqrt(df_std2))
            m_R2_std1 = np.mean(np.asarray(R2_corr_std1))
            sd2_std1_SIMS = np.std(np.asarray(R2_corr_std1))
            se2_std1_SIMS = np.asarray(sd2_std1_SIMS) / (np.sqrt(df_std1))
            m_R2_std2 = np.mean(np.asarray(R2_corr_std2))
            sd2_std2_SIMS = np.std(np.asarray(R2_corr_std2))
            se2_std2_SIMS = np.asarray(sd2_std2_SIMS) / (np.sqrt(df_std2))
            chi2_R0_std1 = (np.asarray(r_R0_std1) / np.asarray(error0_std1)) ** 2
            chi2_R0_std2 = (np.asarray(r_R0_std2) / np.asarray(error0_std2)) ** 2
            chi2_R1_std1 = (np.asarray(r_R1_std1) / np.asarray(error1_std1)) ** 2
            chi2_R1_std2 = (np.asarray(r_R1_std2) / np.asarray(error1_std2)) ** 2
            chi2_R2_std1 = (np.asarray(r_R2_std1) / np.asarray(error2_std1)) ** 2
            chi2_R2_std2 = (np.asarray(r_R2_std2) / np.asarray(error2_std2)) ** 2
            MSWD_R0_std1 = sum(chi2_R0_std1) / df_std1
            MSWD_R0_std2 = sum(chi2_R0_std2) / df_std2
            MSWD_R1_std1 = sum(chi2_R1_std1) / df_std1
            MSWD_R1_std2 = sum(chi2_R1_std2) / df_std2
            MSWD_R2_std1 = sum(chi2_R2_std1) / df_std1
            MSWD_R2_std2 = sum(chi2_R2_std2) / df_std2
            df_tot_std = df_std1 + df_std2
            r_tot_R0_std = np.vstack((np.asarray(r_R0_std1).reshape(len(r_R0_std1),1), np.asarray(r_R0_std2).reshape(len(r_R0_std2),1)))
            error_tot_R0_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            chi2_tot_R0_std = (np.asarray(r_tot_R0_std) / np.asarray(error_tot_R0_std)) ** 2
            MSWD_R0_tot = sum(chi2_tot_R0_std) / df_tot_std
            r_tot_R1_std = np.vstack((np.asarray(r_R1_std1).reshape(len(r_R1_std1),1), np.asarray(r_R1_std2).reshape(len(r_R1_std2),1)))
            error_tot_R1_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1)))
            chi2_tot_R1_std = (np.asarray(r_tot_R1_std) / np.asarray(error_tot_R1_std)) ** 2
            MSWD_R1_tot = sum(chi2_tot_R1_std) / df_tot_std
            r_tot_R2_std = np.vstack((np.asarray(r_R2_std1).reshape(len(r_R2_std1),1), np.asarray(r_R2_std2).reshape(len(r_R2_std2),1)))
            error_tot_R2_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1)))
            chi2_tot_R2_std = (np.asarray(r_tot_R2_std) / np.asarray(error_tot_R2_std)) ** 2
            MSWD_R2_tot = sum(chi2_tot_R2_std) / df_tot_std
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 3 and drift_order_conc_value == 0:
            df_std1 = len(R0_std1) - (1 + drift_order_conc_value)
            m_R0_std1 = np.mean(np.asarray(R0_std1))
            sd0_std1_SIMS = np.std(np.asarray(R0_std1))
            se0_std1_SIMS = np.asarray(sd0_std1_SIMS) / (np.sqrt(df_std1))
            res_R0_std1 = np.asarray(R0_std1) - m_R0_std1
            df_std2 = len(R0_std2) - (1 + drift_order_conc_value)
            m_R0_std2 = np.mean(np.asarray(R0_std2))
            sd0_std2_SIMS = np.std(np.asarray(R0_std2))
            se0_std2_SIMS = np.asarray(sd0_std2_SIMS) / (np.sqrt(df_std2))
            res_R0_std2 = np.asarray(R0_std2) - m_R0_std2
            df_std3 = len(R0_std3) - (1 + drift_order_conc_value)
            m_R0_std3 = np.mean(np.asarray(R0_std3))
            sd0_std3_SIMS = np.std(np.asarray(R0_std3))
            se0_std3_SIMS = np.asarray(sd0_std3_SIMS) / (np.sqrt(df_std3))
            res_R0_std3 = np.asarray(R0_std3) - m_R0_std3
            m_R1_std1 = np.mean(np.asarray(R1_std1))
            sd1_std1_SIMS = np.std(np.asarray(R1_std1))
            se1_std1_SIMS = np.asarray(sd1_std1_SIMS) / (np.sqrt(df_std1))
            res_R1_std1 = np.asarray(R1_std1) - m_R1_std1
            m_R1_std2 = np.mean(np.asarray(R1_std2))
            sd1_std2_SIMS = np.std(np.asarray(R1_std2))
            se1_std2_SIMS = np.asarray(sd1_std2_SIMS) / (np.sqrt(df_std2))
            res_R1_std2 = np.asarray(R1_std2) - m_R1_std2
            m_R1_std3 = np.mean(np.asarray(R1_std3))
            sd1_std3_SIMS = np.std(np.asarray(R1_std3))
            se1_std3_SIMS = np.asarray(sd1_std3_SIMS) / (np.sqrt(df_std3))
            res_R1_std3 = np.asarray(R1_std3) - m_R1_std3
            m_R2_std1 = np.mean(np.asarray(R2_std1))
            sd2_std1_SIMS = np.std(np.asarray(R2_std1))
            se2_std1_SIMS = np.asarray(sd2_std1_SIMS) / (np.sqrt(df_std1))
            res_R2_std1 = np.asarray(R2_std1) - m_R2_std1
            m_R2_std2 = np.mean(np.asarray(R2_std2))
            sd2_std2_SIMS = np.std(np.asarray(R2_std2))
            se2_std2_SIMS = np.asarray(sd2_std2_SIMS) / (np.sqrt(df_std2))
            res_R2_std2 = np.asarray(R2_std2) - m_R2_std2
            m_R2_std3 = np.mean(np.asarray(R2_std3))
            sd2_std3_SIMS = np.std(np.asarray(R2_std3))
            se2_std3_SIMS = np.asarray(sd2_std3_SIMS) / (np.sqrt(df_std3))
            res_R2_std3 = np.asarray(R2_std3) - m_R2_std3
            chi2_R0_std1 = (np.asarray(res_R0_std1) / np.asarray(error0_std1)) ** 2
            chi2_R0_std2 = (np.asarray(res_R0_std2) / np.asarray(error0_std2)) ** 2
            chi2_R0_std3 = (np.asarray(res_R0_std3) / np.asarray(error0_std3)) ** 2
            chi2_R1_std1 = (np.asarray(res_R1_std1) / np.asarray(error1_std1)) ** 2
            chi2_R1_std2 = (np.asarray(res_R1_std2) / np.asarray(error1_std2)) ** 2
            chi2_R1_std3 = (np.asarray(res_R1_std3) / np.asarray(error1_std3)) ** 2
            chi2_R2_std1 = (np.asarray(res_R2_std1) / np.asarray(error2_std1)) ** 2
            chi2_R2_std2 = (np.asarray(res_R2_std2) / np.asarray(error2_std2)) ** 2
            chi2_R2_std3 = (np.asarray(res_R2_std3) / np.asarray(error2_std3)) ** 2
            MSWD_R0_std1 = sum(chi2_R0_std1) / df_std1
            MSWD_R0_std2 = sum(chi2_R0_std2) / df_std2
            MSWD_R0_std3 = sum(chi2_R0_std3) / df_std3
            MSWD_R1_std1 = sum(chi2_R1_std1) / df_std1
            MSWD_R1_std2 = sum(chi2_R1_std2) / df_std2
            MSWD_R1_std3 = sum(chi2_R1_std3) / df_std3
            MSWD_R2_std1 = sum(chi2_R2_std1) / df_std1
            MSWD_R2_std2 = sum(chi2_R2_std2) / df_std2
            MSWD_R2_std3 = sum(chi2_R2_std3) / df_std3
            df_tot_std = df_std1 + df_std2 + df_std3
            r_tot_R0_std = np.vstack((np.asarray(res_R0_std1).reshape(len(res_R0_std1),1), np.asarray(res_R0_std2).reshape(len(res_R0_std2),1), np.asarray(res_R0_std3).reshape(len(res_R0_std3),1)))
            error_tot_R0_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            chi2_tot_R0_std = (np.asarray(r_tot_R0_std) / np.asarray(error_tot_R0_std)) ** 2
            MSWD_R0_tot = sum(chi2_tot_R0_std) / df_tot_std
            r_tot_R1_std = np.vstack((np.asarray(res_R1_std1).reshape(len(res_R1_std1),1), np.asarray(res_R1_std2).reshape(len(res_R1_std2),1), np.asarray(res_R1_std3).reshape(len(res_R1_std3),1)))
            error_tot_R1_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1), np.asarray(error1_std3).reshape(len(error1_std3),1)))
            chi2_tot_R1_std = (np.asarray(r_tot_R1_std) / np.asarray(error_tot_R1_std)) ** 2
            MSWD_R1_tot = sum(chi2_tot_R1_std) / df_tot_std
            r_tot_R2_std = np.vstack((np.asarray(res_R2_std1).reshape(len(res_R2_std1),1), np.asarray(res_R2_std2).reshape(len(res_R2_std2),1), np.asarray(res_R2_std3).reshape(len(res_R2_std3),1)))
            error_tot_R2_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1), np.asarray(error2_std3).reshape(len(error2_std3),1)))
            chi2_tot_R2_std = (np.asarray(r_tot_R2_std) / np.asarray(error_tot_R2_std)) ** 2
            MSWD_R2_tot = sum(chi2_tot_R2_std) / df_tot_std
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
            df_std1 = len(R0_std1) - (1 + drift_order_conc_value)
            m_R0_std1 = np.mean(np.asarray(R0_corr_std1))
            sd0_std1_SIMS = np.std(np.asarray(R0_corr_std1))
            se0_std1_SIMS = np.asarray(sd0_std1_SIMS) / (np.sqrt(df_std1))
            df_std2 = len(R0_std2) - (1 + drift_order_conc_value)
            m_R0_std2 = np.mean(np.asarray(R0_corr_std2))
            sd0_std2_SIMS = np.std(np.asarray(R0_corr_std2))
            se0_std2_SIMS = np.asarray(sd0_std2_SIMS) / (np.sqrt(df_std2))
            df_std3 = len(R0_std3) - (1 + drift_order_conc_value)
            m_R0_std3 = np.mean(np.asarray(R0_corr_std3))
            sd0_std3_SIMS = np.std(np.asarray(R0_corr_std3))
            se0_std3_SIMS = np.asarray(sd0_std3_SIMS) / (np.sqrt(df_std3))
            m_R1_std1 = np.mean(np.asarray(R1_corr_std1))
            sd1_std1_SIMS = np.std(np.asarray(R1_corr_std1))
            se1_std1_SIMS = np.asarray(sd1_std1_SIMS) / (np.sqrt(df_std1))
            m_R1_std2 = np.mean(np.asarray(R1_corr_std2))
            sd1_std2_SIMS = np.std(np.asarray(R1_corr_std2))
            se1_std2_SIMS = np.asarray(sd1_std2_SIMS) / (np.sqrt(df_std2))
            m_R1_std3 = np.mean(np.asarray(R1_corr_std3))
            sd1_std3_SIMS = np.std(np.asarray(R1_corr_std3))
            se1_std3_SIMS = np.asarray(sd1_std3_SIMS) / (np.sqrt(df_std3))
            m_R2_std1 = np.mean(np.asarray(R2_corr_std1))
            sd2_std1_SIMS = np.std(np.asarray(R2_corr_std1))
            se2_std1_SIMS = np.asarray(sd2_std1_SIMS) / (np.sqrt(df_std1))
            m_R2_std2 = np.mean(np.asarray(R2_corr_std2))
            sd2_std2_SIMS = np.std(np.asarray(R2_corr_std2))
            se2_std2_SIMS = np.asarray(sd2_std2_SIMS) / (np.sqrt(df_std2))
            m_R2_std3 = np.mean(np.asarray(R2_corr_std3))
            sd2_std3_SIMS = np.std(np.asarray(R2_corr_std3))
            se2_std3_SIMS = np.asarray(sd2_std3_SIMS) / (np.sqrt(df_std3))
            chi2_R0_std1 = (np.asarray(r_R0_std1) / np.asarray(error0_std1)) ** 2
            chi2_R0_std2 = (np.asarray(r_R0_std2) / np.asarray(error0_std2)) ** 2
            chi2_R0_std3 = (np.asarray(r_R0_std3) / np.asarray(error0_std3)) ** 2
            chi2_R1_std1 = (np.asarray(r_R1_std1) / np.asarray(error1_std1)) ** 2
            chi2_R1_std2 = (np.asarray(r_R1_std2) / np.asarray(error1_std2)) ** 2
            chi2_R1_std3 = (np.asarray(r_R1_std3) / np.asarray(error1_std3)) ** 2
            chi2_R2_std1 = (np.asarray(r_R2_std1) / np.asarray(error2_std1)) ** 2
            chi2_R2_std2 = (np.asarray(r_R2_std2) / np.asarray(error2_std2)) ** 2
            chi2_R2_std3 = (np.asarray(r_R2_std3) / np.asarray(error2_std3)) ** 2
            MSWD_R0_std1 = sum(chi2_R0_std1) / df_std1
            MSWD_R0_std2 = sum(chi2_R0_std2) / df_std2
            MSWD_R0_std3 = sum(chi2_R0_std3) / df_std3
            MSWD_R1_std1 = sum(chi2_R1_std1) / df_std1
            MSWD_R1_std2 = sum(chi2_R1_std2) / df_std2
            MSWD_R1_std3 = sum(chi2_R1_std3) / df_std3
            MSWD_R2_std1 = sum(chi2_R2_std1) / df_std1
            MSWD_R2_std2 = sum(chi2_R2_std2) / df_std2
            MSWD_R2_std3 = sum(chi2_R2_std3) / df_std3
            df_tot_std = df_std1 + df_std2 + df_std3
            r_tot_R0_std = np.vstack((np.asarray(r_R0_std1).reshape(len(r_R0_std1),1), np.asarray(r_R0_std2).reshape(len(r_R0_std2),1), np.asarray(r_R0_std3).reshape(len(r_R0_std3),1)))
            error_tot_R0_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            chi2_tot_R0_std = (np.asarray(r_tot_R0_std) / np.asarray(error_tot_R0_std)) ** 2
            MSWD_R0_tot = sum(chi2_tot_R0_std) / df_tot_std
            r_tot_R1_std = np.vstack((np.asarray(r_R1_std1).reshape(len(r_R1_std1),1), np.asarray(r_R1_std2).reshape(len(r_R1_std2),1), np.asarray(r_R1_std3).reshape(len(r_R1_std3),1)))
            error_tot_R1_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1), np.asarray(error1_std3).reshape(len(error1_std3),1)))
            chi2_tot_R1_std = (np.asarray(r_tot_R1_std) / np.asarray(error_tot_R1_std)) ** 2
            MSWD_R1_tot = sum(chi2_tot_R1_std) / df_tot_std
            r_tot_R2_std = np.vstack((np.asarray(r_R2_std1).reshape(len(r_R2_std1),1), np.asarray(r_R2_std2).reshape(len(r_R2_std2),1), np.asarray(r_R2_std3).reshape(len(r_R2_std3),1)))
            error_tot_R2_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1), np.asarray(error2_std3).reshape(len(error2_std3),1)))
            chi2_tot_R2_std = (np.asarray(r_tot_R2_std) / np.asarray(error_tot_R2_std)) ** 2
            MSWD_R2_tot = sum(chi2_tot_R2_std) / df_tot_std
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 1 and drift_order_conc_value == 0:
            df_std = len(R0_std) - (1 + drift_order_conc_value)
            m_R0_std = np.mean(np.asarray(R0_std))
            sd0_std_SIMS = np.std(np.asarray(R0_std))
            se0_std_SIMS = np.asarray(sd0_std_SIMS) / (np.sqrt(df_std))
            res_R0_std = np.asarray(R0_std) - m_R0_std
            chi2_R0_std = (np.asarray(res_R0_std) / np.asarray(error0_std)) ** 2
            MSWD_R0 = sum(chi2_R0_std) / df_std
            m_R1_std = np.mean(np.asarray(R1_std))
            sd1_std_SIMS = np.std(np.asarray(R1_std))
            se1_std_SIMS = np.asarray(sd1_std_SIMS) / (np.sqrt(df_std))
            res_R1_std = np.asarray(R1_std) - m_R1_std
            chi2_R1_std = (np.asarray(res_R1_std) / np.asarray(error1_std)) ** 2
            MSWD_R1 = sum(chi2_R1_std) / df_std
            m_R2_std = np.mean(np.asarray(R2_std))
            sd2_std_SIMS = np.std(np.asarray(R2_std))
            se2_std_SIMS = np.asarray(sd2_std_SIMS) / (np.sqrt(df_std))
            res_R2_std = np.asarray(R2_std) - m_R2_std
            chi2_R2_std = (np.asarray(res_R2_std) / np.asarray(error2_std)) ** 2
            MSWD_R2 = sum(chi2_R2_std) / df_std
            m_R3_std = np.mean(np.asarray(R3_std))
            sd3_std_SIMS = np.std(np.asarray(R3_std))
            se3_std_SIMS = np.asarray(sd2_std_SIMS) / (np.sqrt(df_std))
            res_R3_std = np.asarray(R3_std) - m_R3_std
            chi2_R3_std = (np.asarray(res_R3_std) / np.asarray(error3_std)) ** 2
            MSWD_R3 = sum(chi2_R3_std) / df_std
            if Auto_bias_iso_value == 1:
                R0_ref_std = (np.asarray(R0_std) * Ref_std_conc1_value) / m_R0_std
                R0_ref_unk = (np.asarray(R0_unk) * Ref_std_conc1_value) / m_R0_std
                se0_ref_unk = np.asarray(R0_ref_unk) * np.sqrt((np.asarray(error0_unk) / np.asarray(R0_unk)) ** 2 + (np.asarray(se0_std_SIMS) / np.asarray(m_R0_std)) ** 2 + (Ref_sigma_conc1_value / Ref_std_conc1_value) ** 2)
                R1_ref_std = (np.asarray(R1_std) * Ref_std_conc2_value) / m_R1_std
                R1_ref_unk = (np.asarray(R1_unk) * Ref_std_conc2_value) / m_R1_std
                se1_ref_unk = np.asarray(R1_ref_unk) * np.sqrt((np.asarray(error1_unk) / np.asarray(R1_unk)) ** 2 + (np.asarray(se1_std_SIMS) / np.asarray(m_R1_std)) ** 2 + (Ref_sigma_conc2_value / Ref_std_conc2_value) ** 2)
                R2_ref_std = (np.asarray(R2_std) * Ref_std_conc3_value) / m_R2_std
                R2_ref_unk = (np.asarray(R2_unk) * Ref_std_conc3_value) / m_R2_std
                se2_ref_unk = np.asarray(R2_ref_unk) * np.sqrt((np.asarray(error2_unk) / np.asarray(R2_unk)) ** 2 + (np.asarray(se2_std_SIMS) / np.asarray(m_R2_std)) ** 2 + (Ref_sigma_conc3_value / Ref_std_conc3_value) ** 2)
                R3_ref_std = (np.asarray(R3_std) * Ref_std_conc4_value) / m_R3_std
                R3_ref_unk = (np.asarray(R3_unk) * Ref_std_conc4_value) / m_R3_std
                se3_ref_unk = np.asarray(R3_ref_unk) * np.sqrt((np.asarray(error3_unk) / np.asarray(R3_unk)) ** 2 + (np.asarray(se3_std_SIMS) / np.asarray(m_R3_std)) ** 2 + (Ref_sigma_conc4_value / Ref_std_conc4_value) ** 2)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 1 and drift_order_conc_value >= 1:
            df_std = len(R0_corr_std) - (1 + drift_order_conc_value)
            m_R0_std = np.mean(np.asarray(R0_corr_std))
            sd0_std_SIMS = np.std(np.asarray(R0_corr_std))
            se0_std_SIMS = np.asarray(sd0_std_SIMS) / (np.sqrt(df_std))
            chi2_R0_std = (np.asarray(r_R0_std) / np.asarray(error0_std)) ** 2
            MSWD_R0 = sum(chi2_R0_std) / df_std
            m_R1_std = np.mean(np.asarray(R1_corr_std))
            sd1_std_SIMS = np.std(np.asarray(R1_corr_std))
            se1_std_SIMS = np.asarray(sd1_std_SIMS) / (np.sqrt(df_std))
            chi2_R1_std = (np.asarray(r_R1_std) / np.asarray(error1_std)) ** 2
            MSWD_R1 = sum(chi2_R1_std) / df_std
            m_R2_std = np.mean(np.asarray(R2_corr_std))
            sd2_std_SIMS = np.std(np.asarray(R2_corr_std))
            se2_std_SIMS = np.asarray(sd2_std_SIMS) / (np.sqrt(df_std))
            chi2_R2_std = (np.asarray(r_R2_std) / np.asarray(error2_std)) ** 2
            MSWD_R2 = sum(chi2_R2_std) / df_std
            m_R3_std = np.mean(np.asarray(R3_corr_std))
            sd3_std_SIMS = np.std(np.asarray(R3_corr_std))
            se3_std_SIMS = np.asarray(sd3_std_SIMS) / (np.sqrt(df_std))
            chi2_R3_std = (np.asarray(r_R3_std) / np.asarray(error3_std)) ** 2
            MSWD_R3 = sum(chi2_R3_std) / df_std
            if Auto_bias_iso_value == 1:
                R0_ref_std = (np.asarray(R0_corr_std) * Ref_std_conc1_value) / m_R0_std
                R0_ref_unk = (np.asarray(R0_corr_unk) * Ref_std_conc1_value) / m_R0_std
                se0_ref_unk = np.asarray(R0_ref_unk) * np.sqrt((np.asarray(error0_unk) / np.asarray(R0_corr_unk)) ** 2 + (np.asarray(se0_std_SIMS) / np.asarray(m_R0_std)) ** 2 + (Ref_sigma_conc1_value / Ref_std_conc1_value) ** 2)
                R1_ref_std = (np.asarray(R1_corr_std) * Ref_std_conc2_value) / m_R1_std
                R1_ref_unk = (np.asarray(R1_corr_unk) * Ref_std_conc2_value) / m_R1_std
                se1_ref_unk = np.asarray(R1_ref_unk) * np.sqrt((np.asarray(error1_unk) / np.asarray(R1_corr_unk)) ** 2 + (np.asarray(se1_std_SIMS) / np.asarray(m_R1_std)) ** 2 + (Ref_sigma_conc2_value / Ref_std_conc2_value) ** 2)
                R2_ref_std = (np.asarray(R2_corr_std) * Ref_std_conc3_value) / m_R2_std
                R2_ref_unk = (np.asarray(R2_corr_unk) * Ref_std_conc3_value) / m_R2_std
                se2_ref_unk = np.asarray(R2_ref_unk) * np.sqrt((np.asarray(error2_unk) / np.asarray(R2_corr_unk)) ** 2 + (np.asarray(se2_std_SIMS) / np.asarray(m_R2_std)) ** 2 + (Ref_sigma_conc3_value / Ref_std_conc3_value) ** 2)
                R3_ref_std = (np.asarray(R3_corr_std) * Ref_std_conc4_value) / m_R3_std
                R3_ref_unk = (np.asarray(R3_corr_unk) * Ref_std_conc4_value) / m_R3_std
                se3_ref_unk = np.asarray(R3_ref_unk) * np.sqrt((np.asarray(error3_unk) / np.asarray(R3_corr_unk)) ** 2 + (np.asarray(se3_std_SIMS) / np.asarray(m_R3_std)) ** 2 + (Ref_sigma_conc4_value / Ref_std_conc4_value) ** 2)
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 2 and drift_order_conc_value == 0:
            df_std1 = len(R0_std1) - (1 + drift_order_conc_value)
            m_R0_std1 = np.mean(np.asarray(R0_std1))
            sd0_std1_SIMS = np.std(np.asarray(R0_std1))
            se0_std1_SIMS = np.asarray(sd0_std1_SIMS) / (np.sqrt(df_std1))
            res_R0_std1 = np.asarray(R0_std1) - m_R0_std1
            df_std2 = len(R0_std2) - (1 + drift_order_conc_value)
            m_R0_std2 = np.mean(np.asarray(R0_std2))
            sd0_std2_SIMS = np.std(np.asarray(R0_std2))
            se0_std2_SIMS = np.asarray(sd0_std2_SIMS) / (np.sqrt(df_std2))
            res_R0_std2 = np.asarray(R0_std2) - m_R0_std2
            m_R1_std1 = np.mean(np.asarray(R1_std1))
            sd1_std1_SIMS = np.std(np.asarray(R1_std1))
            se1_std1_SIMS = np.asarray(sd1_std1_SIMS) / (np.sqrt(df_std1))
            res_R1_std1 = np.asarray(R1_std1) - m_R1_std1
            m_R1_std2 = np.mean(np.asarray(R1_std2))
            sd1_std2_SIMS = np.std(np.asarray(R1_std2))
            se1_std2_SIMS = np.asarray(sd1_std2_SIMS) / (np.sqrt(df_std2))
            res_R1_std2 = np.asarray(R1_std2) - m_R1_std2
            m_R2_std1 = np.mean(np.asarray(R2_std1))
            sd2_std1_SIMS = np.std(np.asarray(R2_std1))
            se2_std1_SIMS = np.asarray(sd2_std1_SIMS) / (np.sqrt(df_std1))
            res_R2_std1 = np.asarray(R2_std1) - m_R2_std1
            m_R2_std2 = np.mean(np.asarray(R2_std2))
            sd2_std2_SIMS = np.std(np.asarray(R2_std2))
            se2_std2_SIMS = np.asarray(sd2_std2_SIMS) / (np.sqrt(df_std2))
            res_R2_std2 = np.asarray(R2_std2) - m_R2_std2
            m_R3_std1 = np.mean(np.asarray(R3_std1))
            sd3_std1_SIMS = np.std(np.asarray(R3_std1))
            se3_std1_SIMS = np.asarray(sd3_std1_SIMS) / (np.sqrt(df_std1))
            res_R3_std1 = np.asarray(R3_std1) - m_R3_std1
            m_R3_std2 = np.mean(np.asarray(R3_std2))
            sd3_std2_SIMS = np.std(np.asarray(R3_std2))
            se3_std2_SIMS = np.asarray(sd3_std2_SIMS) / (np.sqrt(df_std2))
            res_R3_std2 = np.asarray(R3_std2) - m_R3_std2
            chi2_R0_std1 = (np.asarray(res_R0_std1) / np.asarray(error0_std1)) ** 2
            chi2_R0_std2 = (np.asarray(res_R0_std2) / np.asarray(error0_std2)) ** 2
            chi2_R1_std1 = (np.asarray(res_R1_std1) / np.asarray(error1_std1)) ** 2
            chi2_R1_std2 = (np.asarray(res_R1_std2) / np.asarray(error1_std2)) ** 2
            chi2_R2_std1 = (np.asarray(res_R2_std1) / np.asarray(error2_std1)) ** 2
            chi2_R2_std2 = (np.asarray(res_R2_std2) / np.asarray(error2_std2)) ** 2
            chi2_R3_std1 = (np.asarray(res_R3_std1) / np.asarray(error3_std1)) ** 2
            chi2_R3_std2 = (np.asarray(res_R3_std2) / np.asarray(error3_std2)) ** 2
            MSWD_R0_std1 = sum(chi2_R0_std1) / df_std1
            MSWD_R0_std2 = sum(chi2_R0_std2) / df_std2
            MSWD_R1_std1 = sum(chi2_R1_std1) / df_std1
            MSWD_R1_std2 = sum(chi2_R1_std2) / df_std2
            MSWD_R2_std1 = sum(chi2_R2_std1) / df_std1
            MSWD_R2_std2 = sum(chi2_R2_std2) / df_std2
            MSWD_R3_std1 = sum(chi2_R3_std1) / df_std1
            MSWD_R3_std2 = sum(chi2_R3_std2) / df_std2
            df_tot_std = df_std1 + df_std2
            r_tot_R0_std = np.vstack((np.asarray(res_R0_std1).reshape(len(res_R0_std1),1), np.asarray(res_R0_std2).reshape(len(res_R0_std2),1)))
            error_tot_R0_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            chi2_tot_R0_std = (np.asarray(r_tot_R0_std) / np.asarray(error_tot_R0_std)) ** 2
            MSWD_R0_tot = sum(chi2_tot_R0_std) / df_tot_std
            r_tot_R1_std = np.vstack((np.asarray(res_R1_std1).reshape(len(res_R1_std1),1), np.asarray(res_R1_std2).reshape(len(res_R1_std2),1)))
            error_tot_R1_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1)))
            chi2_tot_R1_std = (np.asarray(r_tot_R1_std) / np.asarray(error_tot_R1_std)) ** 2
            MSWD_R1_tot = sum(chi2_tot_R1_std) / df_tot_std
            r_tot_R2_std = np.vstack((np.asarray(res_R2_std1).reshape(len(res_R2_std1),1), np.asarray(res_R2_std2).reshape(len(res_R2_std2),1)))
            error_tot_R2_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1)))
            chi2_tot_R2_std = (np.asarray(r_tot_R2_std) / np.asarray(error_tot_R2_std)) ** 2
            MSWD_R2_tot = sum(chi2_tot_R2_std) / df_tot_std
            r_tot_R3_std = np.vstack((np.asarray(res_R3_std1).reshape(len(res_R3_std1),1), np.asarray(res_R3_std2).reshape(len(res_R3_std2),1)))
            error_tot_R3_std = np.vstack((np.asarray(error3_std1).reshape(len(error2_std1),1), np.asarray(error3_std2).reshape(len(error3_std2),1)))
            chi2_tot_R3_std = (np.asarray(r_tot_R3_std) / np.asarray(error_tot_R3_std)) ** 2
            MSWD_R3_tot = sum(chi2_tot_R3_std) / df_tot_std
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
            df_std1 = len(R0_corr_std1) - (1 + drift_order_conc_value)
            m_R0_std1 = np.mean(np.asarray(R0_corr_std1))
            sd0_std1_SIMS = np.std(np.asarray(R0_corr_std1))
            se0_std1_SIMS = np.asarray(sd0_std1_SIMS) / (np.sqrt(df_std1))
            df_std2 = len(R0_std2) - (1 + drift_order_conc_value)
            m_R0_std2 = np.mean(np.asarray(R0_corr_std2))
            sd0_std2_SIMS = np.std(np.asarray(R0_corr_std2))
            se0_std2_SIMS = np.asarray(sd0_std2_SIMS) / (np.sqrt(df_std2))
            m_R1_std1 = np.mean(np.asarray(R1_corr_std1))
            sd1_std1_SIMS = np.std(np.asarray(R1_corr_std1))
            se1_std1_SIMS = np.asarray(sd1_std1_SIMS) / (np.sqrt(df_std1))
            m_R1_std2 = np.mean(np.asarray(R1_corr_std2))
            sd1_std2_SIMS = np.std(np.asarray(R1_corr_std2))
            se1_std2_SIMS = np.asarray(sd1_std2_SIMS) / (np.sqrt(df_std2))
            m_R2_std1 = np.mean(np.asarray(R2_corr_std1))
            sd2_std1_SIMS = np.std(np.asarray(R2_corr_std1))
            se2_std1_SIMS = np.asarray(sd2_std1_SIMS) / (np.sqrt(df_std1))
            m_R2_std2 = np.mean(np.asarray(R2_corr_std2))
            sd2_std2_SIMS = np.std(np.asarray(R2_corr_std2))
            se2_std2_SIMS = np.asarray(sd2_std2_SIMS) / (np.sqrt(df_std2))
            m_R3_std1 = np.mean(np.asarray(R3_corr_std1))
            sd3_std1_SIMS = np.std(np.asarray(R3_corr_std1))
            se3_std1_SIMS = np.asarray(sd3_std1_SIMS) / (np.sqrt(df_std1))
            m_R3_std2 = np.mean(np.asarray(R3_corr_std2))
            sd3_std2_SIMS = np.std(np.asarray(R3_corr_std2))
            se3_std2_SIMS = np.asarray(sd3_std2_SIMS) / (np.sqrt(df_std2))
            chi2_R0_std1 = (np.asarray(r_R0_std1) / np.asarray(error0_std1)) ** 2
            chi2_R0_std2 = (np.asarray(r_R0_std2) / np.asarray(error0_std2)) ** 2
            chi2_R1_std1 = (np.asarray(r_R1_std1) / np.asarray(error1_std1)) ** 2
            chi2_R1_std2 = (np.asarray(r_R1_std2) / np.asarray(error1_std2)) ** 2
            chi2_R2_std1 = (np.asarray(r_R2_std1) / np.asarray(error2_std1)) ** 2
            chi2_R2_std2 = (np.asarray(r_R2_std2) / np.asarray(error2_std2)) ** 2
            chi2_R3_std1 = (np.asarray(r_R3_std1) / np.asarray(error3_std1)) ** 2
            chi2_R3_std2 = (np.asarray(r_R3_std2) / np.asarray(error3_std2)) ** 2
            MSWD_R0_std1 = sum(chi2_R0_std1) / df_std1
            MSWD_R0_std2 = sum(chi2_R0_std2) / df_std2
            MSWD_R1_std1 = sum(chi2_R1_std1) / df_std1
            MSWD_R1_std2 = sum(chi2_R1_std2) / df_std2
            MSWD_R2_std1 = sum(chi2_R2_std1) / df_std1
            MSWD_R2_std2 = sum(chi2_R2_std2) / df_std2
            MSWD_R3_std1 = sum(chi2_R3_std1) / df_std1
            MSWD_R3_std2 = sum(chi2_R3_std2) / df_std2
            df_tot_std = df_std1 + df_std2
            r_tot_R0_std = np.vstack((np.asarray(r_R0_std1).reshape(len(r_R0_std1),1), np.asarray(r_R0_std2).reshape(len(r_R0_std2),1)))
            error_tot_R0_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            chi2_tot_R0_std = (np.asarray(r_tot_R0_std) / np.asarray(error_tot_R0_std)) ** 2
            MSWD_R0_tot = sum(chi2_tot_R0_std) / df_tot_std
            r_tot_R1_std = np.vstack((np.asarray(r_R1_std1).reshape(len(r_R1_std1),1), np.asarray(r_R1_std2).reshape(len(r_R1_std2),1)))
            error_tot_R1_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1)))
            chi2_tot_R1_std = (np.asarray(r_tot_R1_std) / np.asarray(error_tot_R1_std)) ** 2
            MSWD_R1_tot = sum(chi2_tot_R1_std) / df_tot_std
            r_tot_R2_std = np.vstack((np.asarray(r_R2_std1).reshape(len(r_R2_std1),1), np.asarray(r_R2_std2).reshape(len(r_R2_std2),1)))
            error_tot_R2_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1)))
            chi2_tot_R2_std = (np.asarray(r_tot_R2_std) / np.asarray(error_tot_R2_std)) ** 2
            MSWD_R2_tot = sum(chi2_tot_R2_std) / df_tot_std
            r_tot_R3_std = np.vstack((np.asarray(r_R3_std1).reshape(len(r_R3_std1),1), np.asarray(r_R3_std2).reshape(len(r_R3_std2),1)))
            error_tot_R3_std = np.vstack((np.asarray(error3_std1).reshape(len(error3_std1),1), np.asarray(error3_std2).reshape(len(error3_std2),1)))
            chi2_tot_R3_std = (np.asarray(r_tot_R3_std) / np.asarray(error_tot_R3_std)) ** 2
            MSWD_R3_tot = sum(chi2_tot_R3_std) / df_tot_std
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 3 and drift_order_conc_value == 0:
            df_std1 = len(R0_std1) - (1 + drift_order_conc_value)
            m_R0_std1 = np.mean(np.asarray(R0_std1))
            sd0_std1_SIMS = np.std(np.asarray(R0_std1))
            se0_std1_SIMS = np.asarray(sd0_std1_SIMS) / (np.sqrt(df_std1))
            res_R0_std1 = np.asarray(R0_std1) - m_R0_std1
            df_std2 = len(R0_std2) - (1 + drift_order_conc_value)
            m_R0_std2 = np.mean(np.asarray(R0_std2))
            sd0_std2_SIMS = np.std(np.asarray(R0_std2))
            se0_std2_SIMS = np.asarray(sd0_std2_SIMS) / (np.sqrt(df_std2))
            res_R0_std2 = np.asarray(R0_std2) - m_R0_std2
            df_std3 = len(R0_std3) - (1 + drift_order_conc_value)
            m_R0_std3 = np.mean(np.asarray(R0_std3))
            sd0_std3_SIMS = np.std(np.asarray(R0_std3))
            se0_std3_SIMS = np.asarray(sd0_std3_SIMS) / (np.sqrt(df_std3))
            res_R0_std3 = np.asarray(R0_std3) - m_R0_std3
            m_R1_std1 = np.mean(np.asarray(R1_std1))
            sd1_std1_SIMS = np.std(np.asarray(R1_std1))
            se1_std1_SIMS = np.asarray(sd1_std1_SIMS) / (np.sqrt(df_std1))
            res_R1_std1 = np.asarray(R1_std1) - m_R1_std1
            m_R1_std2 = np.mean(np.asarray(R1_std2))
            sd1_std2_SIMS = np.std(np.asarray(R1_std2))
            se1_std2_SIMS = np.asarray(sd1_std2_SIMS) / (np.sqrt(df_std2))
            res_R1_std2 = np.asarray(R1_std2) - m_R1_std2
            m_R1_std3 = np.mean(np.asarray(R1_std3))
            sd1_std3_SIMS = np.std(np.asarray(R1_std3))
            se1_std3_SIMS = np.asarray(sd1_std3_SIMS) / (np.sqrt(df_std3))
            res_R1_std3 = np.asarray(R1_std3) - m_R1_std3
            m_R2_std1 = np.mean(np.asarray(R2_std1))
            sd2_std1_SIMS = np.std(np.asarray(R2_std1))
            se2_std1_SIMS = np.asarray(sd2_std1_SIMS) / (np.sqrt(df_std1))
            res_R2_std1 = np.asarray(R2_std1) - m_R2_std1
            m_R2_std2 = np.mean(np.asarray(R2_std2))
            sd2_std2_SIMS = np.std(np.asarray(R2_std2))
            se2_std2_SIMS = np.asarray(sd2_std2_SIMS) / (np.sqrt(df_std2))
            res_R2_std2 = np.asarray(R2_std2) - m_R2_std2
            m_R2_std3 = np.mean(np.asarray(R2_std3))
            sd2_std3_SIMS = np.std(np.asarray(R2_std3))
            se2_std3_SIMS = np.asarray(sd2_std3_SIMS) / (np.sqrt(df_std3))
            res_R2_std3 = np.asarray(R2_std3) - m_R2_std3
            m_R3_std1 = np.mean(np.asarray(R3_std1))
            sd3_std1_SIMS = np.std(np.asarray(R3_std1))
            se3_std1_SIMS = np.asarray(sd3_std1_SIMS) / (np.sqrt(df_std1))
            res_R3_std1 = np.asarray(R3_std1) - m_R3_std1
            m_R3_std2 = np.mean(np.asarray(R3_std2))
            sd3_std2_SIMS = np.std(np.asarray(R3_std2))
            se3_std2_SIMS = np.asarray(sd3_std2_SIMS) / (np.sqrt(df_std2))
            res_R3_std2 = np.asarray(R3_std2) - m_R3_std2
            m_R3_std3 = np.mean(np.asarray(R3_std3))
            sd3_std3_SIMS = np.std(np.asarray(R3_std3))
            se3_std3_SIMS = np.asarray(sd3_std3_SIMS) / (np.sqrt(df_std3))
            res_R3_std3 = np.asarray(R3_std3) - m_R3_std3
            chi2_R0_std1 = (np.asarray(res_R0_std1) / np.asarray(error0_std1)) ** 2
            chi2_R0_std2 = (np.asarray(res_R0_std2) / np.asarray(error0_std2)) ** 2
            chi2_R0_std3 = (np.asarray(res_R0_std3) / np.asarray(error0_std3)) ** 2
            chi2_R1_std1 = (np.asarray(res_R1_std1) / np.asarray(error1_std1)) ** 2
            chi2_R1_std2 = (np.asarray(res_R1_std2) / np.asarray(error1_std2)) ** 2
            chi2_R1_std3 = (np.asarray(res_R1_std3) / np.asarray(error1_std3)) ** 2
            chi2_R2_std1 = (np.asarray(res_R2_std1) / np.asarray(error2_std1)) ** 2
            chi2_R2_std2 = (np.asarray(res_R2_std2) / np.asarray(error2_std2)) ** 2
            chi2_R2_std3 = (np.asarray(res_R2_std3) / np.asarray(error2_std3)) ** 2
            chi2_R3_std1 = (np.asarray(res_R3_std1) / np.asarray(error3_std1)) ** 2
            chi2_R3_std2 = (np.asarray(res_R3_std2) / np.asarray(error3_std2)) ** 2
            chi2_R3_std3 = (np.asarray(res_R3_std3) / np.asarray(error3_std3)) ** 2
            MSWD_R0_std1 = sum(chi2_R0_std1) / df_std1
            MSWD_R0_std2 = sum(chi2_R0_std2) / df_std2
            MSWD_R0_std3 = sum(chi2_R0_std3) / df_std3
            MSWD_R1_std1 = sum(chi2_R1_std1) / df_std1
            MSWD_R1_std2 = sum(chi2_R1_std2) / df_std2
            MSWD_R1_std3 = sum(chi2_R1_std3) / df_std3
            MSWD_R2_std1 = sum(chi2_R2_std1) / df_std1
            MSWD_R2_std2 = sum(chi2_R2_std2) / df_std2
            MSWD_R2_std3 = sum(chi2_R2_std3) / df_std3
            MSWD_R3_std1 = sum(chi2_R3_std1) / df_std1
            MSWD_R3_std2 = sum(chi2_R3_std2) / df_std2
            MSWD_R3_std3 = sum(chi2_R3_std3) / df_std3
            df_tot_std = df_std1 + df_std2 + df_std3
            r_tot_R0_std = np.vstack((np.asarray(res_R0_std1).reshape(len(res_R0_std1),1), np.asarray(res_R0_std2).reshape(len(res_R0_std2),1), np.asarray(res_R0_std3).reshape(len(res_R0_std3),1)))
            error_tot_R0_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            chi2_tot_R0_std = (np.asarray(r_tot_R0_std) / np.asarray(error_tot_R0_std)) ** 2
            MSWD_R0_tot = sum(chi2_tot_R0_std) / df_tot_std
            r_tot_R1_std = np.vstack((np.asarray(res_R1_std1).reshape(len(res_R1_std1),1), np.asarray(res_R1_std2).reshape(len(res_R1_std2),1), np.asarray(res_R1_std3).reshape(len(res_R1_std3),1)))
            error_tot_R1_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1), np.asarray(error1_std3).reshape(len(error1_std3),1)))
            chi2_tot_R1_std = (np.asarray(r_tot_R1_std) / np.asarray(error_tot_R1_std)) ** 2
            MSWD_R1_tot = sum(chi2_tot_R1_std) / df_tot_std
            r_tot_R2_std = np.vstack((np.asarray(res_R2_std1).reshape(len(res_R2_std1),1), np.asarray(res_R2_std2).reshape(len(res_R2_std2),1), np.asarray(res_R2_std3).reshape(len(res_R2_std3),1)))
            error_tot_R2_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1), np.asarray(error2_std3).reshape(len(error2_std3),1)))
            chi2_tot_R2_std = (np.asarray(r_tot_R2_std) / np.asarray(error_tot_R2_std)) ** 2
            MSWD_R2_tot = sum(chi2_tot_R2_std) / df_tot_std
            r_tot_R3_std = np.vstack((np.asarray(res_R3_std1).reshape(len(res_R3_std1),1), np.asarray(res_R3_std2).reshape(len(res_R3_std2),1), np.asarray(res_R3_std3).reshape(len(res_R3_std3),1)))
            error_tot_R3_std = np.vstack((np.asarray(error3_std1).reshape(len(error3_std1),1), np.asarray(error3_std2).reshape(len(error3_std2),1), np.asarray(error3_std3).reshape(len(error3_std3),1)))
            chi2_tot_R3_std = (np.asarray(r_tot_R3_std) / np.asarray(error_tot_R3_std)) ** 2
            MSWD_R3_tot = sum(chi2_tot_R3_std) / df_tot_std
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
            df_std1 = len(R0_std1) - (1 + drift_order_conc_value)
            m_R0_std1 = np.mean(np.asarray(R0_corr_std1))
            sd0_std1_SIMS = np.std(np.asarray(R0_corr_std1))
            se0_std1_SIMS = np.asarray(sd0_std1_SIMS) / (np.sqrt(df_std1))
            df_std2 = len(R0_std2) - (1 + drift_order_conc_value)
            m_R0_std2 = np.mean(np.asarray(R0_corr_std2))
            sd0_std2_SIMS = np.std(np.asarray(R0_corr_std2))
            se0_std2_SIMS = np.asarray(sd0_std2_SIMS) / (np.sqrt(df_std2))
            df_std3 = len(R0_std3) - (1 + drift_order_conc_value)
            m_R0_std3 = np.mean(np.asarray(R0_corr_std3))
            sd0_std3_SIMS = np.std(np.asarray(R0_corr_std3))
            se0_std3_SIMS = np.asarray(sd0_std3_SIMS) / (np.sqrt(df_std3))
            m_R1_std1 = np.mean(np.asarray(R1_corr_std1))
            sd1_std1_SIMS = np.std(np.asarray(R1_corr_std1))
            se1_std1_SIMS = np.asarray(sd1_std1_SIMS) / (np.sqrt(df_std1))
            m_R1_std2 = np.mean(np.asarray(R1_corr_std2))
            sd1_std2_SIMS = np.std(np.asarray(R1_corr_std2))
            se1_std2_SIMS = np.asarray(sd1_std2_SIMS) / (np.sqrt(df_std2))
            m_R1_std3 = np.mean(np.asarray(R1_corr_std3))
            sd1_std3_SIMS = np.std(np.asarray(R1_corr_std3))
            se1_std3_SIMS = np.asarray(sd1_std3_SIMS) / (np.sqrt(df_std3))
            m_R2_std1 = np.mean(np.asarray(R2_corr_std1))
            sd2_std1_SIMS = np.std(np.asarray(R2_corr_std1))
            se2_std1_SIMS = np.asarray(sd2_std1_SIMS) / (np.sqrt(df_std1))
            m_R2_std2 = np.mean(np.asarray(R2_corr_std2))
            sd2_std2_SIMS = np.std(np.asarray(R2_corr_std2))
            se2_std2_SIMS = np.asarray(sd2_std2_SIMS) / (np.sqrt(df_std2))
            m_R2_std3 = np.mean(np.asarray(R2_corr_std3))
            sd2_std3_SIMS = np.std(np.asarray(R2_corr_std3))
            se2_std3_SIMS = np.asarray(sd2_std3_SIMS) / (np.sqrt(df_std3))
            m_R3_std1 = np.mean(np.asarray(R3_corr_std1))
            sd3_std1_SIMS = np.std(np.asarray(R3_corr_std1))
            se3_std1_SIMS = np.asarray(sd3_std1_SIMS) / (np.sqrt(df_std1))
            m_R3_std2 = np.mean(np.asarray(R3_corr_std2))
            sd3_std2_SIMS = np.std(np.asarray(R3_corr_std2))
            se3_std2_SIMS = np.asarray(sd3_std2_SIMS) / (np.sqrt(df_std2))
            m_R3_std3 = np.mean(np.asarray(R3_corr_std3))
            sd3_std3_SIMS = np.std(np.asarray(R3_corr_std3))
            se3_std3_SIMS = np.asarray(sd3_std3_SIMS) / (np.sqrt(df_std3))
            chi2_R0_std1 = (np.asarray(r_R0_std1) / np.asarray(error0_std1)) ** 2
            chi2_R0_std2 = (np.asarray(r_R0_std2) / np.asarray(error0_std2)) ** 2
            chi2_R0_std3 = (np.asarray(r_R0_std3) / np.asarray(error0_std3)) ** 2
            chi2_R1_std1 = (np.asarray(r_R1_std1) / np.asarray(error1_std1)) ** 2
            chi2_R1_std2 = (np.asarray(r_R1_std2) / np.asarray(error1_std2)) ** 2
            chi2_R1_std3 = (np.asarray(r_R1_std3) / np.asarray(error1_std3)) ** 2
            chi2_R2_std1 = (np.asarray(r_R2_std1) / np.asarray(error2_std1)) ** 2
            chi2_R2_std2 = (np.asarray(r_R2_std2) / np.asarray(error2_std2)) ** 2
            chi2_R2_std3 = (np.asarray(r_R2_std3) / np.asarray(error2_std3)) ** 2
            MSWD_R0_std1 = sum(chi2_R0_std1) / df_std1
            MSWD_R0_std2 = sum(chi2_R0_std2) / df_std2
            MSWD_R0_std3 = sum(chi2_R0_std3) / df_std3
            MSWD_R1_std1 = sum(chi2_R1_std1) / df_std1
            MSWD_R1_std2 = sum(chi2_R1_std2) / df_std2
            MSWD_R1_std3 = sum(chi2_R1_std3) / df_std3
            MSWD_R2_std1 = sum(chi2_R2_std1) / df_std1
            MSWD_R2_std2 = sum(chi2_R2_std2) / df_std2
            MSWD_R2_std3 = sum(chi2_R2_std3) / df_std3
            df_tot_std = df_std1 + df_std2 + df_std3
            r_tot_R0_std = np.vstack((np.asarray(r_R0_std1).reshape(len(r_R0_std1),1), np.asarray(r_R0_std2).reshape(len(r_R0_std2),1), np.asarray(r_R0_std3).reshape(len(r_R0_std3),1)))
            error_tot_R0_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            chi2_tot_R0_std = (np.asarray(r_tot_R0_std) / np.asarray(error_tot_R0_std)) ** 2
            MSWD_R0_tot = sum(chi2_tot_R0_std) / df_tot_std
            r_tot_R1_std = np.vstack((np.asarray(r_R1_std1).reshape(len(r_R1_std1),1), np.asarray(r_R1_std2).reshape(len(r_R1_std2),1), np.asarray(r_R1_std3).reshape(len(r_R1_std3),1)))
            error_tot_R1_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1), np.asarray(error1_std3).reshape(len(error1_std3),1)))
            chi2_tot_R1_std = (np.asarray(r_tot_R1_std) / np.asarray(error_tot_R1_std)) ** 2
            MSWD_R1_tot = sum(chi2_tot_R1_std) / df_tot_std
            r_tot_R2_std = np.vstack((np.asarray(r_R2_std1).reshape(len(r_R2_std1),1), np.asarray(r_R2_std2).reshape(len(r_R2_std2),1), np.asarray(r_R2_std3).reshape(len(r_R2_std3),1)))
            error_tot_R2_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1), np.asarray(error2_std3).reshape(len(error2_std3),1)))
            chi2_tot_R2_std = (np.asarray(r_tot_R2_std) / np.asarray(error_tot_R2_std)) ** 2
            MSWD_R2_tot = sum(chi2_tot_R1_std) / df_tot_std
            r_tot_R3_std = np.vstack((np.asarray(r_R3_std1).reshape(len(r_R3_std1),1), np.asarray(r_R3_std2).reshape(len(r_R3_std2),1), np.asarray(r_R3_std3).reshape(len(r_R3_std3),1)))
            error_tot_R3_std = np.vstack((np.asarray(error3_std1).reshape(len(error3_std1),1), np.asarray(error3_std2).reshape(len(error3_std2),1), np.asarray(error3_std3).reshape(len(error3_std3),1)))
            chi2_tot_R3_std = (np.asarray(r_tot_R3_std) / np.asarray(error_tot_R3_std)) ** 2
            MSWD_R3_tot = sum(chi2_tot_R3_std) / df_tot_std


    def plot_iso(self):
        if name:
            self.import_data()
            if nb_std_iso_value == 1 and drift_order_iso_value == 0:
                self.dpi = 100
                self.fig = plt.Figure((12.0, 9.0), dpi=self.dpi)
                self.canvas = FigureCanvas(self.fig)
                self.canvas.setParent(self.main_frame)
                ax = self.fig.add_subplot(111)
                ax.errorbar(Time_std,delta_std, yerr=error0_std, fmt='ko', ecolor='k', capthick=2)
                ax.set_xlabel('Time (h)')
                if Isotopic_system_value == 1:
                    ax.set_ylabel(r"$\delta D_{RAW}$ (permil)")
                elif Isotopic_system_value == 2:
                    ax.set_ylabel(r"$\delta^{7}Li_{RAW}$ (permil)")
                elif Isotopic_system_value == 3:
                    ax.set_ylabel(r"$\delta^{11}B_{RAW}$ (permil)")
                elif Isotopic_system_value == 4:
                    ax.set_ylabel(r"$\delta^{13}C_{RAW}$ (permil)")
                elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                    ax.set_ylabel(r"$\delta^{18}O_{RAW}$ (permil)")
                elif Isotopic_system_value == 7:
                    ax.set_ylabel(r"$\delta^{37}Cl_{RAW}$ (permil)")
                elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                    ax.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
            elif nb_std_iso_value == 2 and drift_order_iso_value == 0:
                self.dpi = 100
                self.fig = plt.Figure((12.0, 9.0), dpi=self.dpi)
                self.canvas = FigureCanvas(self.fig)
                self.canvas.setParent(self.main_frame)
                ax = self.fig.add_subplot(111)
                ax.errorbar(Time_std1,delta_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax.errorbar(Time_std2,delta_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax.set_xlabel('Time (h)')
                if Isotopic_system_value == 1:
                    ax.set_ylabel(r"$\delta D_{RAW}$ (permil)")
                elif Isotopic_system_value == 2:
                    ax.set_ylabel(r"$\delta^{7}Li_{RAW}$ (permil)")
                elif Isotopic_system_value == 3:
                    ax.set_ylabel(r"$\delta^{11}B_{RAW}$ (permil)")
                elif Isotopic_system_value == 4:
                    ax.set_ylabel(r"$\delta^{13}C_{RAW}$ (permil)")
                elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                    ax.set_ylabel(r"$\delta^{18}O_{RAW}$ (permil)")
                elif Isotopic_system_value == 7:
                    ax.set_ylabel(r"$\delta^{37}Cl_{RAW}$ (permil)")
                elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                    ax.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
            elif nb_std_iso_value == 3 and drift_order_iso_value == 0:
                self.dpi = 100
                self.fig = plt.Figure((12.0, 9.0), dpi=self.dpi)
                self.canvas = FigureCanvas(self.fig)
                self.canvas.setParent(self.main_frame)
                ax = self.fig.add_subplot(111)
                ax.errorbar(Time_std1,delta_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax.errorbar(Time_std2,delta_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax.errorbar(Time_std3,delta_std3, yerr=error0_std3, fmt='ks', ecolor='k', capthick=2)
                ax.set_xlabel('Time (h)')
                if Isotopic_system_value == 1:
                    ax.set_ylabel(r"$\delta D_{RAW}$ (permil)")
                elif Isotopic_system_value == 2:
                    ax.set_ylabel(r"$\delta^{7}Li_{RAW}$ (permil)")
                elif Isotopic_system_value == 3:
                    ax.set_ylabel(r"$\delta^{11}B_{RAW}$ (permil)")
                elif Isotopic_system_value == 4:
                    ax.set_ylabel(r"$\delta^{13}C_{RAW}$ (permil)")
                elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                    ax.set_ylabel(r"$\delta^{18}O_{RAW}$ (permil)")
                elif Isotopic_system_value == 7:
                    ax.set_ylabel(r"$\delta^{37}Cl_{RAW}$ (permil)")
                elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                    ax.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
            elif nb_std_iso_value == 1 and drift_order_iso_value >= 1:
                self.dpi = 100
                self.fig = plt.Figure((12.0, 9.0), dpi=self.dpi)
                self.canvas = FigureCanvas(self.fig)
                self.canvas.setParent(self.main_frame)
                gs = GridSpec(3, 3)
                ax1 = self.fig.add_subplot(gs[:-1, :])
                ax1.errorbar(Time_std,delta_std, yerr=error0_std, fmt='ko', ecolor='k', capthick=2)
                ax1.plot(x, fit_std, 'k--', linewidth=1)
                ax1.plot(Time_std, interval_u, 'k-.', linewidth=1)
                ax1.plot(Time_std, interval_l, 'k-.', linewidth=1)
                # ax1.plot(Time_std, interval_u_fit, 'k:', linewidth=1)
                # ax1.plot(Time_std, interval_l_fit, 'k:', linewidth=1)
                if Isotopic_system_value == 1:
                    ax1.set_ylabel(r"$\delta D_{RAW}$ (permil)")
                elif Isotopic_system_value == 2:
                    ax1.set_ylabel(r"$\delta^{7}Li_{RAW}$ (permil)")
                elif Isotopic_system_value == 3:
                    ax1.set_ylabel(r"$\delta^{11}B_{RAW}$ (permil)")
                elif Isotopic_system_value == 4:
                    ax1.set_ylabel(r"$\delta^{13}C_{RAW}$ (permil)")
                elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                    ax1.set_ylabel(r"$\delta^{18}O_{RAW}$ (permil)")
                elif Isotopic_system_value == 7:
                    ax1.set_ylabel(r"$\delta^{37}Cl_{RAW}$ (permil)")
                elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                    ax1.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
                ax2 = self.fig.add_subplot(gs[-1, :], sharex=ax1)
                ax2.errorbar(Time_std,r_std, yerr=error0_std, fmt='ko', ecolor='k', capthick=2)
                ax2.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
                ax2.plot(Time_std, interval_u_fit, 'k:', linewidth=0.3)
                ax2.plot(Time_std, interval_l_fit, 'k:', linewidth=0.3)
                ax2.set_xlabel('Time (h)')
                ax2.set_ylabel('Residuals (permil)')
                self.fig.subplots_adjust(0.06, 0.1, 0.97, 0.95)
            elif nb_std_iso_value == 2 and drift_order_iso_value >= 1:
                self.dpi = 100
                self.fig = plt.Figure((12.0, 9.0), dpi=self.dpi)
                self.canvas = FigureCanvas(self.fig)
                self.canvas.setParent(self.main_frame)
                gs = GridSpec(3, 3)
                ax1 = self.fig.add_subplot(gs[:-1, :])
                ax1.errorbar(Time_std1,delta_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax1.errorbar(Time_std2,delta_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax1.plot(x, fit_std1, 'k--', linewidth=1)
                ax1.plot(x, fit_std2, 'k--', linewidth=1)
                ax1.plot(Time_std1, interval_u_std1, 'k-.', linewidth=1)
                ax1.plot(Time_std1, interval_l_std1, 'k-.', linewidth=1)
                ax1.plot(Time_std2, interval_u_std2, 'k-.', linewidth=1)
                ax1.plot(Time_std2, interval_l_std2, 'k-.', linewidth=1)
                # ax1.plot(Time_std1, interval_u_fit_std1, 'k:', linewidth=1)
                # ax1.plot(Time_std1, interval_l_fit_std1, 'k:', linewidth=1)
                # ax1.plot(Time_std2, interval_u_fit_std2, 'k:', linewidth=1)
                # ax1.plot(Time_std2, interval_l_fit_std2, 'k:', linewidth=1)
                if Isotopic_system_value == 1:
                    ax1.set_ylabel(r"$\delta D_{RAW}$ (permil)")
                elif Isotopic_system_value == 2:
                    ax1.set_ylabel(r"$\delta^{7}Li_{RAW}$ (permil)")
                elif Isotopic_system_value == 3:
                    ax1.set_ylabel(r"$\delta^{11}B_{RAW}$ (permil)")
                elif Isotopic_system_value == 4:
                    ax1.set_ylabel(r"$\delta^{13}C_{RAW}$ (permil)")
                elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                    ax1.set_ylabel(r"$\delta^{18}O_{RAW}$ (permil)")
                elif Isotopic_system_value == 7:
                    ax1.set_ylabel(r"$\delta^{37}Cl_{RAW}$ (permil)")
                elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                    ax1.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
                ax2 = self.fig.add_subplot(gs[-1, :], sharex=ax1)
                ax2.errorbar(Time_std1,r_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax2.errorbar(Time_std2,r_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1)))
                ax2.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
                ax2.set_xlabel('Time (h)')
                ax2.set_ylabel('Residuals (permil)')
                self.fig.subplots_adjust(0.06, 0.1, 0.97, 0.95)
            elif nb_std_iso_value == 3 and drift_order_iso_value >= 1:
                self.dpi = 100
                self.fig = plt.Figure((12.0, 9.0), dpi=self.dpi)
                self.canvas = FigureCanvas(self.fig)
                self.canvas.setParent(self.main_frame)
                gs = GridSpec(3, 3)
                ax1 = self.fig.add_subplot(gs[:-1, :])
                ax1.errorbar(Time_std1,delta_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax1.errorbar(Time_std2,delta_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax1.errorbar(Time_std3,delta_std3, yerr=error0_std3, fmt='ks', ecolor='k', capthick=2)
                ax1.plot(x, fit_std1, 'k--', linewidth=1)
                ax1.plot(x, fit_std2, 'k--', linewidth=1)
                ax1.plot(x, fit_std3, 'k--', linewidth=1)
                ax1.plot(Time_std1, interval_u_std1, 'k-.', linewidth=1)
                ax1.plot(Time_std1, interval_l_std1, 'k-.', linewidth=1)
                ax1.plot(Time_std2, interval_u_std2, 'k-.', linewidth=1)
                ax1.plot(Time_std2, interval_l_std2, 'k-.', linewidth=1)
                ax1.plot(Time_std3, interval_u_std3, 'k-.', linewidth=1)
                ax1.plot(Time_std3, interval_l_std3, 'k-.', linewidth=1)
                # ax1.plot(Time_std1, interval_u_fit_std1, 'k:', linewidth=1)
                # ax1.plot(Time_std1, interval_l_fit_std1, 'k:', linewidth=1)
                # ax1.plot(Time_std2, interval_u_fit_std2, 'k:', linewidth=1)
                # ax1.plot(Time_std2, interval_l_fit_std2, 'k:', linewidth=1)
                # ax1.plot(Time_std3, interval_u_fit_std3, 'k:', linewidth=1)
                # ax1.plot(Time_std3, interval_l_fit_std3, 'k:', linewidth=1)
                if Isotopic_system_value == 1:
                    ax1.set_ylabel(r"$\delta D_{RAW}$ (permil)")
                elif Isotopic_system_value == 2:
                    ax1.set_ylabel(r"$\delta^{7}Li_{RAW}$ (permil)")
                elif Isotopic_system_value == 3:
                    ax1.set_ylabel(r"$\delta^{11}B_{RAW}$ (permil)")
                elif Isotopic_system_value == 4:
                    ax1.set_ylabel(r"$\delta^{13}C_{RAW}$ (permil)")
                elif Isotopic_system_value == 5 or Isotopic_system_value == 6:
                    ax1.set_ylabel(r"$\delta^{18}O_{RAW}$ (permil)")
                elif Isotopic_system_value == 7:
                    ax1.set_ylabel(r"$\delta^{37}Cl_{RAW}$ (permil)")
                elif Isotopic_system_value == 8 or Isotopic_system_value == 9:
                    ax1.set_ylabel(r"$\Delta^{26}Mg_{corr}$ (permil)")
                ax2 = self.fig.add_subplot(gs[-1, :], sharex=ax1)
                ax2.errorbar(Time_std1,r_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax2.errorbar(Time_std2,r_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax2.errorbar(Time_std3,r_std3, yerr=error0_std3, fmt='ks', ecolor='k', capthick=2)
                Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
                ax2.plot(x, np.zeros((len(x), 1)), 'k--', linewidth=2)
                ax2.set_xlabel('Time (h)')
                ax2.set_ylabel('Residuals (permil)')
                self.fig.subplots_adjust(0.06, 0.1, 0.97, 0.95)
            self.canvas.show()
 
            
    def plot_conc(self):
        if name:
            self.import_data()
            self.dpi = 100
            self.fig = plt.Figure((12.0, 9.0), dpi=self.dpi)
            self.canvas = FigureCanvas(self.fig)
            self.canvas.setParent(self.main_frame)
            if nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and drift_order_conc_value == 0:
                ax = self.fig.add_subplot(111)
                ax.errorbar(Time_std,R0_std, yerr=error0_std, fmt='ko', ecolor='k', capthick=2)
                ax.set_xlabel('Time(h)')
                ax.set_ylabel('R0')
            elif nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and drift_order_conc_value >= 1:
                ax = self.fig.add_subplot(111)
                ax.errorbar(Time_std,R0_std, yerr=error0_std, fmt='ko', ecolor='k', capthick=2)
                ax.plot(x, fit_R0_std, 'k--', linewidth=1)
                ax.plot(Time_std, interval_u, 'k-.', linewidth=1)
                ax.plot(Time_std, interval_l, 'k-.', linewidth=1)
                ax.set_xlabel('Time(h)')
                ax.set_ylabel('R0')
            elif nb_ratios_conc_value == 2 and nb_std_conc_value == 1 and drift_order_conc_value == 0:
                ax1 = self.fig.add_subplot(211)
                ax1.errorbar(Time_std,R0_std, yerr=error0_std, fmt='ko', ecolor='k', capthick=2)
                ax1.set_ylabel('R0')
                ax2 = self.fig.add_subplot(212)
                ax2.errorbar(Time_std,R1_std, yerr=error1_std, fmt='ko', ecolor='k', capthick=2)
                ax2.set_xlabel('Time(h)')
                ax2.set_ylabel('R1')
            elif nb_ratios_conc_value == 2 and nb_std_conc_value == 1 and drift_order_conc_value >= 1:
                ax1 = self.fig.add_subplot(211)
                ax1.errorbar(Time_std,R0_std, yerr=error0_std, fmt='ko', ecolor='k', capthick=2)
                ax1.plot(x, fit_R0_std, 'k--', linewidth=1)
                ax1.plot(Time_std, interval_u_R0, 'k-.', linewidth=1)
                ax1.plot(Time_std, interval_l_R0, 'k-.', linewidth=1)
                ax1.set_ylabel('R1')
                ax2 = self.fig.add_subplot(212)
                ax2.errorbar(Time_std,R1_std, yerr=error1_std, fmt='ko', ecolor='k', capthick=2)
                ax2.plot(x, fit_R1_std, 'k--')
                ax2.plot(Time_std, interval_u_R1, 'k-.', linewidth=1)
                ax2.plot(Time_std, interval_l_R1, 'k-.', linewidth=1)
                ax2.set_xlabel('Time(h)')
                ax2.set_ylabel('R1')
            elif nb_ratios_conc_value == 3 and nb_std_conc_value == 1 and drift_order_conc_value == 0:
                ax1 = self.fig.add_subplot(311)
                ax1.errorbar(Time_std,R0_std, yerr=error0_std, fmt='ko', ecolor='k', capthick=2)
                ax1.set_ylabel('R0')
                ax2 = self.fig.add_subplot(312)
                ax2.errorbar(Time_std,R1_std, yerr=error1_std, fmt='ko', ecolor='k', capthick=2)
                ax2.set_ylabel('R1')
                ax3 = self.fig.add_subplot(313)
                ax3.errorbar(Time_std,R2_std, yerr=error0_std, fmt='ko', ecolor='k', capthick=2)
                ax3.set_xlabel('Time(h)')
                ax3.set_ylabel('R2')
            elif nb_ratios_conc_value == 3 and nb_std_conc_value == 1 and drift_order_conc_value >= 1:
                ax1 = self.fig.add_subplot(311)
                ax1.errorbar(Time_std,R0_std, yerr=error0_std, fmt='ko', ecolor='k', capthick=2)
                ax1.plot(x, fit_R0_std, 'k--', linewidth=1)
                ax1.plot(Time_std, interval_u_R0, 'k-.', linewidth=1)
                ax1.plot(Time_std, interval_l_R0, 'k-.', linewidth=1)
                ax1.set_ylabel('R0')
                ax2 = self.fig.add_subplot(312)
                ax2.errorbar(Time_std,R1_std, yerr=error1_std, fmt='ko', ecolor='k', capthick=2)
                ax2.plot(x, fit_R1_std, 'k--', linewidth=1)
                ax2.plot(Time_std, interval_u_R1, 'k-.', linewidth=1)
                ax2.plot(Time_std, interval_l_R1, 'k-.', linewidth=1)
                ax2.set_ylabel('R1')
                ax3 = self.fig.add_subplot(313)
                ax3.errorbar(Time_std,R2_std, yerr=error0_std, fmt='ko', ecolor='k', capthick=2)
                ax3.plot(x, fit_R2_std, 'k--', linewidth=1)
                ax3.plot(Time_std, interval_u_R2, 'k-.', linewidth=1)
                ax3.plot(Time_std, interval_l_R2, 'k-.', linewidth=1)
                ax3.set_xlabel('Time(h)')
                ax3.set_ylabel('R2')
            elif nb_ratios_conc_value == 4 and nb_std_conc_value == 1 and drift_order_conc_value == 0:
                ax1 = self.fig.add_subplot(221)
                ax1.errorbar(Time_std,R0_std, yerr=error0_std, fmt='ko', ecolor='k', capthick=2)
                ax1.set_ylabel('R1')
                ax2 = self.fig.add_subplot(222)
                ax2.errorbar(Time_std,R1_std, yerr=error1_std, fmt='ko', ecolor='k', capthick=2)
                ax2.set_xlabel('Time(h)')
                ax2.set_ylabel('R1')
                ax3 = self.fig.add_subplot(223)
                ax3.errorbar(Time_std,R2_std, yerr=error2_std, fmt='ko', ecolor='k', capthick=2)
                ax3.set_ylabel('R2')
                ax4 = self.fig.add_subplot(224)
                ax4.errorbar(Time_std,R3_std, yerr=error3_std, fmt='ko', ecolor='k', capthick=2)
                ax4.set_xlabel('Time(h)')
                ax4.set_ylabel('R3')
            elif nb_ratios_conc_value == 4 and nb_std_conc_value == 1 and drift_order_conc_value >= 1:
                ax1 = self.fig.add_subplot(221)
                ax1.errorbar(Time_std,R0_std, yerr=error0_std, fmt='ko', ecolor='k', capthick=2)
                ax1.plot(x, fit_R0_std, 'k--', linewidth=1)
                ax1.plot(Time_std, interval_u_R0, 'k-.', linewidth=1)
                ax1.plot(Time_std, interval_l_R0, 'k-.', linewidth=1)
                ax1.set_xlabel('Time(h)')
                ax1.set_ylabel('R1')
                ax2 = self.fig.add_subplot(222)
                ax2.errorbar(Time_std,R1_std, yerr=error1_std, fmt='ko', ecolor='k', capthick=2)
                ax2.plot(x, fit_R1_std, 'k--', linewidth=1)
                ax2.plot(Time_std, interval_u_R1, 'k-.', linewidth=1)
                ax2.plot(Time_std, interval_l_R1, 'k-.', linewidth=1)
                ax2.set_xlabel('Time(h)')
                ax2.set_ylabel('R1')
                ax3 = self.fig.add_subplot(223)
                ax3.errorbar(Time_std,R2_std, yerr=error2_std, fmt='ko', ecolor='k', capthick=2)
                ax3.plot(x, fit_R2_std, 'k--', linewidth=1)
                ax3.plot(Time_std, interval_u_R2, 'k-.', linewidth=1)
                ax3.plot(Time_std, interval_l_R2, 'k-.', linewidth=1)
                ax3.set_ylabel('R2')
                ax4 = self.fig.add_subplot(224)
                ax4.errorbar(Time_std,R3_std, yerr=error3_std, fmt='ko', ecolor='k', capthick=2)
                ax4.plot(x, fit_R3_std, 'k--', linewidth=1)
                ax4.plot(Time_std, interval_u_R3, 'k-.', linewidth=1)
                ax4.plot(Time_std, interval_l_R3, 'k-.', linewidth=1)
                ax4.set_xlabel('Time(h)')
                ax4.set_ylabel('R3')
            elif nb_ratios_conc_value == 1 and nb_std_conc_value == 2 and drift_order_conc_value == 0:
                ax = self.fig.add_subplot(111)
                ax.errorbar(Time_std1,R0_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax.errorbar(Time_std2,R0_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax.set_xlabel('Time(h)')
                ax.set_ylabel('R0')
            elif nb_ratios_conc_value == 1 and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
                ax = self.fig.add_subplot(111)
                ax.errorbar(Time_std1,R0_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax.errorbar(Time_std2,R0_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax.plot(x, fit_R0_std1, 'k--', linewidth=1)
                ax.plot(x, fit_R0_std2, 'k--', linewidth=1)
                ax.plot(Time_std1, interval_R0_u_std1, 'k-.', linewidth=1)
                ax.plot(Time_std1, interval_R0_l_std1, 'k-.', linewidth=1)
                ax.plot(Time_std2, interval_R0_u_std2, 'k-.', linewidth=1)
                ax.plot(Time_std2, interval_R0_l_std2, 'k-.', linewidth=1)
                ax.set_xlabel('Time(h)')
                ax.set_ylabel('R0')
            elif nb_ratios_conc_value == 2 and nb_std_conc_value == 2 and drift_order_conc_value == 0:
                ax1 = self.fig.add_subplot(211)
                ax1.errorbar(Time_std1,R0_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax1.errorbar(Time_std2,R0_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax1.set_ylabel('R0')
                ax2 = self.fig.add_subplot(212)
                ax2.errorbar(Time_std1,R1_std1, yerr=error1_std1, fmt='ko', ecolor='k', capthick=2)
                ax2.errorbar(Time_std2,R1_std2, yerr=error1_std2, fmt='kd', ecolor='k', capthick=2)
                ax2.set_xlabel('Time(h)')
                ax2.set_ylabel('R1')
            elif nb_ratios_conc_value == 2 and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
                ax1 = self.fig.add_subplot(211)
                ax1.errorbar(Time_std1,R0_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax1.errorbar(Time_std2,R0_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax1.plot(x, fit_R0_std1, 'k--', linewidth=1)
                ax1.plot(x, fit_R0_std2, 'k--', linewidth=1)
                ax1.plot(Time_std1, interval_R0_u_std1, 'k-.', linewidth=1)
                ax1.plot(Time_std1, interval_R0_l_std1, 'k-.', linewidth=1)
                ax1.plot(Time_std2, interval_R0_u_std2, 'k-.', linewidth=1)
                ax1.plot(Time_std2, interval_R0_l_std2, 'k-.', linewidth=1)
                ax1.set_ylabel('R1')
                ax2 = self.fig.add_subplot(212)
                ax2.errorbar(Time_std1,R1_std1, yerr=error1_std1, fmt='ko', ecolor='k', capthick=2)
                ax2.errorbar(Time_std2,R1_std2, yerr=error1_std2, fmt='kd', ecolor='k', capthick=2)
                ax2.plot(x, fit_R1_std1, 'k--', linewidth=1)
                ax2.plot(x, fit_R1_std2, 'k--', linewidth=1)
                ax2.plot(Time_std1, interval_R1_u_std1, 'k-.', linewidth=1)
                ax2.plot(Time_std1, interval_R1_l_std1, 'k-.', linewidth=1)
                ax2.plot(Time_std2, interval_R1_u_std2, 'k-.', linewidth=1)
                ax2.plot(Time_std2, interval_R1_l_std2, 'k-.', linewidth=1)
                ax2.set_xlabel('Time(h)')
                ax2.set_ylabel('R1')
            elif nb_ratios_conc_value == 3 and nb_std_conc_value == 2 and drift_order_conc_value == 0:
                ax1 = self.fig.add_subplot(311)
                ax1.errorbar(Time_std1,R0_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax1.errorbar(Time_std2,R0_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax1.set_ylabel('R0')
                ax2 = self.fig.add_subplot(312)
                ax2.errorbar(Time_std1,R1_std1, yerr=error1_std1, fmt='ko', ecolor='k', capthick=2)
                ax2.errorbar(Time_std2,R1_std2, yerr=error1_std2, fmt='kd', ecolor='k', capthick=2)
                ax2.set_ylabel('R1')
                ax3 = self.fig.add_subplot(313)
                ax3.errorbar(Time_std1,R2_std1, yerr=error2_std1, fmt='ko', ecolor='k', capthick=2)
                ax3.errorbar(Time_std2,R2_std2, yerr=error2_std2, fmt='kd', ecolor='k', capthick=2)
                ax3.set_ylabel('R2')
                ax3.set_xlabel('Time(h)')
            elif nb_ratios_conc_value == 3 and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
                ax1 = self.fig.add_subplot(311)
                ax1.errorbar(Time_std1,R0_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax1.errorbar(Time_std2,R0_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax1.plot(x, fit_R0_std1, 'k--', linewidth=1)
                ax1.plot(x, fit_R0_std2, 'k--', linewidth=1)
                ax1.plot(Time_std1, interval_R0_u_std1, 'k-.', linewidth=1)
                ax1.plot(Time_std1, interval_R0_l_std1, 'k-.', linewidth=1)
                ax1.plot(Time_std2, interval_R0_u_std2, 'k-.', linewidth=1)
                ax1.plot(Time_std2, interval_R0_l_std2, 'k-.', linewidth=1)
                ax1.set_ylabel('R1')
                ax2 = self.fig.add_subplot(312)
                ax2.errorbar(Time_std1,R1_std1, yerr=error1_std1, fmt='ko', ecolor='k', capthick=2)
                ax2.errorbar(Time_std2,R1_std2, yerr=error1_std2, fmt='kd', ecolor='k', capthick=2)
                ax2.plot(x, fit_R1_std1, 'k--', linewidth=1)
                ax2.plot(x, fit_R1_std2, 'k--', linewidth=1)
                ax2.plot(Time_std1, interval_R1_u_std1, 'k-.', linewidth=1)
                ax2.plot(Time_std1, interval_R1_l_std1, 'k-.', linewidth=1)
                ax2.plot(Time_std2, interval_R1_u_std2, 'k-.', linewidth=1)
                ax2.plot(Time_std2, interval_R1_l_std2, 'k-.', linewidth=1)
                ax2.set_ylabel('R1')
                ax3 = self.fig.add_subplot(313)
                ax3.errorbar(Time_std1,R2_std1, yerr=error2_std1, fmt='ko', ecolor='k', capthick=2)
                ax3.errorbar(Time_std2,R2_std2, yerr=error2_std2, fmt='kd', ecolor='k', capthick=2)
                ax3.plot(x, fit_R2_std1, 'k--', linewidth=1)
                ax3.plot(x, fit_R2_std2, 'k--', linewidth=1)
                ax3.plot(Time_std1, interval_R2_u_std1, 'k-.', linewidth=1)
                ax3.plot(Time_std1, interval_R2_l_std1, 'k-.', linewidth=1)
                ax3.plot(Time_std2, interval_R2_u_std2, 'k-.', linewidth=1)
                ax3.plot(Time_std2, interval_R2_l_std2, 'k-.', linewidth=1)
                ax3.set_xlabel('Time(h)')
                ax3.set_ylabel('R2')
            elif nb_ratios_conc_value == 4 and nb_std_conc_value == 2 and drift_order_conc_value == 0:
                ax1 = self.fig.add_subplot(221)
                ax1.errorbar(Time_std1,R0_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax1.errorbar(Time_std2,R0_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax1.set_ylabel('R1')
                ax2 = self.fig.add_subplot(222)
                ax2.errorbar(Time_std1,R1_std1, yerr=error1_std1, fmt='ko', ecolor='k', capthick=2)
                ax2.errorbar(Time_std2,R1_std2, yerr=error1_std2, fmt='kd', ecolor='k', capthick=2)
                ax1.set_ylabel('R1')
                ax3 = self.fig.add_subplot(223)
                ax3.errorbar(Time_std1,R2_std1, yerr=error2_std1, fmt='ko', ecolor='k', capthick=2)
                ax3.errorbar(Time_std2,R2_std2, yerr=error2_std2, fmt='kd', ecolor='k', capthick=2)
                ax3.set_ylabel('R2')
                ax4 = self.fig.add_subplot(224)
                ax4.errorbar(Time_std1,R3_std1, yerr=error3_std1, fmt='ko', ecolor='k', capthick=2)
                ax4.errorbar(Time_std2,R3_std2, yerr=error3_std2, fmt='kd', ecolor='k', capthick=2)
                ax4.set_xlabel('Time(h)')
                ax4.set_ylabel('R3')
            elif nb_ratios_conc_value == 4 and nb_std_conc_value == 2 and drift_order_conc_value >= 1:
                ax1 = self.fig.add_subplot(221)
                ax1.errorbar(Time_std1,R0_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax1.errorbar(Time_std2,R0_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax1.plot(x, fit_R0_std1, 'k--', linewidth=1)
                ax1.plot(x, fit_R0_std2, 'k--', linewidth=1)
                ax1.plot(Time_std1, interval_R0_u_std1, 'k-.', linewidth=1)
                ax1.plot(Time_std1, interval_R0_l_std1, 'k-.', linewidth=1)
                ax1.plot(Time_std2, interval_R0_u_std2, 'k-.', linewidth=1)
                ax1.plot(Time_std2, interval_R0_l_std2, 'k-.', linewidth=1)
                ax1.set_ylabel('R1')
                ax2 = self.fig.add_subplot(222)
                ax2.errorbar(Time_std1,R1_std1, yerr=error1_std1, fmt='ko', ecolor='k', capthick=2)
                ax2.errorbar(Time_std2,R1_std2, yerr=error1_std2, fmt='kd', ecolor='k', capthick=2)
                ax2.plot(x, fit_R1_std1, 'k--', linewidth=1)
                ax2.plot(x, fit_R1_std2, 'k--', linewidth=1)
                ax2.plot(Time_std1, interval_R1_u_std1, 'k-.', linewidth=1)
                ax2.plot(Time_std1, interval_R1_l_std1, 'k-.', linewidth=1)
                ax2.plot(Time_std2, interval_R1_u_std2, 'k-.', linewidth=1)
                ax2.plot(Time_std2, interval_R1_l_std2, 'k-.', linewidth=1)
                ax2.set_ylabel('R1')
                ax3 = self.fig.add_subplot(223)
                ax3.errorbar(Time_std1,R2_std1, yerr=error2_std1, fmt='ko', ecolor='k', capthick=2)
                ax3.errorbar(Time_std2,R2_std2, yerr=error2_std2, fmt='kd', ecolor='k', capthick=2)
                ax3.plot(x, fit_R2_std1, 'k--', linewidth=1)
                ax3.plot(x, fit_R2_std2, 'k--', linewidth=1)
                ax3.plot(Time_std1, interval_R2_u_std1, 'k-.', linewidth=1)
                ax3.plot(Time_std1, interval_R2_l_std1, 'k-.', linewidth=1)
                ax3.plot(Time_std2, interval_R2_u_std2, 'k-.', linewidth=1)
                ax3.plot(Time_std2, interval_R2_l_std2, 'k-.', linewidth=1)
                ax3.set_ylabel('R2')
                ax4 = self.fig.add_subplot(224)
                ax4.errorbar(Time_std1,R3_std1, yerr=error3_std1, fmt='ko', ecolor='k', capthick=2)
                ax4.errorbar(Time_std2,R3_std2, yerr=error3_std2, fmt='kd', ecolor='k', capthick=2)
                ax4.plot(x, fit_R3_std1, 'k--', linewidth=1)
                ax4.plot(x, fit_R3_std2, 'k--', linewidth=1)
                ax4.plot(Time_std1, interval_R3_u_std1, 'k-.', linewidth=1)
                ax4.plot(Time_std1, interval_R3_l_std1, 'k-.', linewidth=1)
                ax4.plot(Time_std2, interval_R3_u_std2, 'k-.', linewidth=1)
                ax4.plot(Time_std2, interval_R3_l_std2, 'k-.', linewidth=1)
                ax4.set_xlabel('Time(h)')
                ax4.set_ylabel('R3')
            elif nb_ratios_conc_value == 1 and nb_std_conc_value == 3 and drift_order_conc_value == 0:
                ax = self.fig.add_subplot(111)
                ax.errorbar(Time_std1,R0_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax.errorbar(Time_std2,R0_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax.errorbar(Time_std3,R0_std3, yerr=error0_std3, fmt='ks', ecolor='k', capthick=2)
                ax.set_xlabel('Time(h)')
                ax.set_ylabel('R0')
            elif nb_ratios_conc_value == 1 and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
                ax = self.fig.add_subplot(111)
                ax.errorbar(Time_std1,R0_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax.errorbar(Time_std2,R0_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax.errorbar(Time_std3,R0_std3, yerr=error0_std3, fmt='ks', ecolor='k', capthick=2)
                ax.plot(x, fit_R0_std1, 'k--', linewidth=1)
                ax.plot(x, fit_R0_std2, 'k--', linewidth=1)
                ax.plot(x, fit_R0_std3, 'k--', linewidth=1)
                ax.plot(Time_std1, interval_R0_u_std1, 'k-.', linewidth=1)
                ax.plot(Time_std1, interval_R0_l_std1, 'k-.', linewidth=1)
                ax.plot(Time_std2, interval_R0_u_std2, 'k-.', linewidth=1)
                ax.plot(Time_std2, interval_R0_l_std2, 'k-.', linewidth=1)
                ax.plot(Time_std3, interval_R0_u_std3, 'k-.', linewidth=1)
                ax.plot(Time_std3, interval_R0_l_std3, 'k-.', linewidth=1)
                ax.set_xlabel('Time(h)')
                ax.set_ylabel('R0')
            elif nb_ratios_conc_value == 2 and nb_std_conc_value == 3 and drift_order_conc_value == 0:
                ax1 = self.fig.add_subplot(211)
                ax1.errorbar(Time_std1,R0_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax1.errorbar(Time_std2,R0_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax1.errorbar(Time_std3,R0_std3, yerr=error0_std3, fmt='ks', ecolor='k', capthick=2)
                ax1.set_ylabel('R0')
                ax2 = self.fig.add_subplot(212)
                ax2.errorbar(Time_std1,R1_std1, yerr=error1_std1, fmt='ko', ecolor='k', capthick=2)
                ax2.errorbar(Time_std2,R1_std2, yerr=error1_std2, fmt='kd', ecolor='k', capthick=2)
                ax2.errorbar(Time_std3,R1_std3, yerr=error1_std3, fmt='ks', ecolor='k', capthick=2)
                ax2.set_ylabel('R1')
                ax2.set_xlabel('Time(h)')
            elif nb_ratios_conc_value == 2 and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
                ax1 = self.fig.add_subplot(211)
                ax1.errorbar(Time_std1,R0_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax1.errorbar(Time_std2,R0_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax1.errorbar(Time_std3,R0_std3, yerr=error0_std3, fmt='ks', ecolor='k', capthick=2)
                ax1.plot(x, fit_R0_std1, 'k--', linewidth=1)
                ax1.plot(x, fit_R0_std2, 'k--', linewidth=1)
                ax1.plot(x, fit_R0_std3, 'k--', linewidth=1)
                ax1.plot(Time_std1, interval_R0_u_std1, 'k-.', linewidth=1)
                ax1.plot(Time_std1, interval_R0_l_std1, 'k-.', linewidth=1)
                ax1.plot(Time_std2, interval_R0_u_std2, 'k-.', linewidth=1)
                ax1.plot(Time_std2, interval_R0_l_std2, 'k-.', linewidth=1)
                ax1.plot(Time_std3, interval_R0_u_std3, 'k-.', linewidth=1)
                ax1.plot(Time_std3, interval_R0_l_std3, 'k-.', linewidth=1)
                ax1.set_ylabel('R0')
                ax2 = self.fig.add_subplot(212)
                ax2.errorbar(Time_std1,R1_std1, yerr=error1_std1, fmt='ko', ecolor='k', capthick=2)
                ax2.errorbar(Time_std2,R1_std2, yerr=error1_std2, fmt='kd', ecolor='k', capthick=2)
                ax2.errorbar(Time_std3,R1_std3, yerr=error1_std3, fmt='ks', ecolor='k', capthick=2)
                ax2.plot(x, fit_R1_std1, 'k--', linewidth=1)
                ax2.plot(x, fit_R1_std2, 'k--', linewidth=1)
                ax2.plot(x, fit_R1_std3, 'k--', linewidth=1)
                ax2.plot(Time_std1, interval_R1_u_std1, 'k-.', linewidth=1)
                ax2.plot(Time_std1, interval_R1_l_std1, 'k-.', linewidth=1)
                ax2.plot(Time_std2, interval_R1_u_std2, 'k-.', linewidth=1)
                ax2.plot(Time_std2, interval_R1_l_std2, 'k-.', linewidth=1)
                ax2.plot(Time_std3, interval_R1_u_std3, 'k-.', linewidth=1)
                ax2.plot(Time_std3, interval_R1_l_std3, 'k-.', linewidth=1)
                ax2.set_ylabel('R1')
                ax2.set_xlabel('Time(h)')
            elif nb_ratios_conc_value == 3 and nb_std_conc_value == 3 and drift_order_conc_value == 0:
                ax1 = self.fig.add_subplot(311)
                ax1.errorbar(Time_std1,R0_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax1.errorbar(Time_std2,R0_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax1.errorbar(Time_std3,R0_std3, yerr=error0_std3, fmt='ks', ecolor='k', capthick=2)
                ax1.set_ylabel('R0')
                ax2 = self.fig.add_subplot(312)
                ax2.errorbar(Time_std1,R1_std1, yerr=error1_std1, fmt='ko', ecolor='k', capthick=2)
                ax2.errorbar(Time_std2,R1_std2, yerr=error1_std2, fmt='kd', ecolor='k', capthick=2)
                ax2.errorbar(Time_std3,R1_std3, yerr=error1_std3, fmt='ks', ecolor='k', capthick=2)
                ax2.set_ylabel('R1')
                ax3 = self.fig.add_subplot(313)
                ax3.errorbar(Time_std1,R2_std1, yerr=error2_std1, fmt='ko', ecolor='k', capthick=2)
                ax3.errorbar(Time_std2,R2_std2, yerr=error2_std2, fmt='kd', ecolor='k', capthick=2)
                ax3.errorbar(Time_std3,R2_std3, yerr=error2_std3, fmt='ks', ecolor='k', capthick=2)
                ax3.set_ylabel('R2')
                ax3.set_xlabel('Time(h)')
            elif nb_ratios_conc_value == 3 and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
                ax1 = self.fig.add_subplot(311)
                ax1.errorbar(Time_std1,R0_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax1.errorbar(Time_std2,R0_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax1.errorbar(Time_std3,R0_std3, yerr=error0_std3, fmt='ks', ecolor='k', capthick=2)
                ax1.plot(x, fit_R0_std1, 'k--', linewidth=1)
                ax1.plot(x, fit_R0_std2, 'k--', linewidth=1)
                ax1.plot(x, fit_R0_std3, 'k--', linewidth=1)
                ax1.plot(Time_std1, interval_R0_u_std1, 'k-.', linewidth=1)
                ax1.plot(Time_std1, interval_R0_l_std1, 'k-.', linewidth=1)
                ax1.plot(Time_std2, interval_R0_u_std2, 'k-.', linewidth=1)
                ax1.plot(Time_std2, interval_R0_l_std2, 'k-.', linewidth=1)
                ax1.plot(Time_std3, interval_R0_u_std3, 'k-.', linewidth=1)
                ax1.plot(Time_std3, interval_R0_l_std3, 'k-.', linewidth=1)
                ax1.set_ylabel('R0')
                ax2 = self.fig.add_subplot(312)
                ax2.errorbar(Time_std1,R1_std1, yerr=error1_std1, fmt='ko', ecolor='k', capthick=2)
                ax2.errorbar(Time_std2,R1_std2, yerr=error1_std2, fmt='kd', ecolor='k', capthick=2)
                ax2.errorbar(Time_std3,R1_std3, yerr=error1_std3, fmt='ks', ecolor='k', capthick=2)
                ax2.plot(x, fit_R1_std1, 'k--', linewidth=1)
                ax2.plot(x, fit_R1_std2, 'k--', linewidth=1)
                ax2.plot(x, fit_R1_std3, 'k--', linewidth=1)
                ax2.plot(Time_std1, interval_R1_u_std1, 'k-.', linewidth=1)
                ax2.plot(Time_std1, interval_R1_l_std1, 'k-.', linewidth=1)
                ax2.plot(Time_std2, interval_R1_u_std2, 'k-.', linewidth=1)
                ax2.plot(Time_std2, interval_R1_l_std2, 'k-.', linewidth=1)
                ax2.plot(Time_std3, interval_R1_u_std3, 'k-.', linewidth=1)
                ax2.plot(Time_std3, interval_R1_l_std3, 'k-.', linewidth=1)
                ax2.set_ylabel('R1')
                ax3 = self.fig.add_subplot(313)
                ax3.errorbar(Time_std1,R2_std1, yerr=error2_std1, fmt='ko', ecolor='k', capthick=2)
                ax3.errorbar(Time_std2,R2_std2, yerr=error2_std2, fmt='kd', ecolor='k', capthick=2)
                ax3.errorbar(Time_std3,R2_std3, yerr=error2_std3, fmt='ks', ecolor='k', capthick=2)
                ax3.plot(x, fit_R2_std1, 'k--', linewidth=1)
                ax3.plot(x, fit_R2_std2, 'k--', linewidth=1)
                ax3.plot(x, fit_R2_std3, 'k--', linewidth=1)
                ax3.plot(Time_std1, interval_R2_u_std1, 'k-.', linewidth=1)
                ax3.plot(Time_std1, interval_R2_l_std1, 'k-.', linewidth=1)
                ax3.plot(Time_std2, interval_R2_u_std2, 'k-.', linewidth=1)
                ax3.plot(Time_std2, interval_R2_l_std2, 'k-.', linewidth=1)
                ax3.plot(Time_std3, interval_R2_u_std3, 'k-.', linewidth=1)
                ax3.plot(Time_std3, interval_R2_l_std3, 'k-.', linewidth=1)
                ax3.set_ylabel('R2')
                ax3.set_xlabel('Time(h)')
            elif nb_ratios_conc_value == 4 and nb_std_conc_value == 3 and drift_order_conc_value == 0:
                ax1 = self.fig.add_subplot(221)
                ax1.errorbar(Time_std1,R0_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax1.errorbar(Time_std2,R0_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax1.errorbar(Time_std3,R0_std3, yerr=error0_std3, fmt='ks', ecolor='k', capthick=2)
                ax1.set_ylabel('R0')
                ax2 = self.fig.add_subplot(222)
                ax2.errorbar(Time_std1,R1_std1, yerr=error1_std1, fmt='ko', ecolor='k', capthick=2)
                ax2.errorbar(Time_std2,R1_std2, yerr=error1_std2, fmt='kd', ecolor='k', capthick=2)
                ax2.errorbar(Time_std3,R1_std3, yerr=error1_std3, fmt='ks', ecolor='k', capthick=2)
                ax2.set_ylabel('R1')
                ax3 = self.fig.add_subplot(223)
                ax3.errorbar(Time_std1,R2_std1, yerr=error2_std1, fmt='ko', ecolor='k', capthick=2)
                ax3.errorbar(Time_std2,R2_std2, yerr=error2_std2, fmt='kd', ecolor='k', capthick=2)
                ax3.errorbar(Time_std3,R2_std3, yerr=error2_std3, fmt='ks', ecolor='k', capthick=2)
                ax3.set_ylabel('R2')
                ax4 = self.fig.add_subplot(224)
                ax4.errorbar(Time_std1,R3_std1, yerr=error3_std1, fmt='ko', ecolor='k', capthick=2)
                ax4.errorbar(Time_std2,R3_std2, yerr=error3_std2, fmt='kd', ecolor='k', capthick=2)
                ax4.errorbar(Time_std3,R3_std3, yerr=error3_std3, fmt='ks', ecolor='k', capthick=2)
                ax4.set_xlabel('Time(h)')
                ax4.set_ylabel('R3')
            elif nb_ratios_conc_value == 4 and nb_std_conc_value == 3 and drift_order_conc_value >= 1:
                ax1 = self.fig.add_subplot(221)
                ax1.errorbar(Time_std1,R0_std1, yerr=error0_std1, fmt='ko', ecolor='k', capthick=2)
                ax1.errorbar(Time_std2,R0_std2, yerr=error0_std2, fmt='kd', ecolor='k', capthick=2)
                ax1.errorbar(Time_std3,R0_std3, yerr=error0_std3, fmt='ks', ecolor='k', capthick=2)
                ax1.plot(x, fit_R0_std1, 'k--', linewidth=1)
                ax1.plot(x, fit_R0_std2, 'k--', linewidth=1)
                ax1.plot(x, fit_R0_std3, 'k--', linewidth=1)
                ax1.plot(Time_std1, interval_R0_u_std1, 'k-.', linewidth=1)
                ax1.plot(Time_std1, interval_R0_l_std1, 'k-.', linewidth=1)
                ax1.plot(Time_std2, interval_R0_u_std2, 'k-.', linewidth=1)
                ax1.plot(Time_std2, interval_R0_l_std2, 'k-.', linewidth=1)
                ax1.plot(Time_std3, interval_R0_u_std3, 'k-.', linewidth=1)
                ax1.plot(Time_std3, interval_R0_l_std3, 'k-.', linewidth=1)
                ax1.set_ylabel('R0')
                ax2 = self.fig.add_subplot(222)
                ax2.errorbar(Time_std1,R1_std1, yerr=error1_std1, fmt='ko', ecolor='k', capthick=2)
                ax2.errorbar(Time_std2,R1_std2, yerr=error1_std2, fmt='kd', ecolor='k', capthick=2)
                ax2.errorbar(Time_std3,R1_std3, yerr=error1_std3, fmt='ks', ecolor='k', capthick=2)
                ax2.plot(x, fit_R1_std1, 'k--', linewidth=1)
                ax2.plot(x, fit_R1_std2, 'k--', linewidth=1)
                ax2.plot(x, fit_R1_std3, 'k--', linewidth=1)
                ax2.plot(Time_std1, interval_R1_u_std1, 'k-.', linewidth=1)
                ax2.plot(Time_std1, interval_R1_l_std1, 'k-.', linewidth=1)
                ax2.plot(Time_std2, interval_R1_u_std2, 'k-.', linewidth=1)
                ax2.plot(Time_std2, interval_R1_l_std2, 'k-.', linewidth=1)
                ax2.plot(Time_std3, interval_R1_u_std3, 'k-.', linewidth=1)
                ax2.plot(Time_std3, interval_R1_l_std3, 'k-.', linewidth=1)
                ax2.set_ylabel('R1')
                ax3 = self.fig.add_subplot(223)
                ax3.errorbar(Time_std1,R2_std1, yerr=error2_std1, fmt='ko', ecolor='k', capthick=2)
                ax3.errorbar(Time_std2,R2_std2, yerr=error2_std2, fmt='kd', ecolor='k', capthick=2)
                ax3.errorbar(Time_std3,R2_std3, yerr=error2_std3, fmt='ks', ecolor='k', capthick=2)
                ax3.plot(x, fit_R2_std1, 'k--', linewidth=1)
                ax3.plot(x, fit_R2_std2, 'k--', linewidth=1)
                ax3.plot(x, fit_R2_std3, 'k--', linewidth=1)
                ax3.plot(Time_std1, interval_R2_u_std1, 'k-.', linewidth=1)
                ax3.plot(Time_std1, interval_R2_l_std1, 'k-.', linewidth=1)
                ax3.plot(Time_std2, interval_R2_u_std2, 'k-.', linewidth=1)
                ax3.plot(Time_std2, interval_R2_l_std2, 'k-.', linewidth=1)
                ax3.plot(Time_std3, interval_R2_u_std3, 'k-.', linewidth=1)
                ax3.plot(Time_std3, interval_R2_l_std3, 'k-.', linewidth=1)
                ax3.set_ylabel('R2')
                ax4 = self.fig.add_subplot(224)
                ax4.errorbar(Time_std1,R3_std1, yerr=error3_std1, fmt='ko', ecolor='k', capthick=2)
                ax4.errorbar(Time_std2,R3_std2, yerr=error3_std2, fmt='kd', ecolor='k', capthick=2)
                ax4.errorbar(Time_std3,R3_std3, yerr=error3_std3, fmt='ks', ecolor='k', capthick=2)
                ax4.plot(x, fit_R3_std1, 'k--', linewidth=1)
                ax4.plot(x, fit_R3_std2, 'k--', linewidth=1)
                ax4.plot(x, fit_R3_std3, 'k--', linewidth=1)
                ax4.plot(Time_std1, interval_R3_u_std1, 'k-.', linewidth=1)
                ax4.plot(Time_std1, interval_R3_l_std1, 'k-.', linewidth=1)
                ax4.plot(Time_std2, interval_R3_u_std2, 'k-.', linewidth=1)
                ax4.plot(Time_std2, interval_R3_l_std2, 'k-.', linewidth=1)
                ax4.plot(Time_std3, interval_R3_u_std3, 'k-.', linewidth=1)
                ax4.plot(Time_std3, interval_R3_l_std3, 'k-.', linewidth=1)
                ax4.set_xlabel('Time(h)')
                ax4.set_ylabel('R3')
            self.canvas.show()

    def Iso_system(self, index_iso):
        global Isotopic_system_value
        global Ref_iso
        Isotopic_system_value = None
        Ref_iso = None
        if self.comboBox_Isotopic_system.itemText(index_iso) == 'dD':
            Isotopic_system_value = None
            Isotopic_system_value = 1
            Ref_iso = 0.00015576
            self.comboBox_ratio_iso.setEnabled(True)
        elif self.comboBox_Isotopic_system.itemText(index_iso) == 'd7Li':
            Isotopic_system_value = None
            Isotopic_system_value = 2
            Ref_iso = 12.175
            self.comboBox_ratio_iso.setEnabled(True)
        elif self.comboBox_Isotopic_system.itemText(index_iso) == 'd11B':
            Isotopic_system_value = None
            Isotopic_system_value = 3
            Ref_iso = 0.404362
            self.comboBox_ratio_iso.setEnabled(True)
        elif self.comboBox_Isotopic_system.itemText(index_iso) == 'd13C':
            Isotopic_system_value = None
            Isotopic_system_value = 4
            Ref_iso = 0.0112372
            self.comboBox_ratio_iso.setEnabled(True)
        elif self.comboBox_Isotopic_system.itemText(index_iso) == 'd18O (VPDB)':
            Isotopic_system_value = None
            Isotopic_system_value = 5
            Ref_iso = 0.0020671
            self.comboBox_ratio_iso.setEnabled(True)
        elif self.comboBox_Isotopic_system.itemText(index_iso) == 'd18O (VSMOW)':
            Isotopic_system_value = None
            Isotopic_system_value = 6
            Ref_iso = 0.0020052
            self.comboBox_ratio_iso.setEnabled(True)
        elif self.comboBox_Isotopic_system.itemText(index_iso) == 'D17O':
            Isotopic_system_value = None
            Isotopic_system_value = 11
            Ref_iso_1 = 0.0020052
            Ref_iso_2 = 0.0020052
            self.comboBox_ratio_iso.setEnabled(False)
        elif self.comboBox_Isotopic_system.itemText(index_iso) == 'd37Cl':
            Isotopic_system_value = None
            Isotopic_system_value = 7
            Ref_iso = 0.31959198
            self.comboBox_ratio_iso.setEnabled(True)
        elif self.comboBox_Isotopic_system.itemText(index_iso) == 'Al-Mg (FC-EM)':
            Isotopic_system_value = None
            Isotopic_system_value = 8
            Ratio_iso = 0
            self.comboBox_ratio_iso.setEnabled(False)
            self.actionDeadtime.setEnabled(True)
            self.actionBackground.setEnabled(True)
            self.actionChange_of_cycles.setEnabled(True)
        elif self.comboBox_Isotopic_system.itemText(index_iso) == 'Al-Mg (EM-EM)':
            Isotopic_system_value = None
            Isotopic_system_value = 9
            Ratio_iso = 0
            self.comboBox_ratio_iso.setEnabled(False)
            self.actionDeadtime.setEnabled(True)
            self.actionBackground.setEnabled(True)
            self.actionChange_of_cycles.setEnabled(True)
        elif self.comboBox_Isotopic_system.itemText(index_iso) == 'Unspecified':
            Isotopic_system_value = None
            Isotopic_system_value = 10
            self.comboBox_ratio_iso.setEnabled(True)
            # self.Ratio_unspecified()

    def ratio_iso(self, index_ratio_iso):
        global Ratio_iso
        Ratio_iso = None
        if self.comboBox_ratio_iso.itemText(index_ratio_iso) == '1st ratio':
            Ratio_iso = 1
        elif self.comboBox_ratio_iso.itemText(index_ratio_iso) == '2nd ratio':
            Ratio_iso = 2
        elif self.comboBox_ratio_iso.itemText(index_ratio_iso) == '3rd ratio':
            Ratio_iso = 3
        elif self.comboBox_ratio_iso.itemText(index_ratio_iso) == '4th ratio':
            Ratio_iso = 4
        elif self.comboBox_ratio_iso.itemText(index_ratio_iso) == '5th ratio':
            Ratio_iso = 5
        elif self.comboBox_ratio_iso.itemText(index_ratio_iso) == '6th ratio':
            Ratio_iso = 6
        elif self.comboBox_ratio_iso.itemText(index_ratio_iso) == '7th ratio':
            Ratio_iso = 7
        elif self.comboBox_ratio_iso.itemText(index_ratio_iso) == '8th ratio':
            Ratio_iso = 8

    def nb_ratios_conc(self, index_ratios_conc):
        global nb_ratios_conc_value
        nb_ratios_conc_value = None
        if self.comboBox_nb_ratios_conc.itemText(index_ratios_conc) == '1 ratio':
            nb_ratios_conc_value = 1
        elif self.comboBox_nb_ratios_conc.itemText(index_ratios_conc) == '2 ratios':
            nb_ratios_conc_value = 2
        elif self.comboBox_nb_ratios_conc.itemText(index_ratios_conc) == '3 ratios':
            nb_ratios_conc_value = 3
        elif self.comboBox_nb_ratios_conc.itemText(index_ratios_conc) == '4 ratios':
            nb_ratios_conc_value = 4

    def nb_std_iso(self, index_std_iso):
        global nb_std_iso_value
        nb_std_iso_value = None
        if self.comboBox_nb_std_iso.itemText(index_std_iso) == '1 standard':
            nb_std_iso_value = 1
            self.lineEdit_std2_name_iso.setEnabled(False)
            self.lineEdit_std3_name_iso.setEnabled(False)
            self.label_std2_name_iso.setEnabled(False)
            self.label_std3_name_iso.setEnabled(False)
        elif self.comboBox_nb_std_iso.itemText(index_std_iso) == '2 standards':
            nb_std_iso_value = 2
            self.lineEdit_std2_name_iso.setEnabled(True)
            self.lineEdit_std3_name_iso.setEnabled(False)
            self.label_std2_name_iso.setEnabled(True)
            self.label_std3_name_iso.setEnabled(False)
            self.comboBox_drift_order_iso.model().item(4).setEnabled(False)
            self.comboBox_drift_order_iso.model().item(5).setEnabled(False)
            self.comboBox_drift_order_iso.model().item(6).setEnabled(False)
        elif self.comboBox_nb_std_iso.itemText(index_std_iso) == '3 standards':
            nb_std_iso_value = 3
            self.lineEdit_std2_name_iso.setEnabled(True)
            self.lineEdit_std3_name_iso.setEnabled(True)
            self.label_std2_name_iso.setEnabled(True)
            self.label_std3_name_iso.setEnabled(True)
            self.comboBox_drift_order_iso.model().item(4).setEnabled(False)
            self.comboBox_drift_order_iso.model().item(5).setEnabled(False)
            self.comboBox_drift_order_iso.model().item(6).setEnabled(False)

    def nb_std_conc(self, index_std_conc):
        global nb_std_conc_value
        nb_std_conc_value = None
        if self.comboBox_nb_std_conc.itemText(index_std_conc) == '1 standard':
            nb_std_conc_value = 1
            self.lineEdit_std2_name_conc.setEnabled(False)
            self.lineEdit_std3_name_conc.setEnabled(False)
            self.label_std2_name_conc.setEnabled(False)
            self.label_std3_name_conc.setEnabled(False)
        elif self.comboBox_nb_std_conc.itemText(index_std_conc) == '2 standards':
            nb_std_conc_value = 2
            self.lineEdit_std2_name_conc.setEnabled(True)
            self.lineEdit_std3_name_conc.setEnabled(False)
            self.label_std2_name_conc.setEnabled(True)
            self.label_std3_name_conc.setEnabled(False)
            self.comboBox_drift_order_conc.model().item(4).setEnabled(False)
            self.comboBox_drift_order_conc.model().item(5).setEnabled(False)
            self.comboBox_drift_order_conc.model().item(6).setEnabled(False)
        elif self.comboBox_nb_std_conc.itemText(index_std_conc) == '3 standards':
            nb_std_conc_value = 3
            self.lineEdit_std2_name_conc.setEnabled(True)
            self.lineEdit_std3_name_conc.setEnabled(True)
            self.label_std2_name_conc.setEnabled(True)
            self.label_std3_name_conc.setEnabled(True)
            self.comboBox_drift_order_conc.model().item(4).setEnabled(False)
            self.comboBox_drift_order_conc.model().item(5).setEnabled(False)
            self.comboBox_drift_order_conc.model().item(6).setEnabled(False)

    def set_name_cell(self, state):
        global Name_cell
        Name_cell = None
        if state == Qt.Checked:
            Name_cell = 1
        else:
            Name_cell = 0

    def enable_drift_order_iso(self, state):
        global drift_iso_value
        global drift_order_iso_value
        drift_iso_value = None
        if state == Qt.Checked:
            self.comboBox_drift_order_iso.setEnabled(True)
            self.actionResiduals_2.setEnabled(True)
            drift_iso_value = 1
            drift_order_iso_value = 1
        else:
            self.comboBox_drift_order_iso.setEnabled(False)
            self.actionResiduals_2.setEnabled(False)
            drift_iso_value = 0
            drift_order_iso_value = 0

    def drift_order_iso(self, drift_index_iso):
        global drift_order_iso_value
        drift_order_iso_value = None
        if self.comboBox_drift_order_iso.itemText(drift_index_iso) == 'Linear':
            drift_order_iso_value = 1
        elif self.comboBox_drift_order_iso.itemText(drift_index_iso) == '2nd order polynomial':
            drift_order_iso_value = 2
        elif self.comboBox_drift_order_iso.itemText(drift_index_iso) == '3rd order polynomial':
            drift_order_iso_value = 3
        elif self.comboBox_drift_order_iso.itemText(drift_index_iso) == '4th order polynomial':
            drift_order_iso_value = 4
        elif self.comboBox_drift_order_iso.itemText(drift_index_iso) == '5th order polynomial':
            drift_order_iso_value = 5
        elif self.comboBox_drift_order_iso.itemText(drift_index_iso) == '6th order polynomial':
            drift_order_iso_value = 6
        elif self.comboBox_drift_order_iso.itemText(drift_index_iso) == '7th order polynomial':
            drift_order_iso_value = 7

    def drift_order_conc(self, drift_index_conc):
        global drift_order_conc_value
        drift_order_conc_value = None
        if self.comboBox_drift_order_conc.itemText(drift_index_conc) == 'Linear':
            drift_order_conc_value = 1
        elif self.comboBox_drift_order_conc.itemText(drift_index_conc) == '2nd order polynomial':
            drift_order_conc_value = 2
        elif self.comboBox_drift_order_conc.itemText(drift_index_conc) == '3rd order polynomial':
            drift_order_conc_value = 3
        elif self.comboBox_drift_order_conc.itemText(drift_index_conc) == '4th order polynomial':
            drift_order_conc_value = 4
        elif self.comboBox_drift_order_conc.itemText(drift_index_conc) == '5th order polynomial':
            drift_order_conc_value = 5
        elif self.comboBox_drift_order_conc.itemText(drift_index_conc) == '6th order polynomial':
            drift_order_conc_value = 6
        elif self.comboBox_drift_order_conc.itemText(drift_index_conc) == '7th order polynomial':
            drift_order_conc_value = 7

    def enable_drift_order_conc(self, state):
        global drift_conc_value
        global drift_order_conc_value 
        drift_conc_value = None
        if state == Qt.Checked:
            self.comboBox_drift_order_conc.setEnabled(True)
            self.actionResiduals_2.setEnabled(True)
            drift_conc_value = 1
            drift_order_conc_value = 1
        else:
            self.comboBox_drift_order_conc.setEnabled(False)
            self.actionResiduals_2.setEnabled(False)
            drift_conc_value = 0
            drift_order_conc_value = 0

    def enable_ref_value_iso(self, state):
        Ref_std_iso_value = None
        Ref_sigma_iso_value = None
        global Auto_bias_iso_value
        Auto_bias_iso_value = None
        if state == Qt.Checked:
            self.w = PopUp_Ref_iso_Layout()
            self.w.show()
            Auto_bias_iso_value = 1
        else:
            Auto_bias_iso_value = 0

    def enable_ref_value_conc(self, state):
        Ref_std_conc1_value = None
        Ref_sigma_conc1_value = None
        Ref_std_conc2_value = None
        Ref_sigma_conc2_value = None
        Ref_std_conc3_value = None
        Ref_sigma_conc3_value = None
        Ref_std_conc4_value = None
        Ref_sigma_conc4_value = None
        global Auto_bias_conc_value
        Auto_bias_conc_value = None
        if state == Qt.Checked:
            Auto_bias_conc_value = 1
            if nb_ratios_conc_value == 1:
                self.w1 = PopUp_Ref_conc_1ratio_Layout()
                self.w1.show()
            elif nb_ratios_conc_value == 2:
                self.w2 = PopUp_Ref_conc_2ratios_Layout()
                self.w2.show()
            elif nb_ratios_conc_value == 3:
                self.w3 = PopUp_Ref_conc_3ratios_Layout()
                self.w3.show()
            elif nb_ratios_conc_value == 4:
                self.w4 = PopUp_Ref_conc_4ratios_Layout()
                self.w4.show()
        else:
            Auto_bias_conc_value = 0

    def figure_standards_show(self):
        if Analyses_type_value == 1:
            self.Fig_Standards_iso = Figure_standards_Window_iso()
            self.Fig_Standards_iso.show()
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1:
            self.Fig_Standards_1ratio = Figure_standards_Window_iso()
            self.Fig_Standards_1ratio.show()
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2:
            self.Fig_Standards_2ratios = Figure_standards_Window_2ratios_conc()
            self.Fig_Standards_2ratios.show()
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3:
            self.Fig_Standards_3ratios = Figure_standards_Window_3ratios_conc()
            self.Fig_Standards_3ratios.show()
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4:
            self.Fig_Standards_4ratios = Figure_standards_Window_4ratios_conc()
            self.Fig_Standards_4ratios.show()

    def figure_residuals_show(self):
        if Analyses_type_value == 1:
            self.Fig_Residuals = Figure_residuals_Window_iso()
            self.Fig_Residuals.show()
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1:
            self.Fig_Fig_Residuals_1ratio = Figure_residuals_Window_iso()
            self.Fig_Fig_Residuals_1ratio.show()
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2:
            self.Fig_Fig_Residuals_2ratios = Figure_residuals_Window_2ratios_conc()
            self.Fig_Fig_Residuals_2ratios.show()
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3:
            self.Fig_Fig_Residuals_2ratios = Figure_residuals_Window_3ratios_conc()
            self.Fig_Fig_Residuals_2ratios.show()
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4:
            self.Fig_Fig_Residuals_2ratios = Figure_residuals_Window_4ratios_conc()
            self.Fig_Fig_Residuals_2ratios.show()

    def figure_data_show(self):
        if Analyses_type_value == 1:
            self.Fig_data = Figure_data_Window_iso()
            self.Fig_data.show()
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1:
            self.Fig_data_1ratio = Figure_data_Window_iso()
            self.Fig_data_1ratio.show()
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2:
            self.Fig_data_2ratios = Figure_data_Window_2ratios_conc()
            self.Fig_data_2ratios.show()
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3:
            self.Fig_data_3ratios = Figure_data_Window_3ratios_conc()
            self.Fig_data_3ratios.show()
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4:
            self.Fig_data_4ratios = Figure_data_Window_4ratios_conc()
            self.Fig_data_4ratios.show()

    def figure_AddInfo(self):
        self.Fig_AddInfo = Figure_AddInfo_Window()
        self.Fig_AddInfo.show()

    def Input_data(self):
        self.Data_selection = Data_selection_Window()
        self.Data_selection.show()

    def Enter_New_Deadtime(self):
        self.New_Deadtime_selection = New_Deadtime_Window()
        self.New_Deadtime_selection.show()

    def figure_Statistics(self):
        self.Fig_Stats = Figure_Stats_Window()
        self.Fig_Stats.show()

    def Window_Statistics_fit(self):
        self.Stats_show = Stats_Window_show()
        self.Stats_show.show()

    def output_standard_data(self):
        name_output_standards = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_output_standards = name_output_standards[0] + '.csv'

        if Analyses_type_value == 1 and nb_std_iso_value == 1  and Auto_bias_iso_value == 0 and drift_order_iso_value == 0:
            Std_M = pd.DataFrame({'Name' : Name_std, 'Time (h)' : Time_std, 'delta raw (permil)' : delta_std, 'error (permil)' : error0_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'delta raw (permil)', 'error (permil)']]
        elif Analyses_type_value == 1 and nb_std_iso_value == 1 and Auto_bias_iso_value == 0 and drift_order_iso_value >= 1:
            Std_M = pd.DataFrame({'Name' : Name_std, 'Time (h)' : Time_std, 'delta corrected (permil)' : delta_corr_std, 'error (permil)' : error0_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'delta corrected (permil)', 'error (permil)']]
        elif Analyses_type_value == 1 and nb_std_iso_value == 1 and Auto_bias_iso_value == 1:
            Std_M = pd.DataFrame({'Name' : Name_std, 'Time (h)' : Time_std, 'delta ref (permil)' : delta_ref_std, 'error (permil)' : error0_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'delta ref (permil)', 'error (permil)']]
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and Auto_bias_iso_value == 0 and drift_order_iso_value == 0:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1)))
            if Name_cell == 1:
                Comment_tot_std = np.vstack((np.asarray(Comment_std1).reshape(len(Comment_std1),1), np.asarray(Comment_std2).reshape(len(Comment_std2),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            delta_tot_std = np.vstack((np.asarray(delta_std1).reshape(len(delta_std1),1), np.asarray(delta_std2).reshape(len(delta_std2),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'delta raw (permil)' : delta_tot_std, 'error (permil)' : error0_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'delta corrected (permil)', 'error (permil)']]
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and Auto_bias_iso_value == 0 and drift_order_iso_value >= 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            delta_corr_tot_std = np.vstack((np.asarray(delta_corr_std1).reshape(len(delta_corr_std1),1), np.asarray(delta_corr_std2).reshape(len(delta_corr_std2),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'delta corrected (permil)' : delta_corr_tot_std, 'error (permil)' : error0_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'delta corrected (permil)', 'error (permil)']]
        elif Analyses_type_value == 1 and nb_std_iso_value == 2 and Auto_bias_iso_value == 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            delta_ref_tot_std = np.vstack((np.asarray(delta_ref_std1).reshape(len(delta_ref_std1),1), np.asarray(delta_ref_std2).reshape(len(delta_ref_std2),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'delta ref (permil)' : delta_ref_tot_std, 'error (permil)' : error_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'delta ref (permil)', 'error (permil)']]
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and Auto_bias_iso_value == 0 and drift_order_iso_value == 0:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            delta_tot_std = np.vstack((np.asarray(delta_std1).reshape(len(delta_std1),1), np.asarray(delta_std2).reshape(len(delta_std2),1), np.asarray(delta_std3).reshape(len(delta_std3),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'delta raw (permil)' : delta_tot_std, 'error (permil)' : error_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'delta corrected (permil)', 'error (permil)']]
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and Auto_bias_iso_value == 0 and drift_order_iso_value >= 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            delta_corr_tot_std = np.vstack((np.asarray(delta_corr_std1).reshape(len(delta_corr_std1),1), np.asarray(delta_corr_std2).reshape(len(delta_corr_std2),1), np.asarray(delta_corr_std3).reshape(len(delta_corr_std3),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'delta corrected (permil)' : delta_corr_tot_std, 'error (permil)' : error_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'delta corrected (permil)', 'error (permil)']]
        elif Analyses_type_value == 1 and nb_std_iso_value == 3 and Auto_bias_iso_value == 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            delta_ref_tot_std = np.vstack((np.asarray(delta_ref_std1).reshape(len(delta_ref_std1),1), np.asarray(delta_ref_std2).reshape(len(delta_ref_std2),1), np.asarray(delta_ref_std3).reshape(len(delta_ref_std3),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'delta ref (permil)' : delta_ref_tot_std, 'error (permil)' : error_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'delta ref (permil)', 'error (permil)']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1  and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            Std_M = pd.DataFrame({'Name' : Name_std, 'Time (h)' : Time_std, 'R0 raw' : R0_std, 'error R0' : error0_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 raw', 'error R0']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            Std_M = pd.DataFrame({'Name' : Name_std, 'Time (h)' : Time_std, 'R0 corrected' : R0_corr_std, 'error R0' : error0_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 corrected', 'error R0']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 1 and Auto_bias_conc_value == 1:
            Std_M = pd.DataFrame({'Name' : Name_std, 'Time (h)' : Time_std, 'R0 ref (wt%)' : R0_ref_std, 'error R0' : error0_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 ref (wt%)', 'error R0']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            R0_tot_std = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 raw' : R0_tot_std, 'error R0' : error0_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 raw', 'error R0']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            R0_corr_tot_std = np.vstack((np.asarray(R0_corr_std1).reshape(len(R0_corr_std1),1), np.asarray(R0_corr_std2).reshape(len(R0_corr_std2),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 corrected' : R0_corr_tot_std, 'error R0' : error0_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 corrected', 'error R0']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 2 and Auto_bias_conc_value == 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            R0_ref_tot_std = np.vstack((np.asarray(R0_ref_std1).reshape(len(R0_ref_std1),1), np.asarray(R0_ref_std2).reshape(len(R0_ref_std2),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 ref (wt%)' : R0_ref_tot_std, 'error R0' : error_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 ref (wt%)', 'error R0']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            R0_tot_std = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 raw' : R0_tot_std, 'error R0' : error_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 raw', 'error R0']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            R0_corr_tot_std = np.vstack((np.asarray(R0_corr_std1).reshape(len(R0_corr_std1),1), np.asarray(R0_corr_std2).reshape(len(R0_corr_std2),1), np.asarray(R0_corr_std3).reshape(len(R0_corr_std3),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 corrected' : R0_corr_tot_std, 'error R0' : error_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 corrected', 'error R0']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and nb_std_conc_value == 3 and Auto_bias_conc_value == 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            R0_ref_tot_std = np.vstack((np.asarray(R0_ref_std1).reshape(len(R0_ref_std1),1), np.asarray(R0_ref_std2).reshape(len(R0_ref_std2),1), np.asarray(R0_ref_std3).reshape(len(R0_ref_std3),1)))
            error_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 ref (wt%)' : R0_ref_tot_std, 'error R0' : error_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 ref (wt%)', 'error R0']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 1  and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            Std_M = pd.DataFrame({'Name' : Name_std, 'Time (h)' : Time_std, 'R0 raw' : R0_std, 'error R0' : error0_std, 'R1 raw' : R1_std, 'error R1' : error1_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 raw', 'error R0', 'R1 raw', 'error R1']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 1 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            Std_M = pd.DataFrame({'Name' : Name_std, 'Time (h)' : Time_std, 'R0 corrected' : R0_corr_std, 'error R0' : error0_std, 'R1 corrected' : R1_corr_std, 'error R1' : error1_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 corrected', 'error R0', 'R1 corrected', 'error R1']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 1 and Auto_bias_conc_value == 1:
            Std_M = pd.DataFrame({'Name' : Name_std, 'Time (h)' : Time_std, 'R0 ref (wt%)' : R0_ref_std, 'error R0' : error0_std, 'R1 ref (wt%)' : R1_ref_std, 'error R1' : error1_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 ref (wt%)', 'error R0', 'R1 ref (wt%)', 'error R1']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            R0_tot_std = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            R1_tot_std = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 raw' : R0_tot_std, 'error R0' : error0_tot_std, 'R1 raw' : R1_tot_std, 'error R1' : error1_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 raw', 'error R0', 'R1 raw', 'error R1']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            R0_corr_tot_std = np.vstack((np.asarray(R0_corr_std1).reshape(len(R0_corr_std1),1), np.asarray(R0_corr_std2).reshape(len(R0_corr_std2),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            R1_corr_tot_std = np.vstack((np.asarray(R1_corr_std1).reshape(len(R1_corr_std1),1), np.asarray(R1_corr_std2).reshape(len(R1_corr_std2),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 corrected' : R0_corr_tot_std, 'error R0' : error0_tot_std, 'R1 corrected' : R1_corr_tot_std, 'error R1' : error1_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 corrected', 'error R0', 'R1 corrected', 'error R1']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 2 and Auto_bias_conc_value == 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            R0_ref_tot_std = np.vstack((np.asarray(R0_ref_std1).reshape(len(R0_ref_std1),1), np.asarray(R0_ref_std2).reshape(len(R0_ref_std2),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            R1_ref_tot_std = np.vstack((np.asarray(R1_ref_std1).reshape(len(R1_ref_std1),1), np.asarray(R1_ref_std2).reshape(len(R1_ref_std2),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 ref (wt%)' : R0_ref_tot_std, 'error R0' : error0_tot_std, 'R1 ref (wt%)' : R1_ref_tot_std, 'error R1' : error1_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 ref (wt%)', 'error R0', 'R1 ref (wt%)', 'error R1']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            R0_tot_std = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            R1_tot_std = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1), np.asarray(R1_std3).reshape(len(R1_std3),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1), np.asarray(error1_std3).reshape(len(error1_std3),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 raw' : R0_tot_std, 'error R0' : error0_tot_std, 'R1 raw' : R1_tot_std, 'error R1' : error1_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 raw', 'error R0', 'R1 raw', 'error R1']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            R0_corr_tot_std = np.vstack((np.asarray(R0_corr_std1).reshape(len(R0_corr_std1),1), np.asarray(R0_corr_std2).reshape(len(R0_corr_std2),1), np.asarray(R0_corr_std3).reshape(len(R0_corr_std3),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            R1_corr_tot_std = np.vstack((np.asarray(R1_corr_std1).reshape(len(R1_corr_std1),1), np.asarray(R1_corr_std2).reshape(len(R1_corr_std2),1), np.asarray(R1_corr_std3).reshape(len(R1_corr_std3),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1), np.asarray(error1_std3).reshape(len(error1_std3),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 corrected' : R0_corr_tot_std, 'error R0' : error0_tot_std, 'R1 corrected' : R1_corr_tot_std, 'error R1' : error1_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 corrected', 'error R0', 'R1 corrected', 'error R1']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and nb_std_conc_value == 3 and Auto_bias_conc_value == 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            R0_ref_tot_std = np.vstack((np.asarray(R0_ref_std1).reshape(len(R0_ref_std1),1), np.asarray(R0_ref_std2).reshape(len(R0_ref_std2),1), np.asarray(R0_ref_std3).reshape(len(R0_ref_std3),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            R1_ref_tot_std = np.vstack((np.asarray(R1_ref_std1).reshape(len(R1_ref_std1),1), np.asarray(R1_ref_std2).reshape(len(R1_ref_std2),1), np.asarray(R1_ref_std3).reshape(len(R1_ref_std3),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1), np.asarray(error1_std3).reshape(len(error1_std3),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 ref (wt%)' : R0_ref_tot_std, 'error R0' : error0_tot_std, 'R1 ref (wt%)' : R1_ref_tot_std, 'error R1' : error1_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 ref (wt%)', 'error R0', 'R1 ref (wt%)', 'error R1']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 1  and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            Std_M = pd.DataFrame({'Name' : Name_std, 'Time (h)' : Time_std, 'R0 raw' : R0_std, 'error R0' : error0_std, 'R1 raw' : R1_std, 'error R1' : error1_std, 'R2 raw' : R2_std, 'error R2' : error2_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 raw', 'error R0', 'R1 raw', 'error R1', 'R2 raw', 'error R2']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 1 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            Std_M = pd.DataFrame({'Name' : Name_std, 'Time (h)' : Time_std, 'R0 corrected' : R0_corr_std, 'error R0' : error0_std, 'R1 corrected' : R1_corr_std, 'error R1' : error1_std, 'R2 corrected' : R2_corr_std, 'error R2' : error2_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 corrected', 'error R0', 'R1 corrected', 'error R1', 'R2 corrected', 'error R2']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 1 and Auto_bias_conc_value == 1:
            Std_M = pd.DataFrame({'Name' : Name_std, 'Time (h)' : Time_std, 'R0 ref (wt%)' : R0_ref_std, 'error R0' : error0_std, 'R1 ref (wt%)' : R1_ref_std, 'error R1' : error1_std, 'R2 ref (wt%)' : R2_ref_std, 'error R2' : error2_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 ref (wt%)', 'error R0', 'R1 ref (wt%)', 'error R1', 'R2 ref (wt%)', 'error R2']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            R0_tot_std = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            R1_tot_std = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1)))
            R2_tot_std = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1)))
            error2_tot_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 raw' : R0_tot_std, 'error R0' : error0_tot_std, 'R1 raw' : R1_tot_std, 'error R1' : error1_tot_std, 'R2 raw' : R2_tot_std, 'error R2' : error2_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 raw', 'error R0', 'R1 raw', 'error R1', 'R2 raw', 'error R2']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            R0_corr_tot_std = np.vstack((np.asarray(R0_corr_std1).reshape(len(R0_corr_std1),1), np.asarray(R0_corr_std2).reshape(len(R0_corr_std2),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            R1_corr_tot_std = np.vstack((np.asarray(R1_corr_std1).reshape(len(R1_corr_std1),1), np.asarray(R1_corr_std2).reshape(len(R1_corr_std2),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1)))
            R2_corr_tot_std = np.vstack((np.asarray(R2_corr_std1).reshape(len(R2_corr_std1),1), np.asarray(R2_corr_std2).reshape(len(R2_corr_std2),1)))
            error2_tot_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 corrected' : R0_corr_tot_std, 'error R0' : error0_tot_std, 'R1 corrected' : R1_corr_tot_std, 'error R1' : error1_tot_std, 'R2 corrected' : R2_corr_tot_std, 'error R2' : error2_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 corrected', 'error R0', 'R1 corrected', 'error R1', 'R2 corrected', 'error R2']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 2 and Auto_bias_conc_value == 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            R0_ref_tot_std = np.vstack((np.asarray(R0_ref_std1).reshape(len(R0_ref_std1),1), np.asarray(R0_ref_std2).reshape(len(R0_ref_std2),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            R1_ref_tot_std = np.vstack((np.asarray(R1_ref_std1).reshape(len(R1_ref_std1),1), np.asarray(R1_ref_std2).reshape(len(R1_ref_std2),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1)))
            R2_ref_tot_std = np.vstack((np.asarray(R2_ref_std1).reshape(len(R2_ref_std1),1), np.asarray(R2_ref_std2).reshape(len(R2_ref_std2),1)))
            error2_tot_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 ref (wt%)' : R0_ref_tot_std, 'error R0' : error0_tot_std, 'R1 ref (wt%)' : R1_ref_tot_std, 'error R1' : error1_tot_std, 'R2 ref (wt%)' : R2_ref_tot_std, 'error R2' : error2_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 ref (wt%)', 'error R0', 'R1 ref (wt%)', 'error R1', 'R2 ref (wt%)', 'error R2']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            R0_tot_std = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            R1_tot_std = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1), np.asarray(R1_std3).reshape(len(R1_std3),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1), np.asarray(error1_std3).reshape(len(error1_std3),1)))
            R2_tot_std = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1), np.asarray(R2_std3).reshape(len(R2_std3),1)))
            error2_tot_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1), np.asarray(error2_std3).reshape(len(error2_std3),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 raw' : R0_tot_std, 'error R0' : error0_tot_std, 'R1 raw' : R1_tot_std, 'error R1' : error1_tot_std, 'R2 raw' : R2_tot_std, 'error R2' : error2_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 raw', 'error R0', 'R1 raw', 'error R1', 'R2 raw', 'error R2']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            R0_corr_tot_std = np.vstack((np.asarray(R0_corr_std1).reshape(len(R0_corr_std1),1), np.asarray(R0_corr_std2).reshape(len(R0_corr_std2),1), np.asarray(R0_corr_std3).reshape(len(R0_corr_std3),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            R1_corr_tot_std = np.vstack((np.asarray(R1_corr_std1).reshape(len(R1_corr_std1),1), np.asarray(R1_corr_std2).reshape(len(R1_corr_std2),1), np.asarray(R1_corr_std3).reshape(len(R1_corr_std3),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1), np.asarray(error1_std3).reshape(len(error1_std3),1)))
            R2_corr_tot_std = np.vstack((np.asarray(R2_corr_std1).reshape(len(R2_corr_std1),1), np.asarray(R2_corr_std2).reshape(len(R2_corr_std2),1), np.asarray(R2_corr_std3).reshape(len(R2_corr_std3),1)))
            error2_tot_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1), np.asarray(error2_std3).reshape(len(error2_std3),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 corrected' : R0_corr_tot_std, 'error R0' : error0_tot_std, 'R1 corrected' : R1_corr_tot_std, 'error R1' : error1_tot_std, 'R2 corrected' : R2_corr_tot_std, 'error R2' : error2_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 corrected', 'error R0', 'R1 corrected', 'error R1', 'R2 corrected', 'error R2']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and nb_std_conc_value == 3 and Auto_bias_conc_value == 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            R0_ref_tot_std = np.vstack((np.asarray(R0_ref_std1).reshape(len(R0_ref_std1),1), np.asarray(R0_ref_std2).reshape(len(R0_ref_std2),1), np.asarray(R0_ref_std3).reshape(len(R0_ref_std3),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            R1_ref_tot_std = np.vstack((np.asarray(R1_ref_std1).reshape(len(R1_ref_std1),1), np.asarray(R1_ref_std2).reshape(len(R1_ref_std2),1), np.asarray(R1_ref_std3).reshape(len(R1_ref_std3),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1), np.asarray(error1_std3).reshape(len(error1_std3),1)))
            R2_ref_tot_std = np.vstack((np.asarray(R2_ref_std1).reshape(len(R2_ref_std1),1), np.asarray(R2_ref_std2).reshape(len(R2_ref_std2),1), np.asarray(R2_ref_std3).reshape(len(R2_ref_std3),1)))
            error2_tot_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1), np.asarray(error2_std3).reshape(len(error2_std3),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 ref (wt%)' : R0_ref_tot_std, 'error R0' : error0_tot_std, 'R1 ref (wt%)' : R1_ref_tot_std, 'error R1' : error1_tot_std, 'R2 ref (wt%)' : R2_ref_tot_std, 'error R2' : error2_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 ref (wt%)', 'error R0', 'R1 ref (wt%)', 'error R1', 'R2 ref (wt%)', 'error R2']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 1  and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            Std_M = pd.DataFrame({'Name' : Name_std, 'Time (h)' : Time_std, 'R0 raw' : R0_std, 'error R0' : error0_std, 'R1 raw' : R1_std, 'error R1' : error1_std, 'R2 raw' : R2_std, 'error R2' : error2_std, 'R3 raw' : R3_std, 'error R3' : error3_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 raw', 'error R0', 'R1 raw', 'error R1', 'R2 raw', 'error R2', 'R3 raw', 'error R3']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 1 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            Std_M = pd.DataFrame({'Name' : Name_std, 'Time (h)' : Time_std, 'R0 corrected' : R0_corr_std, 'error R0' : error0_std, 'R1 corrected' : R1_corr_std, 'error R1' : error1_std, 'R2 corrected' : R2_corr_std, 'error R2' : error2_std, 'R3 corrected' : R3_corr_std, 'error R3' : error3_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 corrected', 'error R0', 'R1 corrected', 'error R1', 'R2 corrected', 'error R2', 'R3 corrected', 'error R3']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 1 and Auto_bias_conc_value == 1:
            Std_M = pd.DataFrame({'Name' : Name_std, 'Time (h)' : Time_std, 'R0 ref (wt%)' : R0_ref_std, 'error R0' : error0_std, 'R1 ref (wt%)' : R1_ref_std, 'error R1' : error1_std, 'R2 ref (wt%)' : R2_ref_std, 'error R2' : error2_std, 'R3 ref (wt%)' : R3_ref_std, 'error R3' : error3_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 ref (wt%)', 'error R0', 'R1 ref (wt%)', 'error R1', 'R2 ref (wt%)', 'error R2', 'R3 ref (wt%)', 'error R3']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            R0_tot_std = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            R1_tot_std = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1)))
            R2_tot_std = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1)))
            error2_tot_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1)))
            R3_tot_std = np.vstack((np.asarray(R3_std1).reshape(len(R3_std1),1), np.asarray(R3_std2).reshape(len(R3_std2),1)))
            error3_tot_std = np.vstack((np.asarray(error3_std1).reshape(len(error3_std1),1), np.asarray(error3_std2).reshape(len(error3_std2),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 raw' : R0_tot_std, 'error R0' : error0_tot_std, 'R1 raw' : R1_tot_std, 'error R1' : error1_tot_std, 'R2 raw' : R2_tot_std, 'error R2' : error2_tot_std, 'R3 raw' : R3_tot_std, 'error R3' : error3_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 raw', 'error R0', 'R1 raw', 'error R1', 'R2 raw', 'error R2', 'R3 raw', 'error R3']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            R0_corr_tot_std = np.vstack((np.asarray(R0_corr_std1).reshape(len(R0_corr_std1),1), np.asarray(R0_corr_std2).reshape(len(R0_corr_std2),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            R1_corr_tot_std = np.vstack((np.asarray(R1_corr_std1).reshape(len(R1_corr_std1),1), np.asarray(R1_corr_std2).reshape(len(R1_corr_std2),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1)))
            R2_corr_tot_std = np.vstack((np.asarray(R2_corr_std1).reshape(len(R2_corr_std1),1), np.asarray(R2_corr_std2).reshape(len(R2_corr_std2),1)))
            error2_tot_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1)))
            R3_corr_tot_std = np.vstack((np.asarray(R3_corr_std1).reshape(len(R3_corr_std1),1), np.asarray(R3_corr_std2).reshape(len(R3_corr_std2),1)))
            error3_tot_std = np.vstack((np.asarray(error3_std1).reshape(len(error3_std1),1), np.asarray(error3_std2).reshape(len(error3_std2),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 corrected' : R0_corr_tot_std, 'error R0' : error0_tot_std, 'R1 corrected' : R1_corr_tot_std, 'error R1' : error1_tot_std, 'R2 corrected' : R2_corr_tot_std, 'error R2' : error2_tot_std, 'R3 corrected' : R3_corr_tot_std, 'error R3' : error3_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 corrected', 'error R0', 'R1 corrected', 'error R1', 'R2 corrected', 'error R2', 'R3 corrected', 'error R3']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 2 and Auto_bias_conc_value == 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1)))
            R0_ref_tot_std = np.vstack((np.asarray(R0_ref_std1).reshape(len(R0_ref_std1),1), np.asarray(R0_ref_std2).reshape(len(R0_ref_std2),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1)))
            R1_ref_tot_std = np.vstack((np.asarray(R1_ref_std1).reshape(len(R1_ref_std1),1), np.asarray(R1_ref_std2).reshape(len(R1_ref_std2),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1)))
            R2_ref_tot_std = np.vstack((np.asarray(R2_ref_std1).reshape(len(R2_ref_std1),1), np.asarray(R2_ref_std2).reshape(len(R2_ref_std2),1)))
            error2_tot_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1)))
            R3_ref_tot_std = np.vstack((np.asarray(R3_ref_std1).reshape(len(R3_ref_std1),1), np.asarray(R3_ref_std2).reshape(len(R3_ref_std2),1)))
            error3_tot_std = np.vstack((np.asarray(error3_std1).reshape(len(error3_std1),1), np.asarray(error3_std2).reshape(len(error3_std2),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 ref (wt%)' : R0_ref_tot_std, 'error R0' : error0_tot_std, 'R1 ref (wt%)' : R1_ref_tot_std, 'error R1' : error1_tot_std, 'R2 ref (wt%)' : R2_ref_tot_std, 'error R2' : error2_tot_std, 'R3 ref (wt%)' : R3_ref_tot_std, 'error R3' : error3_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 ref (wt%)', 'error R0', 'R1 ref (wt%)', 'error R1', 'R2 ref (wt%)', 'error R2', 'R3 ref (wt%)', 'error R3']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            R0_tot_std = np.vstack((np.asarray(R0_std1).reshape(len(R0_std1),1), np.asarray(R0_std2).reshape(len(R0_std2),1), np.asarray(R0_std3).reshape(len(R0_std3),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            R1_tot_std = np.vstack((np.asarray(R1_std1).reshape(len(R1_std1),1), np.asarray(R1_std2).reshape(len(R1_std2),1), np.asarray(R1_std3).reshape(len(R1_std3),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1), np.asarray(error1_std3).reshape(len(error1_std3),1)))
            R2_tot_std = np.vstack((np.asarray(R2_std1).reshape(len(R2_std1),1), np.asarray(R2_std2).reshape(len(R2_std2),1), np.asarray(R2_std3).reshape(len(R2_std3),1)))
            error2_tot_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1), np.asarray(error2_std3).reshape(len(error2_std3),1)))
            R3_tot_std = np.vstack((np.asarray(R3_std1).reshape(len(R3_std1),1), np.asarray(R3_std2).reshape(len(R3_std2),1), np.asarray(R3_std3).reshape(len(R3_std3),1)))
            error3_tot_std = np.vstack((np.asarray(error3_std1).reshape(len(error3_std1),1), np.asarray(error3_std2).reshape(len(error3_std2),1), np.asarray(error3_std3).reshape(len(error3_std3),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 raw' : R0_tot_std, 'error R0' : error0_tot_std, 'R1 raw' : R1_tot_std, 'error R1' : error1_tot_std, 'R2 raw' : R2_tot_std, 'error R2' : error2_tot_std, 'R3 raw' : R3_tot_std, 'error R3' : error3_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 raw', 'error R0', 'R1 raw', 'error R1', 'R2 raw', 'error R2', 'R3 raw', 'error R3']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            R0_corr_tot_std = np.vstack((np.asarray(R0_corr_std1).reshape(len(R0_corr_std1),1), np.asarray(R0_corr_std2).reshape(len(R0_corr_std2),1), np.asarray(R0_corr_std3).reshape(len(R0_corr_std3),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            R1_corr_tot_std = np.vstack((np.asarray(R1_corr_std1).reshape(len(R1_corr_std1),1), np.asarray(R1_corr_std2).reshape(len(R1_corr_std2),1), np.asarray(R1_corr_std3).reshape(len(R1_corr_std3),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1), np.asarray(error1_std3).reshape(len(error1_std3),1)))
            R2_corr_tot_std = np.vstack((np.asarray(R2_corr_std1).reshape(len(R2_corr_std1),1), np.asarray(R2_corr_std2).reshape(len(R2_corr_std2),1), np.asarray(R2_corr_std3).reshape(len(R2_corr_std3),1)))
            error2_tot_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1), np.asarray(error2_std3).reshape(len(error2_std3),1)))
            R3_corr_tot_std = np.vstack((np.asarray(R3_corr_std1).reshape(len(R3_corr_std1),1), np.asarray(R3_corr_std2).reshape(len(R3_corr_std2),1), np.asarray(R3_corr_std3).reshape(len(R3_corr_std3),1)))
            error3_tot_std = np.vstack((np.asarray(error3_std1).reshape(len(error3_std1),1), np.asarray(error3_std2).reshape(len(error3_std2),1), np.asarray(error3_std3).reshape(len(error3_std3),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 corrected' : R0_corr_tot_std, 'error R0' : error0_tot_std, 'R1 corrected' : R1_corr_tot_std, 'error R1' : error1_tot_std, 'R2 corrected' : R2_corr_tot_std, 'error R2' : error2_tot_std, 'R3 corrected' : R3_corr_tot_std, 'error R3' : error3_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 corrected', 'error R0', 'R1 corrected', 'error R1', 'R2 corrected', 'error R2', 'R3 corrected', 'error R3']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and nb_std_conc_value == 3 and Auto_bias_conc_value == 1:
            Name_tot_std = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1)))
            Time_tot_std = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1)))
            R0_ref_tot_std = np.vstack((np.asarray(R0_ref_std1).reshape(len(R0_ref_std1),1), np.asarray(R0_ref_std2).reshape(len(R0_ref_std2),1), np.asarray(R0_ref_std3).reshape(len(R0_ref_std3),1)))
            error0_tot_std = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1)))
            R1_ref_tot_std = np.vstack((np.asarray(R1_ref_std1).reshape(len(R1_ref_std1),1), np.asarray(R1_ref_std2).reshape(len(R1_ref_std2),1), np.asarray(R1_ref_std3).reshape(len(R1_ref_std3),1)))
            error1_tot_std = np.vstack((np.asarray(error1_std1).reshape(len(error1_std1),1), np.asarray(error1_std2).reshape(len(error1_std2),1), np.asarray(error1_std3).reshape(len(error1_std3),1)))
            R2_ref_tot_std = np.vstack((np.asarray(R2_ref_std1).reshape(len(R2_ref_std1),1), np.asarray(R2_ref_std2).reshape(len(R2_ref_std2),1), np.asarray(R2_ref_std3).reshape(len(R2_ref_std3),1)))
            error2_tot_std = np.vstack((np.asarray(error2_std1).reshape(len(error2_std1),1), np.asarray(error2_std2).reshape(len(error2_std2),1), np.asarray(error2_std3).reshape(len(error2_std3),1)))
            R3_ref_tot_std = np.vstack((np.asarray(R3_ref_std1).reshape(len(R3_ref_std1),1), np.asarray(R3_ref_std2).reshape(len(R3_ref_std2),1), np.asarray(R3_ref_std3).reshape(len(R3_ref_std3),1)))
            error3_tot_std = np.vstack((np.asarray(error3_std1).reshape(len(error3_std1),1), np.asarray(error3_std2).reshape(len(error3_std2),1), np.asarray(error3_std3).reshape(len(error3_std3),1)))
            Std_M = pd.DataFrame({'Name' : Name_tot_std, 'Time (h)' : Time_tot_std, 'R0 ref (wt%)' : R0_ref_tot_std, 'error R0' : error0_tot_std, 'R1 ref (wt%)' : R1_ref_tot_std, 'error R1' : error1_tot_std, 'R2 ref (wt%)' : R2_ref_tot_std, 'error R2' : error2_tot_std, 'R3 ref (wt%)' : R3_ref_tot_std, 'error R3' : error3_tot_std})
            Std_M = [['Name', 'Comment', 'Time(h)', 'R0 ref (wt%)', 'error R0', 'R1 ref (wt%)', 'error R1', 'R2 ref (wt%)', 'error R2', 'R3 ref (wt%)', 'error R3']]
        Std_M.to_csv(name_save_output_standards, index=False)

    def output_sample_data(self):
        name_output_sample = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_output_sample = name_output_sample[0] + '.csv'

        if Analyses_type_value == 1 and Auto_bias_iso_value == 0 and drift_order_iso_value == 0:
            Spl_M = pd.DataFrame({'Name' : Name_unk,  'Time (h)' : Time_unk, 'delta raw (permil)' : delta_unk, 'error (permil)' : error_unk})
            Spl_M = Spl_M[['Name', 'Time (h)', 'delta raw (permil)', 'error (permil)']]
        elif Analyses_type_value == 1 and Auto_bias_iso_value == 0 and drift_order_iso_value >= 1:
            Spl_M = pd.DataFrame({'Name' : Name_unk,  'Time (h)' : Time_unk, 'delta corrected (permil)' : delta_corr_unk, 'error (permil)' : error_unk, 'error fit (permil)' : sigma_fit_unk})
            Spl_M = Spl_M[['Name', 'Time (h)', 'delta corrected (permil)', 'error (permil)']]
        elif Analyses_type_value == 1 and Auto_bias_iso_value == 1:
            Spl_M = pd.DataFrame({'Name' : Name_unk,  'Time (h)' : Time_unk, 'delta ref (permil)' : delta_ref_unk, 'error ref (permil)' : se_ref_unk})
            Spl_M = Spl_M[['Name', 'Time (h)', 'delta ref (permil)', 'error ref (permil)']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            Spl_M = pd.DataFrame({'Name' : Name_unk,  'Time (h)' : Time_unk, 'R0 raw' : R0_unk, 'error_R0' : error0_unk})
            Spl_M = Spl_M[['Name', 'Time (h)', 'R0 raw', 'error R0']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            Spl_M = pd.DataFrame({'Name' : Name_unk,  'Time (h)' : Time_unk, 'R0 corrected' : R0_corr_unk, 'error_R0' : error0_unk})
            Spl_M = Spl_M[['Name', 'Time (h)', 'R0 corrected', 'error R0']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 1 and Auto_bias_conc_value == 1:
            Spl_M = pd.DataFrame({'Name' : Name_unk,  'Time (h)' : Time_unk, 'R0 ref (wt%)' : R0_ref_unk, 'error_R0_ref (wt%)' : se0_ref_unk})
            Spl_M = Spl_M[['Name', 'Time (h)', 'R0 ref (wt%)', 'error R0 ref (wt%)']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            Spl_M = pd.DataFrame({'Name' : Name_unk,  'Time (h)' : Time_unk, 'R0 raw' : R0_unk, 'error R0' : error0_unk, 'R1 raw' : R1_unk, 'error_R1' : error1_unk})
            Spl_M = Spl_M[['Name', 'Time (h)', 'R0 raw', 'error R0', 'R1 raw', 'error R1']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            Spl_M = pd.DataFrame({'Name' : Name_unk,  'Time (h)' : Time_unk, 'R0 corrected' : R0_corr_unk, 'error_R0' : error0_unk, 'R1_corrected' : R1_corr_unk, 'error_R1' : error1_unk})
            Spl_M = Spl_M[['Name', 'Time (h)', 'R0 corrected', 'error R0', 'R1 corrected', 'error R1']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 2 and Auto_bias_conc_value == 1:
            Spl_M = pd.DataFrame({'Name' : Name_unk,  'Time (h)' : Time_unk, 'R0 ref (wt%)' : R0_ref_unk, 'error_R0_ref (wt%)' : se0_ref_unk, 'R1_ref (wt%)' : R1_ref_unk, 'error_R1_ref (wt%)' : se1_ref_unk})
            Spl_M = Spl_M[['Name', 'Time (h)', 'R0 ref (wt%)', 'error R0 ref (wt%)', 'R1 ref (wt%)', 'error R1 ref (wt%)']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            Spl_M = pd.DataFrame({'Name' : Name_unk,  'Time (h)' : Time_unk, 'R0 raw' : R0_unk, 'error R0' : error0_unk, 'R1 raw' : R1_unk, 'error_R1' : error1_unk, 'R2_raw' : R2_unk, 'error_R2' : error2_unk})
            Spl_M = Spl_M[['Name', 'Time (h)', 'R0 raw', 'error R0', 'R1 raw', 'error R1', 'R2 raw', 'error R2']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            Spl_M = pd.DataFrame({'Name' : Name_unk,  'Time (h)' : Time_unk, 'R0 corrected' : R0_corr_unk, 'error R0' : error0_unk, 'R1 corrected' : R1_corr_unk, 'error R1' : error1_unk, 'R2 corrected' : R2_corr_unk, 'error R2' : error2_unk})
            Spl_M = Spl_M[['Name', 'Time (h)', 'R0 corrected', 'error R0', 'R1 corrected', 'error R1', 'R2 corrected', 'error R2']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 3 and Auto_bias_conc_value == 1:
            Spl_M = pd.DataFrame({'Name' : Name_unk,  'Time (h)' : Time_unk, 'R0 ref (wt%)' : R0_ref_unk, 'error_R0_ref (wt%)' : se0_ref_unk, 'R1_ref (wt%)' : R1_ref_unk, 'error_R1_ref (wt%)' : se1_ref_unk, 'R2_ref (wt%)' : R2_ref_unk, 'error_R2_ref (wt%)' : se2_ref_unk})
            Spl_M = Spl_M[['Name', 'Time (h)', 'R0 ref (wt%)', 'error R0 ref (wt%)', 'R1 ref (wt%)', 'error R1 ref (wt%)', 'R2 ref (wt%)', 'error R2 ref (wt%)']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and Auto_bias_conc_value == 0 and drift_order_conc_value == 0:
            Spl_M = pd.DataFrame({'Name' : Name_unk,  'Time (h)' : Time_unk, 'R0 raw' : R0_unk, 'error R0' : error0_unk, 'R1 raw' : R1_unk, 'error R1' : error1_unk, 'R2 raw' : R2_unk, 'error R2' : error2_unk, 'R3 raw' : R3_unk, 'error R3' : error3_unk})
            Spl_M = Spl_M[['Name', 'Time (h)', 'R0 raw', 'error R0', 'R1 raw', 'error R1', 'R2 raw', 'error R2', 'R3 raw', 'error R3']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and Auto_bias_conc_value == 0 and drift_order_conc_value >= 1:
            Spl_M = pd.DataFrame({'Name' : Name_unk,  'Time (h)' : Time_unk, 'R0 corrected' : R0_corr_unk, 'error R0' : error0_unk, 'R1 corrected' : R1_corr_unk, 'error R1' : error1_unk, 'R2 corrected' : R2_corr_unk, 'error R2' : error2_unk, 'R3 corrected' : R3_corr_unk, 'error R3' : error3_unk})
            Spl_M = Spl_M[['Name', 'Time (h)', 'R0 corrected', 'error R0', 'R1 corrected', 'error R1', 'R2 corrected', 'error R2', 'R3 corrected', 'error R3 (wt%)']]
        elif Analyses_type_value == 2 and nb_ratios_conc_value == 4 and Auto_bias_conc_value == 1:
            Spl_M = pd.DataFrame({'Name' : Name_unk,  'Time (h)' : Time_unk, 'R0 ref (wt%)' : R0_ref_unk, 'error R0 ref (wt%)' : se0_ref_unk, 'R1 ref (wt%)' : R1_ref_unk, 'error R1 ref(wt%)' : se1_ref_unk, 'R2 ref (wt%)' : R2_ref_unk, 'error R2 ref (wt%)' : se2_ref_unk, 'R3 ref (wt%)' : R3_ref_unk, 'error R3 ref (wt%)' : se3_ref_unk})
            Spl_M = Spl_M[['Name', 'Time (h)', 'R0 ref (wt%)', 'error R0 ref (wt%)', 'R1 ref (wt%)', 'error R1 ref (wt%)', 'R2 ref (wt%)', 'error R2 ref (wt%)', 'R3 ref (wt%)', 'error R3 ref (wt%)']]
        Spl_M.to_csv(name_save_output_sample, index=False)

    def output_whole_session(self):
        name_output_whole = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_output_whole = name_output_whole[0] + '.csv'

        if Analyses_type_value == 1 and Auto_bias_iso_value == 0 and drift_order_iso_value == 0 and nb_std_iso == 1:
            Name_out = np.vstack((np.asarray(Name_std).reshape(len(Name_std),1), np.asarray(Name_unk).reshape(len(Name_unk),1)))
            Time_out = np.vstack((np.asarray(Time_std).reshape(len(Time_std),1), np.asarray(Time_unk).reshape(len(Time_unk),1)))
            delta_out = np.vstack((np.asarray(delta_std).reshape(len(delta_std),1), np.asarray(delta_unk).reshape(len(delta_unk),1)))
            se_out = np.vstack((np.asarray(error0_std).reshape(len(error0_std),1), np.asarray(error_se_unk).reshape(len(error_se_unk),1)))
            error_out = np.vstack((np.asarray(error0_std).reshape(len(error0_std),1), np.asarray(error_unk).reshape(len(error_unk),1)))
            Name_output = []
            Time_output = []
            delta_output = []
            se_output = []
            error_output = []
            for i in range(len(Name_out)):
                str_Name_out = str(Name_out[i])
                str_Name_out = str_Name_out.replace("[", "")
                str_Name_out = str_Name_out.replace("]", "")
                str_Name_out = str_Name_out.replace("'", "")
                Name_output.append(str_Name_out)
            for i in range(len(Time_out)):
                Time_output.append(float(Time_out[i]))
            for i in range(len(delta_out)):
                delta_output.append(float(delta_out[i]))
            for i in range(len(se_out)):
                se_output.append(float(se_out[i]))
            for i in range(len(error_out)):
                error_output.append(float(error_out[i]))
            if Name_cell == 1:
                Comment_out = np.vstack((np.asarray(Comment_std).reshape(len(Comment_std),1), np.asarray(Comment_unk).reshape(len(Comment_unk),1)))
                Comment_output = []
                for i in range(len(Comment_out)):
                    str_Comment_out = str(Comment_out[i])
                    str_NComment_out = str_Comment_out.replace("[", "")
                    str_Comment_out = str_Comment_out.replace("]", "")
                    str_Comment_out = str_Comment_out.replace("'", "")
                    Comment_output.append(str_Comment_out)
            if Isotopic_system_value == 8 or Isotopic_system_value == 9:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_output, '2se (permil)' : se_output, 'error (permil)' : error_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole.assign(Al_Mg=mean_27Al_24Mg)
                    Spl_Whole = Spl_Whole.assign(Al_Mg_se=se_27Al_24Mg)
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'Al_Mg', 'Al_Mg_se','D26Mg raw (permil)', '2se (permil)', 'error (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output,  'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_output, '2se (permil)' : se_output, 'error (permil)' : error_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole.assign(Al_Mg=mean_27Al_24Mg)
                    Spl_Whole = Spl_Whole.assign(Al_Mg_se=se_27Al_24Mg)
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'Al_Mg', 'Al_Mg_se','D26Mg raw (permil)', '2se (permil)', 'error (permil)']]
            else:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'delta raw (permil)' : delta_output, '2se (permil)' : se_output, 'error (permil)' : error_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'delta raw (permil)', '2se (permil)', 'error (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output,  'Time (h)' : Time_output, 'delta raw (permil)' : delta_output, '2se (permil)' : se_output, 'error (permil)' : error_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'delta raw (permil)', '2se (permil)', 'error (permil)']]
        elif Analyses_type_value == 1 and Auto_bias_iso_value == 0 and drift_order_iso_value >= 1 and nb_std_iso == 1:
            Name_out = np.vstack((np.asarray(Name_std).reshape(len(Name_std),1), np.asarray(Name_unk).reshape(len(Name_unk),1)))
            if Name_cell == 1:
                Comment_out = np.vstack((np.asarray(Comment_std).reshape(len(Comment_std),1), np.asarray(Comment_unk).reshape(len(Comment_unk),1)))
                Comment_output = []
                for i in range(len(Comment_out)):
                    str_Comment_out = str(Comment_out[i])
                    str_NComment_out = str_Comment_out.replace("[", "")
                    str_Comment_out = str_Comment_out.replace("]", "")
                    str_Comment_out = str_Comment_out.replace("'", "")
                    Comment_output.append(str_Comment_out)
            Time_out = np.vstack((np.asarray(Time_std).reshape(len(Time_std),1), np.asarray(Time_unk).reshape(len(Time_unk),1)))
            delta_uncorr_out = np.vstack((np.asarray(delta_std).reshape(len(delta_std),1), np.asarray(delta_unk).reshape(len(delta_unk),1)))
            delta_out = np.vstack((np.asarray(delta_corr_std).reshape(len(delta_corr_std),1), np.asarray(delta_corr_unk).reshape(len(delta_corr_unk),1)))
            se_out = np.vstack((np.asarray(error0_std).reshape(len(error0_std),1), np.asarray(error_corr_unk).reshape(len(error_corr_unk),1)))
            error_out = np.vstack((np.asarray(error0_std).reshape(len(error0_std),1), np.asarray(error_unk).reshape(len(error_unk),1)))
            fit_sigma_out = np.vstack((np.asarray(interval_u_fit).reshape(len(interval_u_fit),1), np.asarray(sigma_fit_unk).reshape(len(sigma_fit_unk),1)))
            Name_output = []
            Time_output = []
            delta_uncorr_output = []
            delta_output = []
            se_output = []
            error_output = []
            fit_sigma_output = []
            for i in range(len(Name_out)):
                str_Name_out = str(Name_out[i])
                str_Name_out = str_Name_out.replace("[", "")
                str_Name_out = str_Name_out.replace("]", "")
                str_Name_out = str_Name_out.replace("'", "")
                Name_output.append(str_Name_out)
            for i in range(len(Time_out)):
                Time_output.append(float(Time_out[i]))
            for i in range(len(delta_uncorr_out)):
                delta_uncorr_output.append(float(delta_uncorr_out[i]))
            for i in range(len(delta_out)):
                delta_output.append(float(delta_out[i]))
            for i in range(len(se_out)):
                se_output.append(float(se_out[i]))
            for i in range(len(error_out)):
                error_output.append(float(error_out[i]))
            for i in range(len(fit_sigma_out)):
                fit_sigma_output.append(float(fit_sigma_out[i]))
            if Isotopic_system_value == 8 or Isotopic_system_value ==9:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_uncorr_output, 'error int (permil)' : error_output, 'error fit (permil)' : fit_sigma_output,'D26Mg corr (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole.assign(Al_Mg=mean_27Al_24Mg)
                    Spl_Whole = Spl_Whole.assign(Al_Mg_se=se_27Al_24Mg)
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'Al_Mg', 'Al_Mg_se','D26Mg raw (permil)', 'error int (permil)', 'error fit (permil)', 'D26Mg corr (permil)', '2se (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_uncorr_output, 'error (permil)' : error_output, 'error fit (permil)' : fit_sigma_output, 'D26Mg corr (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole.assign(Al_Mg=mean_27Al_24Mg)
                    Spl_Whole = Spl_Whole.assign(Al_Mg_se=se_27Al_24Mg)
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'Al_Mg', 'Al_Mg_se','D26Mg raw (permil)', 'error (permil)', 'error fit (permil)', 'D26Mg corr (permil)', '2se (permil)']]
            else:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'delta raw (permil)' : delta_uncorr_output, 'error int (permil)' : error_output, 'error fit (permil)' : fit_sigma_output, 'delta corr (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'delta raw (permil)', 'error int (permil)', 'error fit (permil)', 'delta corr (permil)', '2se (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Time (h)' : Time_output, 'delta raw (permil)' : delta_uncorr_output, 'error (permil)' : error_output, 'error fit (permil)' : fit_sigma_output, 'delta corr (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'delta raw (permil)', 'error (permil)', 'error fit (permil)', 'delta corr (permil)', '2se (permil)']]
        elif Analyses_type_value == 1 and Auto_bias_iso_value == 1 and nb_std_iso == 1:
            Name_out = np.vstack((np.asarray(Name_std).reshape(len(Name_std),1), np.asarray(Name_unk).reshape(len(Name_unk),1)))
            if Name_cell == 1:
                Comment_out = np.vstack((np.asarray(Comment_std).reshape(len(Comment_std),1), np.asarray(Comment_unk).reshape(len(Comment_unk),1)))
                Comment_output = []
                for i in range(len(Comment_out)):
                    str_Comment_out = str(Comment_out[i])
                    str_NComment_out = str_Comment_out.replace("[", "")
                    str_Comment_out = str_Comment_out.replace("]", "")
                    str_Comment_out = str_Comment_out.replace("'", "")
                    Comment_output.append(str_Comment_out)
            Time_out = np.vstack((np.asarray(Time_std).reshape(len(Time_std),1), np.asarray(Time_unk).reshape(len(Time_unk),1)))
            delta_uncorr_out = np.vstack((np.asarray(delta_std).reshape(len(delta_std),1), np.asarray(delta_unk).reshape(len(delta_unk),1)))
            delta_out = np.vstack((np.asarray(delta_ref_std).reshape(len(delta_ref_std),1), np.asarray(delta_ref_unk).reshape(len(delta_ref_unk),1)))
            se_out = np.vstack((np.asarray(error0_std).reshape(len(error0_std),1), np.asarray(error_ref_unk).reshape(len(error_ref_unk),1)))
            error_out = np.vstack((np.asarray(error0_std).reshape(len(error0_std),1), np.asarray(error_unk).reshape(len(error_unk),1)))
            Name_output = []
            Time_output = []
            delta_uncorr_output = []
            delta_output = []
            se_output = []
            error_output = []
            for i in range(len(Name_out)):
                str_Name_out = str(Name_out[i])
                str_Name_out = str_Name_out.replace("[", "")
                str_Name_out = str_Name_out.replace("]", "")
                str_Name_out = str_Name_out.replace("'", "")
                Name_output.append(str_Name_out)
            for i in range(len(Time_out)):
                Time_output.append(float(Time_out[i]))
            for i in range(len(delta_uncorr_out)):
                delta_uncorr_output.append(float(delta_uncorr_out[i]))
            for i in range(len(delta_out)):
                delta_output.append(float(delta_out[i]))
            for i in range(len(se_out)):
                se_output.append(float(se_out[i]))
            for i in range(len(error_out)):
                error_output.append(float(error_out[i]))
            if Isotopic_system_value == 8 or Isotopic_system_value ==9:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_uncorr_output, 'error int (permil)' : error_output,'D26Mg ref (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'D26Mg raw (permil)', 'error int (permil)', 'D26Mg ref (permil)', '2se (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_uncorr_output, 'error (permil)' : error_output, 'D26Mg ref (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'D26Mg raw (permil)', 'error (permil)', 'D26Mg ref (permil)', '2se (permil)']]
            else:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'delta raw (permil)' : delta_uncorr_output, 'error int (permil)' : error_output,'delta ref (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'delta raw (permil)', 'error int (permil)', 'delta ref (permil)', '2se (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Time (h)' : Time_output, 'delta raw (permil)' : delta_uncorr_output, 'error (permil)' : error_output, 'delta ref (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'delta raw (permil)', 'error (permil)', 'delta ref (permil)', '2se (permil)']]
        elif Analyses_type_value == 1 and Auto_bias_iso_value == 0 and drift_order_iso_value == 0 and nb_std_iso == 2:
            Name_out = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_unk).reshape(len(Name_unk),1)))
            Time_out = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_unk).reshape(len(Time_unk),1)))
            delta_out = np.vstack((np.asarray(delta_std1).reshape(len(delta_std1),1), np.asarray(delta_std2).reshape(len(delta_std2),1), np.asarray(delta_unk).reshape(len(delta_unk),1)))
            se_out = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error_se_unk).reshape(len(error_se_unk),1)))
            error_out = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error_unk).reshape(len(error_unk),1)))
            Name_output = []
            Time_output = []
            delta_output = []
            se_output = []
            error_output = []
            for i in range(len(Name_out)):
                str_Name_out = str(Name_out[i])
                str_Name_out = str_Name_out.replace("[", "")
                str_Name_out = str_Name_out.replace("]", "")
                str_Name_out = str_Name_out.replace("'", "")
                Name_output.append(str_Name_out)
            for i in range(len(Time_out)):
                Time_output.append(float(Time_out[i]))
            for i in range(len(delta_out)):
                delta_output.append(float(delta_out[i]))
            for i in range(len(se_out)):
                se_output.append(float(se_out[i]))
            for i in range(len(error_out)):
                error_output.append(float(error_out[i]))
            if Name_cell == 1:
                Comment_out = np.vstack((np.asarray(Comment_std1).reshape(len(Comment_std1),1), np.asarray(Comment_std2).reshape(len(Comment_std2),1), np.asarray(Comment_unk).reshape(len(Comment_unk),1)))
                Comment_output = []
                for i in range(len(Comment_out)):
                    str_Comment_out = str(Comment_out[i])
                    str_NComment_out = str_Comment_out.replace("[", "")
                    str_Comment_out = str_Comment_out.replace("]", "")
                    str_Comment_out = str_Comment_out.replace("'", "")
                    Comment_output.append(str_Comment_out)
            if Isotopic_system_value == 8 or Isotopic_system_value == 9:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_output, '2se (permil)' : se_output, 'error (permil)' : error_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole.assign(Al_Mg=mean_27Al_24Mg)
                    Spl_Whole = Spl_Whole.assign(Al_Mg_se=se_27Al_24Mg)
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'Al_Mg', 'Al_Mg_se','D26Mg raw (permil)', '2se (permil)', 'error (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output,  'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_output, '2se (permil)' : se_output, 'error (permil)' : error_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole.assign(Al_Mg=mean_27Al_24Mg)
                    Spl_Whole = Spl_Whole.assign(Al_Mg_se=se_27Al_24Mg)
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'Al_Mg', 'Al_Mg_se','D26Mg raw (permil)', '2se (permil)', 'error (permil)']]
            else:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'delta raw (permil)' : delta_output, '2se (permil)' : se_output, 'error (permil)' : error_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'delta raw (permil)', '2se (permil)', 'error (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output,  'Time (h)' : Time_output, 'delta raw (permil)' : delta_output, '2se (permil)' : se_output, 'error (permil)' : error_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'delta raw (permil)', '2se (permil)', 'error (permil)']]
        elif Analyses_type_value == 1 and Auto_bias_iso_value == 0 and drift_order_iso_value >= 1 and nb_std_iso == 2:
            Name_out = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_unk).reshape(len(Name_unk),1)))
            if Name_cell == 1:
                Comment_out = np.vstack((np.asarray(Comment_std1).reshape(len(Comment_std1),1), np.asarray(Comment_std2).reshape(len(Comment_std2),1), np.asarray(Comment_unk).reshape(len(Comment_unk),1)))
                Comment_output = []
                for i in range(len(Comment_out)):
                    str_Comment_out = str(Comment_out[i])
                    str_NComment_out = str_Comment_out.replace("[", "")
                    str_Comment_out = str_Comment_out.replace("]", "")
                    str_Comment_out = str_Comment_out.replace("'", "")
                    Comment_output.append(str_Comment_out)
            Time_out = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_unk).reshape(len(Time_unk),1)))
            delta_uncorr_out = np.vstack((np.asarray(delta_std1).reshape(len(delta_std1),1), np.asarray(delta_std2).reshape(len(delta_std2),1), np.asarray(delta_unk).reshape(len(delta_unk),1)))
            delta_out = np.vstack((np.asarray(delta_corr_std1).reshape(len(delta_corr_std1),1), np.asarray(delta_corr_std2).reshape(len(delta_corr_std2),1), np.asarray(delta_corr_unk).reshape(len(delta_corr_unk),1)))
            se_out = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error_corr_unk).reshape(len(error_corr_unk),1)))
            error_out = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error_unk).reshape(len(error_unk),1)))
            Name_output = []
            Time_output = []
            delta_uncorr_output = []
            delta_output = []
            se_output = []
            error_output = []
            fit_sigma_output = []
            for i in range(len(Name_out)):
                str_Name_out = str(Name_out[i])
                str_Name_out = str_Name_out.replace("[", "")
                str_Name_out = str_Name_out.replace("]", "")
                str_Name_out = str_Name_out.replace("'", "")
                Name_output.append(str_Name_out)
            for i in range(len(Time_out)):
                Time_output.append(float(Time_out[i]))
            for i in range(len(delta_uncorr_out)):
                delta_uncorr_output.append(float(delta_uncorr_out[i]))
            for i in range(len(delta_out)):
                delta_output.append(float(delta_out[i]))
            for i in range(len(se_out)):
                se_output.append(float(se_out[i]))
            for i in range(len(error_out)):
                error_output.append(float(error_out[i]))
            if Isotopic_system_value == 8 or Isotopic_system_value ==9:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_uncorr_output, 'error int (permil)' : error_output, 'D26Mg corr (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole.assign(Al_Mg=mean_27Al_24Mg)
                    Spl_Whole = Spl_Whole.assign(Al_Mg_se=se_27Al_24Mg)
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'Al_Mg', 'Al_Mg_se','D26Mg raw (permil)', 'error int (permil)', 'D26Mg corr (permil)', '2se (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_uncorr_output, 'error (permil)' : error_output, 'D26Mg corr (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole.assign(Al_Mg=mean_27Al_24Mg)
                    Spl_Whole = Spl_Whole.assign(Al_Mg_se=se_27Al_24Mg)
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'Al_Mg', 'Al_Mg_se','D26Mg raw (permil)', 'error (permil)', 'D26Mg corr (permil)', '2se (permil)']]
            else:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'delta raw (permil)' : delta_uncorr_output, 'error int (permil)' : error_output, 'delta corr (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'delta raw (permil)', 'error int (permil)', 'delta corr (permil)', '2se (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Time (h)' : Time_output, 'delta raw (permil)' : delta_uncorr_output, 'error (permil)' : error_output, 'delta corr (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'delta raw (permil)', 'error (permil)', 'delta corr (permil)', '2se (permil)']]
        elif Analyses_type_value == 1 and Auto_bias_iso_value == 1 and nb_std_iso == 2:
            Name_out = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_unk).reshape(len(Name_unk),1)))
            if Name_cell == 1:
                Comment_out = np.vstack((np.asarray(Comment_std1).reshape(len(Comment_std1),1), np.asarray(Comment_std2).reshape(len(Comment_std2),1), np.asarray(Comment_unk).reshape(len(Comment_unk),1)))
                Comment_output = []
                for i in range(len(Comment_out)):
                    str_Comment_out = str(Comment_out[i])
                    str_NComment_out = str_Comment_out.replace("[", "")
                    str_Comment_out = str_Comment_out.replace("]", "")
                    str_Comment_out = str_Comment_out.replace("'", "")
                    Comment_output.append(str_Comment_out)
            Time_out = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_unk).reshape(len(Time_unk),1)))
            delta_uncorr_out = np.vstack((np.asarray(delta_std1).reshape(len(delta_std1),1), np.asarray(delta_std2).reshape(len(delta_std2),1), np.asarray(delta_unk).reshape(len(delta_unk),1)))
            delta_out = np.vstack((np.asarray(delta_ref_std1).reshape(len(delta_ref_std1),1), np.asarray(delta_ref_std2).reshape(len(delta_ref_std2),1), np.asarray(delta_ref_unk).reshape(len(delta_ref_unk),1)))
            se_out = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error_ref_unk).reshape(len(error_ref_unk),1)))
            error_out = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error_unk).reshape(len(error_unk),1)))
            Name_output = []
            Time_output = []
            delta_uncorr_output = []
            delta_output = []
            se_output = []
            error_output = []
            for i in range(len(Name_out)):
                str_Name_out = str(Name_out[i])
                str_Name_out = str_Name_out.replace("[", "")
                str_Name_out = str_Name_out.replace("]", "")
                str_Name_out = str_Name_out.replace("'", "")
                Name_output.append(str_Name_out)
            for i in range(len(Time_out)):
                Time_output.append(float(Time_out[i]))
            for i in range(len(delta_uncorr_out)):
                delta_uncorr_output.append(float(delta_uncorr_out[i]))
            for i in range(len(delta_out)):
                delta_output.append(float(delta_out[i]))
            for i in range(len(se_out)):
                se_output.append(float(se_out[i]))
            for i in range(len(error_out)):
                error_output.append(float(error_out[i]))
            if Isotopic_system_value == 8 or Isotopic_system_value ==9:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_uncorr_output, 'error int (permil)' : error_output,'D26Mg ref (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'D26Mg raw (permil)', 'error int (permil)', 'D26Mg ref (permil)', '2se (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_uncorr_output, 'error (permil)' : error_output, 'D26Mg ref (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'D26Mg raw (permil)', 'error (permil)', 'D26Mg ref (permil)', '2se (permil)']]
            else:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'delta raw (permil)' : delta_uncorr_output, 'error int (permil)' : error_output,'delta ref (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'delta raw (permil)', 'error int (permil)', 'delta ref (permil)', '2se (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Time (h)' : Time_output, 'delta raw (permil)' : delta_uncorr_output, 'error (permil)' : error_output, 'delta ref (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'delta raw (permil)', 'error (permil)', 'delta ref (permil)', '2se (permil)']]
        elif Analyses_type_value == 1 and Auto_bias_iso_value == 0 and drift_order_iso_value == 0 and nb_std_iso == 3:
            Name_out = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1), np.asarray(Name_unk).reshape(len(Name_unk),1)))
            Time_out = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1), np.asarray(Time_unk).reshape(len(Time_unk),1)))
            delta_out = np.vstack((np.asarray(delta_std1).reshape(len(delta_std1),1), np.asarray(delta_std2).reshape(len(delta_std2),1), np.asarray(delta_std3).reshape(len(delta_std3),1), np.asarray(delta_unk).reshape(len(delta_unk),1)))
            se_out = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1), np.asarray(error_se_unk).reshape(len(error_se_unk),1)))
            error_out = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1), np.asarray(error_unk).reshape(len(error_unk),1)))
            Name_output = []
            Time_output = []
            delta_output = []
            se_output = []
            error_output = []
            for i in range(len(Name_out)):
                str_Name_out = str(Name_out[i])
                str_Name_out = str_Name_out.replace("[", "")
                str_Name_out = str_Name_out.replace("]", "")
                str_Name_out = str_Name_out.replace("'", "")
                Name_output.append(str_Name_out)
            for i in range(len(Time_out)):
                Time_output.append(float(Time_out[i]))
            for i in range(len(delta_out)):
                delta_output.append(float(delta_out[i]))
            for i in range(len(se_out)):
                se_output.append(float(se_out[i]))
            for i in range(len(error_out)):
                error_output.append(float(error_out[i]))
            if Name_cell == 1:
                Comment_out = np.vstack((np.asarray(Comment_std1).reshape(len(Comment_std1),1), np.asarray(Comment_std2).reshape(len(Comment_std2),1), np.asarray(Comment_std3).reshape(len(Comment_std3),1), np.asarray(Comment_unk).reshape(len(Comment_unk),1)))
                Comment_output = []
                for i in range(len(Comment_out)):
                    str_Comment_out = str(Comment_out[i])
                    str_NComment_out = str_Comment_out.replace("[", "")
                    str_Comment_out = str_Comment_out.replace("]", "")
                    str_Comment_out = str_Comment_out.replace("'", "")
                    Comment_output.append(str_Comment_out)
            if Isotopic_system_value == 8 or Isotopic_system_value == 9:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_output, '2se (permil)' : se_output, 'error (permil)' : error_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole.assign(Al_Mg=mean_27Al_24Mg)
                    Spl_Whole = Spl_Whole.assign(Al_Mg_se=se_27Al_24Mg)
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'Al_Mg', 'Al_Mg_se','D26Mg raw (permil)', '2se (permil)', 'error (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output,  'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_output, '2se (permil)' : se_output, 'error (permil)' : error_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole.assign(Al_Mg=mean_27Al_24Mg)
                    Spl_Whole = Spl_Whole.assign(Al_Mg_se=se_27Al_24Mg)
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'Al_Mg', 'Al_Mg_se','D26Mg raw (permil)', '2se (permil)', 'error (permil)']]
            else:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'delta raw (permil)' : delta_output, '2se (permil)' : se_output, 'error (permil)' : error_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'delta raw (permil)', '2se (permil)', 'error (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output,  'Time (h)' : Time_output, 'delta raw (permil)' : delta_output, '2se (permil)' : se_output, 'error (permil)' : error_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'delta raw (permil)', '2se (permil)', 'error (permil)']]
        elif Analyses_type_value == 1 and Auto_bias_iso_value == 0 and drift_order_iso_value >= 1 and nb_std_iso == 3:
            Name_out = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1), np.asarray(Name_unk).reshape(len(Name_unk),1)))
            if Name_cell == 1:
                Comment_out = np.vstack((np.asarray(Comment_std1).reshape(len(Comment_std1),1), np.asarray(Comment_std2).reshape(len(Comment_std2),1), np.asarray(Comment_std3).reshape(len(Comment_std3),1), np.asarray(Comment_unk).reshape(len(Comment_unk),1)))
                Comment_output = []
                for i in range(len(Comment_out)):
                    str_Comment_out = str(Comment_out[i])
                    str_NComment_out = str_Comment_out.replace("[", "")
                    str_Comment_out = str_Comment_out.replace("]", "")
                    str_Comment_out = str_Comment_out.replace("'", "")
                    Comment_output.append(str_Comment_out)
            Time_out = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1), np.asarray(Time_unk).reshape(len(Time_unk),1)))
            delta_uncorr_out = np.vstack((np.asarray(delta_std1).reshape(len(delta_std1),1), np.asarray(delta_std2).reshape(len(delta_std2),1), np.asarray(delta_std3).reshape(len(delta_std3),1), np.asarray(delta_unk).reshape(len(delta_unk),1)))
            delta_out = np.vstack((np.asarray(delta_corr_std1).reshape(len(delta_corr_std1),1), np.asarray(delta_corr_std2).reshape(len(delta_corr_std2),1), np.asarray(delta_corr_std3).reshape(len(delta_corr_std3),1), np.asarray(delta_corr_unk).reshape(len(delta_corr_unk),1)))
            se_out = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1), np.asarray(error_corr_unk).reshape(len(error_corr_unk),1)))
            error_out = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1), np.asarray(error_unk).reshape(len(error_unk),1)))
            Name_output = []
            Time_output = []
            delta_uncorr_output = []
            delta_output = []
            se_output = []
            error_output = []
            fit_sigma_output = []
            for i in range(len(Name_out)):
                str_Name_out = str(Name_out[i])
                str_Name_out = str_Name_out.replace("[", "")
                str_Name_out = str_Name_out.replace("]", "")
                str_Name_out = str_Name_out.replace("'", "")
                Name_output.append(str_Name_out)
            for i in range(len(Time_out)):
                Time_output.append(float(Time_out[i]))
            for i in range(len(delta_uncorr_out)):
                delta_uncorr_output.append(float(delta_uncorr_out[i]))
            for i in range(len(delta_out)):
                delta_output.append(float(delta_out[i]))
            for i in range(len(se_out)):
                se_output.append(float(se_out[i]))
            for i in range(len(error_out)):
                error_output.append(float(error_out[i]))
            if Isotopic_system_value == 8 or Isotopic_system_value ==9:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_uncorr_output, 'error int (permil)' : error_output, 'D26Mg corr (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole.assign(Al_Mg=mean_27Al_24Mg)
                    Spl_Whole = Spl_Whole.assign(Al_Mg_se=se_27Al_24Mg)
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'Al_Mg', 'Al_Mg_se','D26Mg raw (permil)', 'error int (permil)', 'D26Mg corr (permil)', '2se (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_uncorr_output, 'error (permil)' : error_output, 'D26Mg corr (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole.assign(Al_Mg=mean_27Al_24Mg)
                    Spl_Whole = Spl_Whole.assign(Al_Mg_se=se_27Al_24Mg)
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'Al_Mg', 'Al_Mg_se','D26Mg raw (permil)', 'error (permil)', 'D26Mg corr (permil)', '2se (permil)']]
            else:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'delta raw (permil)' : delta_uncorr_output, 'error int (permil)' : error_output, 'delta corr (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'delta raw (permil)', 'error int (permil)', 'delta corr (permil)', '2se (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Time (h)' : Time_output, 'delta raw (permil)' : delta_uncorr_output, 'error (permil)' : error_output, 'delta corr (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'delta raw (permil)', 'error (permil)', 'delta corr (permil)', '2se (permil)']]
        elif Analyses_type_value == 1 and Auto_bias_iso_value == 1 and nb_std_iso == 3:
            Name_out = np.vstack((np.asarray(Name_std1).reshape(len(Name_std1),1), np.asarray(Name_std2).reshape(len(Name_std2),1), np.asarray(Name_std3).reshape(len(Name_std3),1), np.asarray(Name_unk).reshape(len(Name_unk),1)))
            if Name_cell == 1:
                Comment_out = np.vstack((np.asarray(Comment_std1).reshape(len(Comment_std1),1), np.asarray(Comment_std2).reshape(len(Comment_std2),1), np.asarray(Comment_std3).reshape(len(Comment_std3),1), np.asarray(Comment_unk).reshape(len(Comment_unk),1)))
                Comment_output = []
                for i in range(len(Comment_out)):
                    str_Comment_out = str(Comment_out[i])
                    str_NComment_out = str_Comment_out.replace("[", "")
                    str_Comment_out = str_Comment_out.replace("]", "")
                    str_Comment_out = str_Comment_out.replace("'", "")
                    Comment_output.append(str_Comment_out)
            Time_out = np.vstack((np.asarray(Time_std1).reshape(len(Time_std1),1), np.asarray(Time_std2).reshape(len(Time_std2),1), np.asarray(Time_std3).reshape(len(Time_std3),1), np.asarray(Time_unk).reshape(len(Time_unk),1)))
            delta_uncorr_out = np.vstack((np.asarray(delta_std1).reshape(len(delta_std1),1), np.asarray(delta_std2).reshape(len(delta_std2),1), np.asarray(delta_std3).reshape(len(delta_std3),1), np.asarray(delta_unk).reshape(len(delta_unk),1)))
            delta_out = np.vstack((np.asarray(delta_ref_std1).reshape(len(delta_ref_std1),1), np.asarray(delta_ref_std2).reshape(len(delta_ref_std2),1), np.asarray(delta_ref_std3).reshape(len(delta_ref_std3),1), np.asarray(delta_ref_unk).reshape(len(delta_ref_unk),1)))
            se_out = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1), np.asarray(error_ref_unk).reshape(len(error_ref_unk),1)))
            error_out = np.vstack((np.asarray(error0_std1).reshape(len(error0_std1),1), np.asarray(error0_std2).reshape(len(error0_std2),1), np.asarray(error0_std3).reshape(len(error0_std3),1), np.asarray(error_unk).reshape(len(error_unk),1)))
            Name_output = []
            Time_output = []
            delta_uncorr_output = []
            delta_output = []
            se_output = []
            error_output = []
            for i in range(len(Name_out)):
                str_Name_out = str(Name_out[i])
                str_Name_out = str_Name_out.replace("[", "")
                str_Name_out = str_Name_out.replace("]", "")
                str_Name_out = str_Name_out.replace("'", "")
                Name_output.append(str_Name_out)
            for i in range(len(Time_out)):
                Time_output.append(float(Time_out[i]))
            for i in range(len(delta_uncorr_out)):
                delta_uncorr_output.append(float(delta_uncorr_out[i]))
            for i in range(len(delta_out)):
                delta_output.append(float(delta_out[i]))
            for i in range(len(se_out)):
                se_output.append(float(se_out[i]))
            for i in range(len(error_out)):
                error_output.append(float(error_out[i]))
            if Isotopic_system_value == 8 or Isotopic_system_value ==9:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_uncorr_output, 'error int (permil)' : error_output,'D26Mg ref (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'D26Mg raw (permil)', 'error int (permil)', 'D26Mg ref (permil)', '2se (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Time (h)' : Time_output, 'D26Mg raw (permil)' : delta_uncorr_output, 'error (permil)' : error_output, 'D26Mg ref (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'D26Mg raw (permil)', 'error (permil)', 'D26Mg ref (permil)', '2se (permil)']]
            else:
                if Name_cell == 1:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Comment' : Comment_output, 'Time (h)' : Time_output, 'delta raw (permil)' : delta_uncorr_output, 'error int (permil)' : error_output,'delta ref (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Comment', 'Time (h)', 'delta raw (permil)', 'error int (permil)', 'delta ref (permil)', '2se (permil)']]
                else:
                    Spl_Whole = pd.DataFrame({'Name' : Name_output, 'Time (h)' : Time_output, 'delta raw (permil)' : delta_uncorr_output, 'error (permil)' : error_output, 'delta ref (permil)' : delta_output, '2se (permil)' : se_output})
                    Spl_Whole = Spl_Whole.sort_values(by=['Time (h)'])
                    Spl_Whole = Spl_Whole[['Name', 'Time (h)', 'delta raw (permil)', 'error (permil)', 'delta ref (permil)', '2se (permil)']]
        Spl_Whole.to_csv(name_save_output_whole, index=False)

    def See_Background_24Mg(self):
        self.Fig_Bckg_24 = Figure_Fig_Bckg_24_Window()
        self.Fig_Bckg_24.show()

    def Enter_new_n_cycles(self):
        self.PopUp_new_n_cycles = PopUp_n_cycles_Window()
        self.PopUp_new_n_cycles.show()

    def Reset_Variables(self):
        global Input_Mat_mod
        Input_Mat_mod = 0
        global Deadtime_new
        Deadtime_new = 0
        global number_of_cycles
        number_of_cycles = 0
        global Section_value
        Section_value = 0

    def input(self):
        name_input_matrix = QFileDialog.getSaveFileName(self, 'Save File')
        name_save_input_matrix = name_input_matrix[0] + '.csv'
        B.to_csv(name_save_input_matrix,index=False)



def main():
    app = QApplication(sys.argv)
    form = ProceSIMS_App()
    form.show()
    app.exec_()


if __name__ == '__main__':
    main()